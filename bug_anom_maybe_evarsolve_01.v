(* -*- mode: coq; coq-prog-args: ("-emacs" "-w" "+implicit-core-hint-db,+implicits-in-term,+non-reversible-notation,+deprecated-intros-until-0,+deprecated-focus,+unused-intro-pattern,+deprecated-hint-constr,+fragile-hint-constr,+variable-collision,+unexpected-implicit-declaration,+omega-is-deprecated,+deprecated-instantiate-syntax,+non-recursive,+deprecated-hint-rewrite-without-locality,+deprecated-hint-without-locality,+deprecated-instance-without-locality,+undeclared-scope,+deprecated-typeclasses-transparency-without-locality,unsupported-attributes" "-R" "src/Rewriter" "Rewriter" "-I" "src/Rewriter/Util/plugins" "-top" "Rewriter.Rewriter.Examples" "-native-compiler" "ondemand" "-native-compiler" "ondemand") -*- *)
(* File reduced by coq-bug-minimizer from original input, then from 104176 lines to 97527 lines, then from 97560 lines to 3537 lines, then from 3550 lines to 3708 lines, then from 3713 lines to 3598 lines *)
(* coqc version 8.15.0 compiled with OCaml 4.11.2
   coqtop version 8.15.0
   Expected coqc runtime on this file: 2.147 sec *)
Require Coq.Classes.Morphisms.
Require Rewriter.Util.GlobalSettings.
Require Rewriter.Util.FixCoqMistakes.
Require Rewriter.Util.Notations.
Require Ltac2.Init.
Require Coq.Lists.List.
Require Coq.Classes.RelationClasses.
Require Rewriter.Util.IffT.
Require Rewriter.Util.Isomorphism.
Require Rewriter.Util.HProp.
Require Rewriter.Util.Equality.
Require Rewriter.Util.PrimitiveProd.
Require Rewriter.Util.PrimitiveHList.
Require Rewriter.Util.InductiveHList.
Require Rewriter.Language.PreCommon.
Require Rewriter.Language.Pre.
Require Coq.Bool.Bool.
Require Rewriter.Util.Bool.
Require Coq.Logic.Eqdep_dec.
Require Coq.NArith.NArith.
Require Coq.Arith.Arith.
Require Coq.Numbers.Natural.Peano.NPeano.
Require Coq.Relations.Relation_Definitions.
Require Coq.micromega.Lia.
Require Rewriter.Util.NatUtil.
Require Coq.Lists.SetoidList.
Require Coq.Arith.Peano_dec.
Require Coq.ZArith.ZArith.
Require Coq.Numbers.BinNums.
Require Rewriter.Util.Pointed.
Require Coq.Setoids.Setoid.
Require Rewriter.Util.Prod.
Require Rewriter.Util.Sigma.
Require Coq.ZArith.BinInt.
Require Coq.ZArith.ZArith_dec.
Require Coq.NArith.BinNat.
Require Rewriter.Util.Decidable.
Require Rewriter.Util.Tactics.Head.
Require Rewriter.Util.Tactics.BreakMatch.
Require Rewriter.Util.Tactics.DestructHyps.
Require Rewriter.Util.Tactics.DestructHead.
Require Rewriter.Util.Option.
Require Rewriter.Util.Tactics.SpecializeBy.
Require Rewriter.Util.Tactics.Test.
Require Rewriter.Util.Tactics.Not.
Require Rewriter.Util.Tactics.DoWithHyp.
Require Rewriter.Util.Tactics.RewriteHyp.
Require Rewriter.Util.Tactics.ConstrFail.
Require Rewriter.Util.Tactics.SplitInContext.
Require Rewriter.Util.ListUtil.
Require Rewriter.Language.PreLemmas.
Require Ltac2.Ltac2.
Require Ltac2.Bool.
Require Ltac2.Printf.
Require Coq.FSets.FMapPositive.
Require Rewriter.Util.Tactics.GetGoal.
Require Rewriter.Util.LetIn.
Require Rewriter.Util.OptionList.
Require Rewriter.Util.CPSNotations.
Require Coq.Classes.CMorphisms.
Require Rewriter.Util.plugins.RewriterBuildRegistry.
Axiom proof_admitted : False.
Tactic Notation "admit" := abstract case proof_admitted.

Export Pre.RewriteRuleNotations.
Import Coq.ZArith.ZArith.
Import Coq.Lists.List.
Import Rewriter.Util.ListUtil.
Import ListNotations.

Lemma map_eagerly_rect
  : forall A B f ls, @List.map A B f ls
                     = (ident.eagerly (@list_rect) _ _)
                         []
                         (fun x xs map_f_xs => f x :: map_f_xs)
                         ls.
Admitted.

Lemma app_eagerly_rect
  : forall A xs ys, @List.app A xs ys
                    = (ident.eagerly (@list_rect) _ _)
                        ys (fun x xs app_xs_ys => x :: app_xs_ys) xs.
Admitted.

Lemma flat_map_rect
  : forall A B f xs,
    @List.flat_map A B f xs
    = (list_rect (fun _ => _))
        nil
        (fun x _ flat_map_tl => f x ++ flat_map_tl)%list
        xs.
Admitted.

  Definition rules_proofs :=
    Eval cbv [projT2] in
      projT2
        (ltac:(RewriterBuildRegistry.make_rules_proofs_with_args)
          : Pre.rules_proofsT_with_args
              (Z.add_0_r
                , (@Prod.fst_pair)
                , (@Prod.snd_pair)
                , map_eagerly_rect
                , app_eagerly_rect
                , eval_rect list
                , do_again flat_map_rect)).

  Definition scraped_data :=
    (ltac:(cbv [projT1]; RewriterBuildRegistry.make_scraped_data_with_args)
      : PreCommon.Pre.ScrapedData.t_with_args
          rules_proofs
            false).

  Import Language.Compilers.
  Inductive base : Set :=  base_Z : base | base_nat0 : base | base_bool0 : base.
  Inductive ident : forall _ : type.type (base.type.type base), Type :=
    ident_false0 : ident
                     (@type.base (base.type.type base)
                        (@base.type.type_base base base_bool0))
  | ident_flat_map : forall t t0 : base.type.type base,
                     ident
                       (@type.arrow (base.type.type base)
                          (@type.arrow (base.type.type base)
                             (@type.base (base.type.type base) t)
                             (@type.base (base.type.type base)
                                (@base.type.list base t0)))
                          (@type.arrow (base.type.type base)
                             (@type.base (base.type.type base)
                                (@base.type.list base t))
                             (@type.base (base.type.type base)
                                (@base.type.list base t0))))
  | ident_app : forall t : base.type.type base,
                ident
                  (@type.arrow (base.type.type base)
                     (@type.base (base.type.type base) (@base.type.list base t))
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base) (@base.type.list base t))
                        (@type.base (base.type.type base) (@base.type.list base t))))
  | ident_map : forall t t0 : base.type.type base,
                ident
                  (@type.arrow (base.type.type base)
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base) t)
                        (@type.base (base.type.type base) t0))
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base) (@base.type.list base t))
                        (@type.base (base.type.type base) (@base.type.list base t0))))
  | ident_snd : forall t t0 : base.type.type base,
                ident
                  (@type.arrow (base.type.type base)
                     (@type.base (base.type.type base) (@base.type.prod base t t0))
                     (@type.base (base.type.type base) t0))
  | ident_fst : forall t t0 : base.type.type base,
                ident
                  (@type.arrow (base.type.type base)
                     (@type.base (base.type.type base) (@base.type.prod base t t0))
                     (@type.base (base.type.type base) t))
  | ident_Z0 : ident
                 (@type.base (base.type.type base)
                    (@base.type.type_base base base_Z))
  | ident_add : ident
                  (@type.arrow (base.type.type base)
                     (@type.base (base.type.type base)
                        (@base.type.type_base base base_Z))
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base)
                           (@base.type.type_base base base_Z))
                        (@type.base (base.type.type base)
                           (@base.type.type_base base base_Z))))
  | ident_literal0 : forall (t : base)
                       (_ : match t return Type with
                            | base_Z => Z
                            | base_nat0 => nat
                            | base_bool0 => bool
                            end),
                     ident
                       (@type.base (base.type.type base)
                          (@base.type.type_base base t))
  | ident_nil0 : forall t : base.type.type base,
                 ident (@type.base (base.type.type base) (@base.type.list base t))
  | ident_cons0 : forall t : base.type.type base,
                  ident
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base) t)
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@base.type.list base t))
                          (@type.base (base.type.type base)
                             (@base.type.list base t))))
  | ident_Some0 : forall t : base.type.type base,
                  ident
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base) t)
                       (@type.base (base.type.type base) (@base.type.option base t)))
  | ident_None0 : forall t : base.type.type base,
                  ident
                    (@type.base (base.type.type base) (@base.type.option base t))
  | ident_pair0 : forall t t0 : base.type.type base,
                  ident
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base) t)
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base) t0)
                          (@type.base (base.type.type base)
                             (@base.type.prod base t t0))))
  | ident_tt0 : ident (@type.base (base.type.type base) (@base.type.unit base))
  | ident_prod_rect_nodep0 : forall t t0 t1 : base.type.type base,
                             ident
                               (@type.arrow (base.type.type base)
                                  (@type.arrow (base.type.type base)
                                     (@type.base (base.type.type base) t)
                                     (@type.arrow (base.type.type base)
                                        (@type.base (base.type.type base) t0)
                                        (@type.base (base.type.type base) t1)))
                                  (@type.arrow (base.type.type base)
                                     (@type.base (base.type.type base)
                                        (@base.type.prod base t t0))
                                     (@type.base (base.type.type base) t1)))
  | ident_bool_rect0 : forall t : base.type.type base,
                       ident
                         (@type.arrow (base.type.type base)
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@base.type.unit base))
                               (@type.base (base.type.type base) t))
                            (@type.arrow (base.type.type base)
                               (@type.arrow (base.type.type base)
                                  (@type.base (base.type.type base)
                                     (@base.type.unit base))
                                  (@type.base (base.type.type base) t))
                               (@type.arrow (base.type.type base)
                                  (@type.base (base.type.type base)
                                     (@base.type.type_base base base_bool0))
                                  (@type.base (base.type.type base) t))))
  | ident_list_case0 : forall t t0 : base.type.type base,
                       ident
                         (@type.arrow (base.type.type base)
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@base.type.unit base))
                               (@type.base (base.type.type base) t0))
                            (@type.arrow (base.type.type base)
                               (@type.arrow (base.type.type base)
                                  (@type.base (base.type.type base) t)
                                  (@type.arrow (base.type.type base)
                                     (@type.base (base.type.type base)
                                        (@base.type.list base t))
                                     (@type.base (base.type.type base) t0)))
                               (@type.arrow (base.type.type base)
                                  (@type.base (base.type.type base)
                                     (@base.type.list base t))
                                  (@type.base (base.type.type base) t0))))
  | ident_option_rect0 : forall t t0 : base.type.type base,
                         ident
                           (@type.arrow (base.type.type base)
                              (@type.arrow (base.type.type base)
                                 (@type.base (base.type.type base) t)
                                 (@type.base (base.type.type base) t0))
                              (@type.arrow (base.type.type base)
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base)
                                       (@base.type.unit base))
                                    (@type.base (base.type.type base) t0))
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base)
                                       (@base.type.option base t))
                                    (@type.base (base.type.type base) t0))))
  | ident_nat_rect0 : forall t : base.type.type base,
                      ident
                        (@type.arrow (base.type.type base)
                           (@type.arrow (base.type.type base)
                              (@type.base (base.type.type base)
                                 (@base.type.unit base))
                              (@type.base (base.type.type base) t))
                           (@type.arrow (base.type.type base)
                              (@type.arrow (base.type.type base)
                                 (@type.base (base.type.type base)
                                    (@base.type.type_base base base_nat0))
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base) t)
                                    (@type.base (base.type.type base) t)))
                              (@type.arrow (base.type.type base)
                                 (@type.base (base.type.type base)
                                    (@base.type.type_base base base_nat0))
                                 (@type.base (base.type.type base) t))))
  | ident_eager_nat_rect0 : forall t : base.type.type base,
                            ident
                              (@type.arrow (base.type.type base)
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base)
                                       (@base.type.unit base))
                                    (@type.base (base.type.type base) t))
                                 (@type.arrow (base.type.type base)
                                    (@type.arrow (base.type.type base)
                                       (@type.base (base.type.type base)
                                          (@base.type.type_base base base_nat0))
                                       (@type.arrow (base.type.type base)
                                          (@type.base (base.type.type base) t)
                                          (@type.base (base.type.type base) t)))
                                    (@type.arrow (base.type.type base)
                                       (@type.base (base.type.type base)
                                          (@base.type.type_base base base_nat0))
                                       (@type.base (base.type.type base) t))))
  | ident_nat_rect_arrow0 : forall t t0 : base.type.type base,
                            ident
                              (@type.arrow (base.type.type base)
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base) t)
                                    (@type.base (base.type.type base) t0))
                                 (@type.arrow (base.type.type base)
                                    (@type.arrow (base.type.type base)
                                       (@type.base (base.type.type base)
                                          (@base.type.type_base base base_nat0))
                                       (@type.arrow (base.type.type base)
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base (base.type.type base) t)
                                             (@type.base (base.type.type base) t0))
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base (base.type.type base) t)
                                             (@type.base (base.type.type base) t0))))
                                    (@type.arrow (base.type.type base)
                                       (@type.base (base.type.type base)
                                          (@base.type.type_base base base_nat0))
                                       (@type.arrow (base.type.type base)
                                          (@type.base (base.type.type base) t)
                                          (@type.base (base.type.type base) t0)))))
  | ident_eager_nat_rect_arrow0 : forall t t0 : base.type.type base,
                                  ident
                                    (@type.arrow (base.type.type base)
                                       (@type.arrow (base.type.type base)
                                          (@type.base (base.type.type base) t)
                                          (@type.base (base.type.type base) t0))
                                       (@type.arrow (base.type.type base)
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.type_base base
                                                   base_nat0))
                                             (@type.arrow
                                                (base.type.type base)
                                                (@type.arrow
                                                   (base.type.type base)
                                                   (@type.base
                                                      (base.type.type base) t)
                                                   (@type.base
                                                      (base.type.type base) t0))
                                                (@type.arrow
                                                   (base.type.type base)
                                                   (@type.base
                                                      (base.type.type base) t)
                                                   (@type.base
                                                      (base.type.type base) t0))))
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.type_base base
                                                   base_nat0))
                                             (@type.arrow
                                                (base.type.type base)
                                                (@type.base (base.type.type base) t)
                                                (@type.base
                                                   (base.type.type base) t0)))))
  | ident_list_rect0 : forall t t0 : base.type.type base,
                       ident
                         (@type.arrow (base.type.type base)
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@base.type.unit base))
                               (@type.base (base.type.type base) t0))
                            (@type.arrow (base.type.type base)
                               (@type.arrow (base.type.type base)
                                  (@type.base (base.type.type base) t)
                                  (@type.arrow (base.type.type base)
                                     (@type.base (base.type.type base)
                                        (@base.type.list base t))
                                     (@type.arrow (base.type.type base)
                                        (@type.base (base.type.type base) t0)
                                        (@type.base (base.type.type base) t0))))
                               (@type.arrow (base.type.type base)
                                  (@type.base (base.type.type base)
                                     (@base.type.list base t))
                                  (@type.base (base.type.type base) t0))))
  | ident_eager_list_rect0 : forall t t0 : base.type.type base,
                             ident
                               (@type.arrow (base.type.type base)
                                  (@type.arrow (base.type.type base)
                                     (@type.base (base.type.type base)
                                        (@base.type.unit base))
                                     (@type.base (base.type.type base) t0))
                                  (@type.arrow (base.type.type base)
                                     (@type.arrow (base.type.type base)
                                        (@type.base (base.type.type base) t)
                                        (@type.arrow (base.type.type base)
                                           (@type.base
                                              (base.type.type base)
                                              (@base.type.list base t))
                                           (@type.arrow
                                              (base.type.type base)
                                              (@type.base (base.type.type base) t0)
                                              (@type.base (base.type.type base) t0))))
                                     (@type.arrow (base.type.type base)
                                        (@type.base (base.type.type base)
                                           (@base.type.list base t))
                                        (@type.base (base.type.type base) t0))))
  | ident_list_rect_arrow0 : forall t t0 t1 : base.type.type base,
                             ident
                               (@type.arrow (base.type.type base)
                                  (@type.arrow (base.type.type base)
                                     (@type.base (base.type.type base) t0)
                                     (@type.base (base.type.type base) t1))
                                  (@type.arrow (base.type.type base)
                                     (@type.arrow (base.type.type base)
                                        (@type.base (base.type.type base) t)
                                        (@type.arrow (base.type.type base)
                                           (@type.base
                                              (base.type.type base)
                                              (@base.type.list base t))
                                           (@type.arrow
                                              (base.type.type base)
                                              (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                    (base.type.type base) t0)
                                                 (@type.base
                                                    (base.type.type base) t1))
                                              (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                    (base.type.type base) t0)
                                                 (@type.base
                                                    (base.type.type base) t1)))))
                                     (@type.arrow (base.type.type base)
                                        (@type.base (base.type.type base)
                                           (@base.type.list base t))
                                        (@type.arrow (base.type.type base)
                                           (@type.base (base.type.type base) t0)
                                           (@type.base (base.type.type base) t1)))))
  | ident_eager_list_rect_arrow0 : forall t t0 t1 : base.type.type base,
                                   ident
                                     (@type.arrow (base.type.type base)
                                        (@type.arrow (base.type.type base)
                                           (@type.base (base.type.type base) t0)
                                           (@type.base (base.type.type base) t1))
                                        (@type.arrow (base.type.type base)
                                           (@type.arrow
                                              (base.type.type base)
                                              (@type.base (base.type.type base) t)
                                              (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                    (base.type.type base)
                                                    (@base.type.list base t))
                                                 (@type.arrow
                                                    (base.type.type base)
                                                    (@type.arrow
                                                      (base.type.type base)
                                                      (@type.base
                                                      (base.type.type base) t0)
                                                      (@type.base
                                                      (base.type.type base) t1))
                                                    (@type.arrow
                                                      (base.type.type base)
                                                      (@type.base
                                                      (base.type.type base) t0)
                                                      (@type.base
                                                      (base.type.type base) t1)))))
                                           (@type.arrow
                                              (base.type.type base)
                                              (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                              (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                    (base.type.type base) t0)
                                                 (@type.base
                                                    (base.type.type base) t1)))))
  | ident_List_nth_default0 : forall t : base.type.type base,
                              ident
                                (@type.arrow (base.type.type base)
                                   (@type.base (base.type.type base) t)
                                   (@type.arrow (base.type.type base)
                                      (@type.base (base.type.type base)
                                         (@base.type.list base t))
                                      (@type.arrow (base.type.type base)
                                         (@type.base (base.type.type base)
                                            (@base.type.type_base base base_nat0))
                                         (@type.base (base.type.type base) t))))
  | ident_eager_List_nth_default0 : forall t : base.type.type base,
                                    ident
                                      (@type.arrow (base.type.type base)
                                         (@type.base (base.type.type base) t)
                                         (@type.arrow (base.type.type base)
                                            (@type.base
                                               (base.type.type base)
                                               (@base.type.list base t))
                                            (@type.arrow
                                               (base.type.type base)
                                               (@type.base
                                                  (base.type.type base)
                                                  (@base.type.type_base base
                                                     base_nat0))
                                               (@type.base (base.type.type base) t)))).
Inductive raw_ident : Set :=
    raw_ident_false0 : raw_ident
  | raw_ident_flat_map : raw_ident
  | raw_ident_app : raw_ident
  | raw_ident_map : raw_ident
  | raw_ident_snd : raw_ident
  | raw_ident_fst : raw_ident
  | raw_ident_Z0 : raw_ident
  | raw_ident_add : raw_ident
  | raw_ident_literal0 : raw_ident
  | raw_ident_nil0 : raw_ident
  | raw_ident_cons0 : raw_ident
  | raw_ident_Some0 : raw_ident
  | raw_ident_None0 : raw_ident
  | raw_ident_pair0 : raw_ident
  | raw_ident_tt0 : raw_ident
  | raw_ident_prod_rect_nodep0 : raw_ident
  | raw_ident_bool_rect0 : raw_ident
  | raw_ident_list_case0 : raw_ident
  | raw_ident_option_rect0 : raw_ident
  | raw_ident_nat_rect0 : raw_ident
  | raw_ident_eager_nat_rect0 : raw_ident
  | raw_ident_nat_rect_arrow0 : raw_ident
  | raw_ident_eager_nat_rect_arrow0 : raw_ident
  | raw_ident_list_rect0 : raw_ident
  | raw_ident_eager_list_rect0 : raw_ident
  | raw_ident_list_rect_arrow0 : raw_ident
  | raw_ident_eager_list_rect_arrow0 : raw_ident
  | raw_ident_List_nth_default0 : raw_ident
  | raw_ident_eager_List_nth_default0 : raw_ident.
Inductive
pattern_ident : forall _ : type.type (pattern.base.type.type base), Type :=
    pattern_ident_false0 : pattern_ident
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_bool0))
  | pattern_ident_flat_map : forall t t0 : pattern.base.type.type base,
                             pattern_ident
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.arrow (pattern.base.type.type base)
                                     (@type.base (pattern.base.type.type base) t)
                                     (@type.base (pattern.base.type.type base)
                                        (@pattern.base.type.list base t0)))
                                  (@type.arrow (pattern.base.type.type base)
                                     (@type.base (pattern.base.type.type base)
                                        (@pattern.base.type.list base t))
                                     (@type.base (pattern.base.type.type base)
                                        (@pattern.base.type.list base t0))))
  | pattern_ident_app : forall t : pattern.base.type.type base,
                        pattern_ident
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t))
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t))))
  | pattern_ident_map : forall t t0 : pattern.base.type.type base,
                        pattern_ident
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t)
                                (@type.base (pattern.base.type.type base) t0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t))
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t0))))
  | pattern_ident_snd : forall t t0 : pattern.base.type.type base,
                        pattern_ident
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.prod base t t0))
                             (@type.base (pattern.base.type.type base) t0))
  | pattern_ident_fst : forall t t0 : pattern.base.type.type base,
                        pattern_ident
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.prod base t t0))
                             (@type.base (pattern.base.type.type base) t))
  | pattern_ident_Z0 : pattern_ident
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_Z))
  | pattern_ident_add : pattern_ident
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_Z))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.type_base base base_Z))
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.type_base base base_Z))))
  | pattern_ident_literal0 : forall t : base,
                             pattern_ident
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.type_base base t))
  | pattern_ident_nil0 : forall t : pattern.base.type.type base,
                         pattern_ident
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.list base t))
  | pattern_ident_cons0 : forall t : pattern.base.type.type base,
                          pattern_ident
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base) t)
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@pattern.base.type.list base t))
                                  (@type.base (pattern.base.type.type base)
                                     (@pattern.base.type.list base t))))
  | pattern_ident_Some0 : forall t : pattern.base.type.type base,
                          pattern_ident
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base) t)
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.option base t)))
  | pattern_ident_None0 : forall t : pattern.base.type.type base,
                          pattern_ident
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.option base t))
  | pattern_ident_pair0 : forall t t0 : pattern.base.type.type base,
                          pattern_ident
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base) t)
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base) t0)
                                  (@type.base (pattern.base.type.type base)
                                     (@pattern.base.type.prod base t t0))))
  | pattern_ident_tt0 : pattern_ident
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
  | pattern_ident_prod_rect_nodep0 : forall t t0 t1 : pattern.base.type.type base,
                                     pattern_ident
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base) t)
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                   (pattern.base.type.type base) t0)
                                                (@type.base
                                                   (pattern.base.type.type base) t1)))
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base)
                                                (@pattern.base.type.prod base t t0))
                                             (@type.base
                                                (pattern.base.type.type base) t1)))
  | pattern_ident_bool_rect0 : forall t : pattern.base.type.type base,
                               pattern_ident
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.arrow (pattern.base.type.type base)
                                       (@type.base (pattern.base.type.type base)
                                          (@pattern.base.type.unit base))
                                       (@type.base (pattern.base.type.type base) t))
                                    (@type.arrow (pattern.base.type.type base)
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.base (pattern.base.type.type base)
                                             (@pattern.base.type.unit base))
                                          (@type.base (pattern.base.type.type base)
                                             t))
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.base (pattern.base.type.type base)
                                             (@pattern.base.type.type_base base
                                                base_bool0))
                                          (@type.base (pattern.base.type.type base)
                                             t))))
  | pattern_ident_list_case0 : forall t t0 : pattern.base.type.type base,
                               pattern_ident
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.arrow (pattern.base.type.type base)
                                       (@type.base (pattern.base.type.type base)
                                          (@pattern.base.type.unit base))
                                       (@type.base (pattern.base.type.type base) t0))
                                    (@type.arrow (pattern.base.type.type base)
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.base (pattern.base.type.type base)
                                             t)
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base)
                                                (@pattern.base.type.list base t))
                                             (@type.base
                                                (pattern.base.type.type base) t0)))
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.base (pattern.base.type.type base)
                                             (@pattern.base.type.list base t))
                                          (@type.base (pattern.base.type.type base)
                                             t0))))
  | pattern_ident_option_rect0 : forall t t0 : pattern.base.type.type base,
                                 pattern_ident
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.arrow (pattern.base.type.type base)
                                         (@type.base (pattern.base.type.type base)
                                            t)
                                         (@type.base (pattern.base.type.type base)
                                            t0))
                                      (@type.arrow (pattern.base.type.type base)
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.base
                                               (pattern.base.type.type base)
                                               (@pattern.base.type.unit base))
                                            (@type.base
                                               (pattern.base.type.type base) t0))
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.base
                                               (pattern.base.type.type base)
                                               (@pattern.base.type.option base t))
                                            (@type.base
                                               (pattern.base.type.type base) t0))))
  | pattern_ident_nat_rect0 : forall t : pattern.base.type.type base,
                              pattern_ident
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base (pattern.base.type.type base)
                                         (@pattern.base.type.unit base))
                                      (@type.base (pattern.base.type.type base) t))
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.arrow (pattern.base.type.type base)
                                         (@type.base (pattern.base.type.type base)
                                            (@pattern.base.type.type_base base
                                               base_nat0))
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.base
                                               (pattern.base.type.type base) t)
                                            (@type.base
                                               (pattern.base.type.type base) t)))
                                      (@type.arrow (pattern.base.type.type base)
                                         (@type.base (pattern.base.type.type base)
                                            (@pattern.base.type.type_base base
                                               base_nat0))
                                         (@type.base (pattern.base.type.type base)
                                            t))))
  | pattern_ident_eager_nat_rect0 : forall t : pattern.base.type.type base,
                                    pattern_ident
                                      (@type.arrow (pattern.base.type.type base)
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.base
                                               (pattern.base.type.type base)
                                               (@pattern.base.type.unit base))
                                            (@type.base
                                               (pattern.base.type.type base) t))
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.arrow
                                               (pattern.base.type.type base)
                                               (@type.base
                                                  (pattern.base.type.type base)
                                                  (@pattern.base.type.type_base
                                                     base base_nat0))
                                               (@type.arrow
                                                  (pattern.base.type.type base)
                                                  (@type.base
                                                     (pattern.base.type.type base)
                                                     t)
                                                  (@type.base
                                                     (pattern.base.type.type base)
                                                     t)))
                                            (@type.arrow
                                               (pattern.base.type.type base)
                                               (@type.base
                                                  (pattern.base.type.type base)
                                                  (@pattern.base.type.type_base
                                                     base base_nat0))
                                               (@type.base
                                                  (pattern.base.type.type base) t))))
  | pattern_ident_nat_rect_arrow0 : forall t t0 : pattern.base.type.type base,
                                    pattern_ident
                                      (@type.arrow (pattern.base.type.type base)
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.base
                                               (pattern.base.type.type base) t)
                                            (@type.base
                                               (pattern.base.type.type base) t0))
                                         (@type.arrow (pattern.base.type.type base)
                                            (@type.arrow
                                               (pattern.base.type.type base)
                                               (@type.base
                                                  (pattern.base.type.type base)
                                                  (@pattern.base.type.type_base
                                                     base base_nat0))
                                               (@type.arrow
                                                  (pattern.base.type.type base)
                                                  (@type.arrow
                                                     (pattern.base.type.type base)
                                                     (@type.base
                                                      (pattern.base.type.type base)
                                                      t)
                                                     (@type.base
                                                      (pattern.base.type.type base)
                                                      t0))
                                                  (@type.arrow
                                                     (pattern.base.type.type base)
                                                     (@type.base
                                                      (pattern.base.type.type base)
                                                      t)
                                                     (@type.base
                                                      (pattern.base.type.type base)
                                                      t0))))
                                            (@type.arrow
                                               (pattern.base.type.type base)
                                               (@type.base
                                                  (pattern.base.type.type base)
                                                  (@pattern.base.type.type_base
                                                     base base_nat0))
                                               (@type.arrow
                                                  (pattern.base.type.type base)
                                                  (@type.base
                                                     (pattern.base.type.type base)
                                                     t)
                                                  (@type.base
                                                     (pattern.base.type.type base)
                                                     t0)))))
  | pattern_ident_eager_nat_rect_arrow0 : forall t t0 : pattern.base.type.type base,
                                          pattern_ident
                                            (@type.arrow
                                               (pattern.base.type.type base)
                                               (@type.arrow
                                                  (pattern.base.type.type base)
                                                  (@type.base
                                                     (pattern.base.type.type base)
                                                     t)
                                                  (@type.base
                                                     (pattern.base.type.type base)
                                                     t0))
                                               (@type.arrow
                                                  (pattern.base.type.type base)
                                                  (@type.arrow
                                                     (pattern.base.type.type base)
                                                     (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.type_base
                                                      base base_nat0))
                                                     (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0))
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0))))
                                                  (@type.arrow
                                                     (pattern.base.type.type base)
                                                     (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.type_base
                                                      base base_nat0))
                                                     (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)))))
  | pattern_ident_list_rect0 : forall t t0 : pattern.base.type.type base,
                               pattern_ident
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.arrow (pattern.base.type.type base)
                                       (@type.base (pattern.base.type.type base)
                                          (@pattern.base.type.unit base))
                                       (@type.base (pattern.base.type.type base) t0))
                                    (@type.arrow (pattern.base.type.type base)
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.base (pattern.base.type.type base)
                                             t)
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base)
                                                (@pattern.base.type.list base t))
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                   (pattern.base.type.type base) t0)
                                                (@type.base
                                                   (pattern.base.type.type base) t0))))
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.base (pattern.base.type.type base)
                                             (@pattern.base.type.list base t))
                                          (@type.base (pattern.base.type.type base)
                                             t0))))
  | pattern_ident_eager_list_rect0 : forall t t0 : pattern.base.type.type base,
                                     pattern_ident
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base)
                                                (@pattern.base.type.unit base))
                                             (@type.base
                                                (pattern.base.type.type base) t0))
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                   (pattern.base.type.type base) t)
                                                (@type.arrow
                                                   (pattern.base.type.type base)
                                                   (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.list base
                                                      t))
                                                   (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0))))
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                   (pattern.base.type.type base)
                                                   (@pattern.base.type.list base t))
                                                (@type.base
                                                   (pattern.base.type.type base) t0))))
  | pattern_ident_list_rect_arrow0 : forall t t0 t1 : pattern.base.type.type base,
                                     pattern_ident
                                       (@type.arrow (pattern.base.type.type base)
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base) t0)
                                             (@type.base
                                                (pattern.base.type.type base) t1))
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                   (pattern.base.type.type base) t)
                                                (@type.arrow
                                                   (pattern.base.type.type base)
                                                   (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.list base
                                                      t))
                                                   (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t1))
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t1)))))
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                   (pattern.base.type.type base)
                                                   (@pattern.base.type.list base t))
                                                (@type.arrow
                                                   (pattern.base.type.type base)
                                                   (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                   (@type.base
                                                      (pattern.base.type.type base)
                                                      t1)))))
  | pattern_ident_eager_list_rect_arrow0 : forall
                                             t t0 t1 : pattern.base.type.type base,
                                           pattern_ident
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.arrow
                                                   (pattern.base.type.type base)
                                                   (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                   (@type.base
                                                      (pattern.base.type.type base)
                                                      t1))
                                                (@type.arrow
                                                   (pattern.base.type.type base)
                                                   (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t)
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.list base
                                                      t))
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t1))
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t1)))))
                                                   (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.list base
                                                      t))
                                                      (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t0)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t1)))))
  | pattern_ident_List_nth_default0 : forall t : pattern.base.type.type base,
                                      pattern_ident
                                        (@type.arrow (pattern.base.type.type base)
                                           (@type.base
                                              (pattern.base.type.type base) t)
                                           (@type.arrow
                                              (pattern.base.type.type base)
                                              (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list base t))
                                              (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                    (pattern.base.type.type base)
                                                    (@pattern.base.type.type_base
                                                      base base_nat0))
                                                 (@type.base
                                                    (pattern.base.type.type base) t))))
  | pattern_ident_eager_List_nth_default0 : forall t : pattern.base.type.type base,
                                            pattern_ident
                                              (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                    (pattern.base.type.type base) t)
                                                 (@type.arrow
                                                    (pattern.base.type.type base)
                                                    (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.list base
                                                      t))
                                                    (@type.arrow
                                                      (pattern.base.type.type base)
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      (@pattern.base.type.type_base
                                                      base base_nat0))
                                                      (@type.base
                                                      (pattern.base.type.type base)
                                                      t)))).
(*
Definition base_interp0 : forall _ : base, Type .
admit.
Defined.
Definition all_base_and_interp0 : list (prod base Type) .
Proof.
exact (
    @cons (prod base Type) (@pair base Type base_Z Z)
      (@cons (prod base Type) (@pair base Type base_nat0 nat)
         (@cons (prod base Type) (@pair base Type base_bool0 bool)
            (@nil (prod base Type)))) ).
Defined.
Definition ident_interp0 :
    forall (t : type.type (base.type.type base)) (_ : ident t),
    @type.interp (base.type.type base) (@base.interp base base_interp0) t .
Admitted.
Definition base_beq0 : forall (_ : base) (_ : base), bool .
Admitted.
Definition reflect_base_beq0 :
    forall x y : base, Bool.reflect (@eq base x y) (base_beq0 x y) .
Admitted.
Definition baseHasNat0 : base.type.BaseTypeHasNatT base .
Admitted.
Definition baseHasNatCorrect0 :
    @base.BaseHasNatCorrectT base base_interp0 baseHasNat0 .
Admitted.
Definition base_interp_beq0 :
    forall (t1 t2 : base) (_ : base_interp0 t1) (_ : base_interp0 t2), bool .
admit.
Defined.
Definition reflect_base_interp_beq0 :
    forall (t : base) (x y : base_interp0 t),
    Bool.reflect (@eq (base_interp0 t) x y) (base_interp_beq0 t t x y) .
Admitted.
Definition try_make_base_transport_cps0 : type.try_make_transport_cpsT base .
Admitted.
Definition try_make_base_transport_cps_correct0 :
    @type.try_make_transport_cps_correctT base base_beq0
      try_make_base_transport_cps0 reflect_base_beq0 .
Admitted.
Definition all_ident_and_interp0 :
    IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.t .
Proof.
exact (
    @IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
      (ident
         (@type.base (base.type.type base)
            (@base.type.type_base base base_bool0))) bool ident_false0 false
      (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
         (forall t t0 : base.type.type base,
          ident
            (@type.arrow (base.type.type base)
               (@type.arrow (base.type.type base)
                  (@type.base (base.type.type base) t)
                  (@type.base (base.type.type base) (@base.type.list base t0)))
               (@type.arrow (base.type.type base)
                  (@type.base (base.type.type base) (@base.type.list base t))
                  (@type.base (base.type.type base) (@base.type.list base t0)))))
         (forall (A B : Type) (_ : forall _ : A, list B) (_ : list A), list B)
         ident_flat_map flat_map
         (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
            (forall t : base.type.type base,
             ident
               (@type.arrow (base.type.type base)
                  (@type.base (base.type.type base) (@base.type.list base t))
                  (@type.arrow (base.type.type base)
                     (@type.base (base.type.type base)
                        (@base.type.list base t))
                     (@type.base (base.type.type base)
                        (@base.type.list base t)))))
            (forall (A : Type) (_ : list A) (_ : list A), list A) ident_app
            app
            (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
               (forall t t0 : base.type.type base,
                ident
                  (@type.arrow (base.type.type base)
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base) t)
                        (@type.base (base.type.type base) t0))
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base)
                           (@base.type.list base t))
                        (@type.base (base.type.type base)
                           (@base.type.list base t0)))))
               (forall (A B : Type) (_ : forall _ : A, B) (_ : list A),
                list B) ident_map map
               (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                  (forall t t0 : base.type.type base,
                   ident
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base)
                           (@base.type.prod base t t0))
                        (@type.base (base.type.type base) t0)))
                  (forall (A B : Type) (_ : prod A B), B) ident_snd
                  (@snd)
                  (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                     (forall t t0 : base.type.type base,
                      ident
                        (@type.arrow (base.type.type base)
                           (@type.base (base.type.type base)
                              (@base.type.prod base t t0))
                           (@type.base (base.type.type base) t)))
                     (forall (A B : Type) (_ : prod A B), A) ident_fst
                     (@fst)
                     (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                        (ident
                           (@type.base (base.type.type base)
                              (@base.type.type_base base base_Z))) Z ident_Z0
                        Z0
                        (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                           (ident
                              (@type.arrow (base.type.type base)
                                 (@type.base (base.type.type base)
                                    (@base.type.type_base base base_Z))
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base)
                                       (@base.type.type_base base base_Z))
                                    (@type.base (base.type.type base)
                                       (@base.type.type_base base base_Z)))))
                           (forall (_ : Z) (_ : Z), Z) ident_add Z.add
                           (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                              (forall (t : base)
                                 (_ : match t return Type with
                                      | base_Z => Z
                                      | base_nat0 => nat
                                      | base_bool0 => bool
                                      end),
                               ident
                                 (@type.base (base.type.type base)
                                    (@base.type.type_base base t)))
                              (forall (T : Type) (_ : T), T) ident_literal0
                              (@ident.literal)
                              (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                 (forall t : base.type.type base,
                                  ident
                                    (@type.base (base.type.type base)
                                       (@base.type.list base t)))
                                 (forall A : Type, list A) ident_nil0
                                 (@nil)
                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                    (forall t : base.type.type base,
                                     ident
                                       (@type.arrow
                                          (base.type.type base)
                                          (@type.base (base.type.type base) t)
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.list base t))
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.list base t)))))
                                    (forall (A : Type) (_ : A) (_ : list A),
                                     list A) ident_cons0
                                    (@cons)
                                    (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                       (forall t : base.type.type base,
                                        ident
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base
                                                (base.type.type base) t)
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.option base t))))
                                       (forall (A : Type) (_ : A), option A)
                                       ident_Some0
                                       (@Some)
                                       (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                          (forall t : base.type.type base,
                                           ident
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.option base t)))
                                          (forall A : Type, option A)
                                          ident_None0
                                          (@None)
                                          (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                             (forall
                                                t t0 : base.type.type base,
                                              ident
                                                (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.prod base t t0)))))
                                             (forall
                                                (A B : Type)
                                                (_ : A)
                                                (_ : B),
                                              prod A B) ident_pair0
                                             (@pair)
                                             (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                (ident
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base)))
                                                unit ident_tt0 tt
                                                (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.prod base t t0))
                                                 (@type.base
                                                 (base.type.type base) t1))))
                                                 (forall
                                                 (A B P : Type)
                                                 (_ :
                                                 forall (_ : A) (_ : B), P)
                                                 (_ : prod A B), P)
                                                 ident_prod_rect_nodep0
                                                 (@Prod.prod_rect_nodep)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_bool0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ : forall _ : unit, P)
                                                 (_ : bool), P)
                                                 ident_bool_rect0
                                                 Bool.Thunked.bool_rect
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : A) (_ : list A),
                                                 P) (_ : list A), P)
                                                 ident_list_case0
                                                 (@Thunked.list_case)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.option base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : A, P)
                                                 (_ : forall _ : unit, P)
                                                 (_ : option A), P)
                                                 ident_option_rect0
                                                 (@Option.Thunked.option_rect)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : nat) (_ : P), P)
                                                 (_ : nat), P)
                                                 ident_nat_rect0
                                                 NatUtil.Thunked.nat_rect
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : nat) (_ : P), P)
                                                 (_ : nat), P)
                                                 ident_eager_nat_rect0
                                                 (@ident.eagerly
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : nat) (_ : P), P)
                                                 (_ : nat), P)
                                                 NatUtil.Thunked.nat_rect)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))))
                                                 (forall
                                                 (P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : nat)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : nat)
                                                 (_ : P), Q)
                                                 ident_nat_rect_arrow0
                                                 (@NatUtil.nat_rect_arrow_nodep)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))))
                                                 (forall
                                                 (P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : nat)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : nat)
                                                 (_ : P), Q)
                                                 ident_eager_nat_rect_arrow0
                                                 (@ident.eagerly
                                                 (forall
                                                 (P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : nat)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : nat)
                                                 (_ : P), Q)
                                                 (@NatUtil.nat_rect_arrow_nodep))
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : P), P)
                                                 (_ : list A), P)
                                                 ident_list_rect0
                                                 (@Thunked.list_rect)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : P), P)
                                                 (_ : list A), P)
                                                 ident_eager_list_rect0
                                                 (@ident.eagerly
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : P), P)
                                                 (_ : list A), P)
                                                 (@Thunked.list_rect))
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1)))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))))))
                                                 (forall
                                                 (A P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : list A)
                                                 (_ : P), Q)
                                                 ident_list_rect_arrow0
                                                 (@list_rect_arrow_nodep)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1)))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))))))
                                                 (forall
                                                 (A P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : list A)
                                                 (_ : P), Q)
                                                 ident_eager_list_rect_arrow0
                                                 (@ident.eagerly
                                                 (forall
                                                 (A P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : list A)
                                                 (_ : P), Q)
                                                 (@list_rect_arrow_nodep))
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (A : Type)
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : nat), A)
                                                 ident_List_nth_default0
                                                 nth_default
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (A : Type)
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : nat), A)
                                                 ident_eager_List_nth_default0
                                                 (@ident.eagerly
                                                 (forall
                                                 (A : Type)
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : nat), A) nth_default)
                                                 IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.nil))))))))))))))))))))))))))))
    ).
Defined.
Definition buildEagerIdent0 : @ident.BuildEagerIdentT base ident baseHasNat0 .
Admitted.
Definition buildInterpEagerIdentCorrect0 :
    @ident.BuildInterpEagerIdentCorrectT base base_interp0 ident
      ident_interp0 baseHasNat0 buildEagerIdent0 baseHasNatCorrect0 .
Admitted.
Definition toRestrictedIdent0 :
    @ident.ToRestrictedIdentT base ident baseHasNat0 .
Admitted.
Definition toFromRestrictedIdent0 :
    @ident.ToFromRestrictedIdentT base ident baseHasNat0 buildEagerIdent0
      toRestrictedIdent0 .
Admitted.
Definition buildIdent0 : @ident.BuildIdentT base base_interp0 ident .
Admitted.
Definition buildInterpIdentCorrect0 :
    @ident.BuildInterpIdentCorrectT base base_interp0 ident buildIdent0
      ident_interp0 .
Admitted.
Definition ident_is_var_like0 :
    forall (t : type.type (base.type.type base)) (_ : ident t), bool .
Admitted.
Definition ident_interp_Proper0 :
    forall t : type.type (base.type.type base),
    @Morphisms.Proper
      (forall _ : ident t,
       @type.interp (base.type.type base) (@base.interp base base_interp0) t)
      (@Morphisms.respectful (ident t)
         (@type.interp (base.type.type base) (@base.interp base base_interp0)
            t) (@eq (ident t))
         (@type.related (base.type.type base)
            (@base.interp base base_interp0)
            (fun t0 : base.type.type base =>
             @eq (@base.interp base base_interp0 t0)) t))
      (ident_interp0 t) .
Admitted.
Definition invertIdent0 : @invert_expr.InvertIdentT base base_interp0 ident .
Admitted.
Definition buildInvertIdentCorrect0 :
    @invert_expr.BuildInvertIdentCorrectT base base_interp0 ident
      invertIdent0 buildIdent0 .
Admitted.
Definition base_default0 : @DefaultValue.type.base.DefaultT base base_interp0 .
Admitted.
Definition all_base2 : list base .
Admitted.
Definition all_idents2 :
    list (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T)) .
Admitted.
Definition ident_index1 :
    forall (t : type.type (base.type.type base)) (_ : ident t), nat .
Admitted.
Definition eta_ident_cps_gen2 :
    forall
      (T : forall (t : type.type (base.type.type base)) (_ : ident t), Type)
      (f : forall (t : type.type (base.type.type base)) (idc : ident t),
           T t idc),
    @sig
      (forall (t : type.type (base.type.type base)) (idc : ident t), T t idc)
      (fun
         f' : forall (t : type.type (base.type.type base)) (idc : ident t),
              T t idc =>
       forall (t : type.type (base.type.type base)) (idc : ident t),
       @eq (T t idc) (f' t idc) (f t idc)) .
Admitted.
Definition eta_ident_cps_gen_expand_literal1 :
    forall
      (T : forall (t : type.type (base.type.type base)) (_ : ident t), Type)
      (f : forall (t : type.type (base.type.type base)) (idc : ident t),
           T t idc),
    @sig
      (forall (t : type.type (base.type.type base)) (idc : ident t), T t idc)
      (fun
         f' : forall (t : type.type (base.type.type base)) (idc : ident t),
              T t idc =>
       forall (t : type.type (base.type.type base)) (idc : ident t),
       @eq (T t idc) (f' t idc) (f t idc)) .
Admitted.
Definition eta_ident_cps0 :
    forall (T : forall _ : type.type (base.type.type base), Type)
      (t : type.type (base.type.type base)) (_ : ident t)
      (_ : forall (t0 : type.type (base.type.type base)) (_ : ident t0), T t0),
    T t .
Admitted.
Definition simple_idents0 :
    list
      (@PrimitiveSigma.Primitive.sigT (type.type (base.type.type base)) ident) .
Admitted.
Definition all_raw_idents0 : list raw_ident .
Admitted.
Definition ident_index2 : forall _ : raw_ident, nat .
Admitted.
Definition raw_ident_index_idempotent0 :
    forall idc : raw_ident,
    @eq (option raw_ident)
      (@nth_error raw_ident all_raw_idents0 (ident_index2 idc))
      (@Some raw_ident idc) .
Admitted.
Definition eta_ident_cps_gen3 :
    forall (T : forall _ : raw_ident, Type)
      (f : forall idc : raw_ident, T idc),
    @sig (forall idc : raw_ident, T idc)
      (fun f' : forall idc : raw_ident, T idc =>
       forall idc : raw_ident, @eq (T idc) (f' idc) (f idc)) .
Proof.
exact (
    fun (T : forall _ : raw_ident, Type) (f : forall idc : raw_ident, T idc)
    =>
    @exist (forall idc : raw_ident, T idc)
      (fun f' : forall idc : raw_ident, T idc =>
       forall idc : raw_ident, @eq (T idc) (f' idc) (f idc))
      (fun idc : raw_ident =>
       match idc as r return (T r) with
       | raw_ident_false0 => f raw_ident_false0
       | raw_ident_flat_map => f raw_ident_flat_map
       | raw_ident_app => f raw_ident_app
       | raw_ident_map => f raw_ident_map
       | raw_ident_snd => f raw_ident_snd
       | raw_ident_fst => f raw_ident_fst
       | raw_ident_Z0 => f raw_ident_Z0
       | raw_ident_add => f raw_ident_add
       | raw_ident_literal0 => f raw_ident_literal0
       | raw_ident_nil0 => f raw_ident_nil0
       | raw_ident_cons0 => f raw_ident_cons0
       | raw_ident_Some0 => f raw_ident_Some0
       | raw_ident_None0 => f raw_ident_None0
       | raw_ident_pair0 => f raw_ident_pair0
       | raw_ident_tt0 => f raw_ident_tt0
       | raw_ident_prod_rect_nodep0 => f raw_ident_prod_rect_nodep0
       | raw_ident_bool_rect0 => f raw_ident_bool_rect0
       | raw_ident_list_case0 => f raw_ident_list_case0
       | raw_ident_option_rect0 => f raw_ident_option_rect0
       | raw_ident_nat_rect0 => f raw_ident_nat_rect0
       | raw_ident_eager_nat_rect0 => f raw_ident_eager_nat_rect0
       | raw_ident_nat_rect_arrow0 => f raw_ident_nat_rect_arrow0
       | raw_ident_eager_nat_rect_arrow0 => f raw_ident_eager_nat_rect_arrow0
       | raw_ident_list_rect0 => f raw_ident_list_rect0
       | raw_ident_eager_list_rect0 => f raw_ident_eager_list_rect0
       | raw_ident_list_rect_arrow0 => f raw_ident_list_rect_arrow0
       | raw_ident_eager_list_rect_arrow0 =>
           f raw_ident_eager_list_rect_arrow0
       | raw_ident_List_nth_default0 => f raw_ident_List_nth_default0
       | raw_ident_eager_List_nth_default0 =>
           f raw_ident_eager_List_nth_default0
       end)
      (fun idc : raw_ident =>
       match
         idc as r
         return
           (@eq (T r)
              match r as r0 return (T r0) with
              | raw_ident_false0 => f raw_ident_false0
              | raw_ident_flat_map => f raw_ident_flat_map
              | raw_ident_app => f raw_ident_app
              | raw_ident_map => f raw_ident_map
              | raw_ident_snd => f raw_ident_snd
              | raw_ident_fst => f raw_ident_fst
              | raw_ident_Z0 => f raw_ident_Z0
              | raw_ident_add => f raw_ident_add
              | raw_ident_literal0 => f raw_ident_literal0
              | raw_ident_nil0 => f raw_ident_nil0
              | raw_ident_cons0 => f raw_ident_cons0
              | raw_ident_Some0 => f raw_ident_Some0
              | raw_ident_None0 => f raw_ident_None0
              | raw_ident_pair0 => f raw_ident_pair0
              | raw_ident_tt0 => f raw_ident_tt0
              | raw_ident_prod_rect_nodep0 => f raw_ident_prod_rect_nodep0
              | raw_ident_bool_rect0 => f raw_ident_bool_rect0
              | raw_ident_list_case0 => f raw_ident_list_case0
              | raw_ident_option_rect0 => f raw_ident_option_rect0
              | raw_ident_nat_rect0 => f raw_ident_nat_rect0
              | raw_ident_eager_nat_rect0 => f raw_ident_eager_nat_rect0
              | raw_ident_nat_rect_arrow0 => f raw_ident_nat_rect_arrow0
              | raw_ident_eager_nat_rect_arrow0 =>
                  f raw_ident_eager_nat_rect_arrow0
              | raw_ident_list_rect0 => f raw_ident_list_rect0
              | raw_ident_eager_list_rect0 => f raw_ident_eager_list_rect0
              | raw_ident_list_rect_arrow0 => f raw_ident_list_rect_arrow0
              | raw_ident_eager_list_rect_arrow0 =>
                  f raw_ident_eager_list_rect_arrow0
              | raw_ident_List_nth_default0 => f raw_ident_List_nth_default0
              | raw_ident_eager_List_nth_default0 =>
                  f raw_ident_eager_List_nth_default0
              end (f r))
       with
       | raw_ident_false0 =>
           @eq_refl (T raw_ident_false0) (f raw_ident_false0)
       | raw_ident_flat_map =>
           @eq_refl (T raw_ident_flat_map) (f raw_ident_flat_map)
       | raw_ident_app => @eq_refl (T raw_ident_app) (f raw_ident_app)
       | raw_ident_map => @eq_refl (T raw_ident_map) (f raw_ident_map)
       | raw_ident_snd => @eq_refl (T raw_ident_snd) (f raw_ident_snd)
       | raw_ident_fst => @eq_refl (T raw_ident_fst) (f raw_ident_fst)
       | raw_ident_Z0 => @eq_refl (T raw_ident_Z0) (f raw_ident_Z0)
       | raw_ident_add => @eq_refl (T raw_ident_add) (f raw_ident_add)
       | raw_ident_literal0 =>
           @eq_refl (T raw_ident_literal0) (f raw_ident_literal0)
       | raw_ident_nil0 => @eq_refl (T raw_ident_nil0) (f raw_ident_nil0)
       | raw_ident_cons0 => @eq_refl (T raw_ident_cons0) (f raw_ident_cons0)
       | raw_ident_Some0 => @eq_refl (T raw_ident_Some0) (f raw_ident_Some0)
       | raw_ident_None0 => @eq_refl (T raw_ident_None0) (f raw_ident_None0)
       | raw_ident_pair0 => @eq_refl (T raw_ident_pair0) (f raw_ident_pair0)
       | raw_ident_tt0 => @eq_refl (T raw_ident_tt0) (f raw_ident_tt0)
       | raw_ident_prod_rect_nodep0 =>
           @eq_refl (T raw_ident_prod_rect_nodep0)
             (f raw_ident_prod_rect_nodep0)
       | raw_ident_bool_rect0 =>
           @eq_refl (T raw_ident_bool_rect0) (f raw_ident_bool_rect0)
       | raw_ident_list_case0 =>
           @eq_refl (T raw_ident_list_case0) (f raw_ident_list_case0)
       | raw_ident_option_rect0 =>
           @eq_refl (T raw_ident_option_rect0) (f raw_ident_option_rect0)
       | raw_ident_nat_rect0 =>
           @eq_refl (T raw_ident_nat_rect0) (f raw_ident_nat_rect0)
       | raw_ident_eager_nat_rect0 =>
           @eq_refl (T raw_ident_eager_nat_rect0)
             (f raw_ident_eager_nat_rect0)
       | raw_ident_nat_rect_arrow0 =>
           @eq_refl (T raw_ident_nat_rect_arrow0)
             (f raw_ident_nat_rect_arrow0)
       | raw_ident_eager_nat_rect_arrow0 =>
           @eq_refl (T raw_ident_eager_nat_rect_arrow0)
             (f raw_ident_eager_nat_rect_arrow0)
       | raw_ident_list_rect0 =>
           @eq_refl (T raw_ident_list_rect0) (f raw_ident_list_rect0)
       | raw_ident_eager_list_rect0 =>
           @eq_refl (T raw_ident_eager_list_rect0)
             (f raw_ident_eager_list_rect0)
       | raw_ident_list_rect_arrow0 =>
           @eq_refl (T raw_ident_list_rect_arrow0)
             (f raw_ident_list_rect_arrow0)
       | raw_ident_eager_list_rect_arrow0 =>
           @eq_refl (T raw_ident_eager_list_rect_arrow0)
             (f raw_ident_eager_list_rect_arrow0)
       | raw_ident_List_nth_default0 =>
           @eq_refl (T raw_ident_List_nth_default0)
             (f raw_ident_List_nth_default0)
       | raw_ident_eager_List_nth_default0 =>
           @eq_refl (T raw_ident_eager_List_nth_default0)
             (f raw_ident_eager_List_nth_default0)
       end) ).
Defined.
Definition raw_ident_infos_of0 :
    forall _ : raw_ident,
    @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_infos base ident .
Admitted.
Definition split_raw_ident_gen0 :
    forall (t : type.type (base.type.type base)) (idc : ident t),
    @PrimitiveSigma.Primitive.sigT raw_ident
      (fun ridc : raw_ident =>
       @sig
         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args base
            ident
            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
               (raw_ident_infos_of0 ridc)))
         (fun
            args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                     base ident
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc)) =>
          @sig
            (@eq (type.type (base.type.type base))
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _ _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _ (raw_ident_infos_of0 ridc))
                  (@PrimitiveSigma.Primitive.projT1 _ _ args)
                  (@fst
                     (@fold_right Type Type (fun A B : Type => prod A B) unit
                        (@map
                           IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                           Type
                           (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                              base)
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                              _ _
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _ (raw_ident_infos_of0 ridc)))))
                     (@fold_right Type Type (fun A B : Type => prod A B) unit
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc))
                           (@PrimitiveSigma.Primitive.projT1 _ _ args)))
                     (@PrimitiveSigma.Primitive.projT2 _ _ args))) t)
            (fun
               pf : @eq (type.type (base.type.type base))
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 ridc))
                         (@PrimitiveSigma.Primitive.projT1 _ _ args)
                         (@fst
                            (@fold_right Type Type
                               (fun A B : Type => prod A B) unit
                               (@map
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                  Type
                                  (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                     base)
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                     _ _
                                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                        _ _ (raw_ident_infos_of0 ridc)))))
                            (@fold_right Type Type
                               (fun A B : Type => prod A B) unit
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _ (raw_ident_infos_of0 ridc))
                                  (@PrimitiveSigma.Primitive.projT1 _ _ args)))
                            (@PrimitiveSigma.Primitive.projT2 _ _ args))) t
             =>
             @eq (ident t) idc
               (@eq_rect (type.type (base.type.type base))
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _
                     _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc))
                     (@PrimitiveSigma.Primitive.projT1 _ _ args)
                     (@fst
                        (@fold_right Type Type (fun A B : Type => prod A B)
                           unit
                           (@map
                              IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                              Type
                              (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                 base)
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                 _ _
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                    _ _ (raw_ident_infos_of0 ridc)))))
                        (@fold_right Type Type (fun A B : Type => prod A B)
                           unit
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                              _ _
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _ (raw_ident_infos_of0 ridc))
                              (@PrimitiveSigma.Primitive.projT1 _ _ args)))
                        (@PrimitiveSigma.Primitive.projT2 _ _ args))) ident
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                     base ident
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc)) args) t pf)))) .
Admitted.
Definition raw_invert_bind_args0 :
    forall (t : type.type (base.type.type base)) (_ : ident t)
      (pidc : raw_ident),
    option
      match pidc return Type with
      | raw_ident_false0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_false0
      | raw_ident_flat_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_flat_map
      | raw_ident_app =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_app
      | raw_ident_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_map
      | raw_ident_snd =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_snd
      | raw_ident_fst =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_fst
      | raw_ident_Z0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Z0
      | raw_ident_add =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_add
      | raw_ident_literal0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_literal0
      | raw_ident_nil0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nil0
      | raw_ident_cons0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_cons0
      | raw_ident_Some0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Some0
      | raw_ident_None0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_None0
      | raw_ident_pair0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_pair0
      | raw_ident_tt0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_tt0
      | raw_ident_prod_rect_nodep0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_prod_rect_nodep0
      | raw_ident_bool_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_bool_rect0
      | raw_ident_list_case0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_case0
      | raw_ident_option_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_option_rect0
      | raw_ident_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect0
      | raw_ident_eager_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_nat_rect0
      | raw_ident_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect_arrow0
      | raw_ident_eager_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_nat_rect_arrow0
      | raw_ident_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect0
      | raw_ident_eager_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_list_rect0
      | raw_ident_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect_arrow0
      | raw_ident_eager_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_list_rect_arrow0
      | raw_ident_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_List_nth_default0
      | raw_ident_eager_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_List_nth_default0
      end .
Admitted.
Definition invert_bind_args_unknown0 :
    forall (t : type.type (base.type.type base)) (_ : ident t)
      (pidc : raw_ident),
    option
      match pidc return Type with
      | raw_ident_false0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_false0
      | raw_ident_flat_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_flat_map
      | raw_ident_app =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_app
      | raw_ident_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_map
      | raw_ident_snd =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_snd
      | raw_ident_fst =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_fst
      | raw_ident_Z0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Z0
      | raw_ident_add =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_add
      | raw_ident_literal0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_literal0
      | raw_ident_nil0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nil0
      | raw_ident_cons0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_cons0
      | raw_ident_Some0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Some0
      | raw_ident_None0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_None0
      | raw_ident_pair0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_pair0
      | raw_ident_tt0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_tt0
      | raw_ident_prod_rect_nodep0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_prod_rect_nodep0
      | raw_ident_bool_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_bool_rect0
      | raw_ident_list_case0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_case0
      | raw_ident_option_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_option_rect0
      | raw_ident_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect0
      | raw_ident_eager_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_nat_rect0
      | raw_ident_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect_arrow0
      | raw_ident_eager_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_nat_rect_arrow0
      | raw_ident_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect0
      | raw_ident_eager_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_list_rect0
      | raw_ident_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect_arrow0
      | raw_ident_eager_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_list_rect_arrow0
      | raw_ident_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_List_nth_default0
      | raw_ident_eager_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_List_nth_default0
      end .
Admitted.
Definition all_pattern_idents0 :
    list (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T)) .
Admitted.
Definition eta_ident_cps_gen4 :
    forall
      (T : forall (t : type.type (pattern.base.type.type base))
             (_ : pattern_ident t), Type)
      (f : forall (t : type.type (pattern.base.type.type base))
             (idc : pattern_ident t), T t idc),
    @sig
      (forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), T t idc)
      (fun
         f' : forall (t : type.type (pattern.base.type.type base))
                (idc : pattern_ident t), T t idc =>
       forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), @eq (T t idc) (f' t idc) (f t idc)) .
Admitted.
Definition eta_ident_cps_gen_expand_literal2 :
    forall
      (T : forall (t : type.type (pattern.base.type.type base))
             (_ : pattern_ident t), Type)
      (f : forall (t : type.type (pattern.base.type.type base))
             (idc : pattern_ident t), T t idc),
    @sig
      (forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), T t idc)
      (fun
         f' : forall (t : type.type (pattern.base.type.type base))
                (idc : pattern_ident t), T t idc =>
       forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), @eq (T t idc) (f' t idc) (f t idc)) .
Admitted.
Definition split_types0 :
    forall (t : type.type (pattern.base.type.type base))
      (_ : pattern_ident t),
    @PrimitiveSigma.Primitive.sigT raw_ident
      (fun ridc : raw_ident =>
       prod
         (@fold_right Type Type (fun A B : Type => prod A B) unit
            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
                  (raw_ident_infos_of0 ridc))))
         (@fold_right Type Type (fun A B : Type => prod A B) unit
            (@map IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
               Type
               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                  base)
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types _
                  _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _ (raw_ident_infos_of0 ridc)))))) .
Admitted.
Definition add_types_from_raw_sig0 :
    forall (ridc : raw_ident)
      (dt : @fold_right Type Type (fun A B : Type => prod A B) unit
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 ridc))))
      (idt : @fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc))))),
    @PrimitiveSigma.Primitive.sigT (type.type (pattern.base.type.type base))
      (fun t : type.type (pattern.base.type.type base) =>
       @sig (pattern_ident t)
         (fun idc : pattern_ident t =>
          @eq
            (@PrimitiveSigma.Primitive.sigT raw_ident
               (fun ridc0 : raw_ident =>
                prod
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _ (raw_ident_infos_of0 ridc0))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc0)))))))
            (split_types0 t idc)
            (@PrimitiveSigma.Primitive.existT raw_ident
               (fun ridc0 : raw_ident =>
                prod
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _ (raw_ident_infos_of0 ridc0))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc0)))))) ridc
               (@pair
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _ (raw_ident_infos_of0 ridc))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc))))) dt idt)))).
Admitted.
Definition to_type_split_types_subst_default_eq0 :
    forall (t : type.type (pattern.base.type.type base))
      (idc : pattern_ident t)
      (evm : FMapPositive.PositiveMap.t (base.type.type base)),
    @eq (type.type (base.type.type base))
      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _ _
         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
            (raw_ident_infos_of0
               (@PrimitiveSigma.Primitive.projT1 _ _
                  (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                     base ident raw_ident raw_ident_infos_of0 pattern_ident
                     split_types0 t idc evm))))
         (@fst
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _
                     (raw_ident_infos_of0
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                              base ident raw_ident raw_ident_infos_of0
                              pattern_ident split_types0 t idc evm))))))
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _
                        (raw_ident_infos_of0
                           (@PrimitiveSigma.Primitive.projT1 _ _
                              (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                 base ident raw_ident raw_ident_infos_of0
                                 pattern_ident split_types0 t idc evm)))))))
            (@PrimitiveSigma.Primitive.projT2 _ _
               (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                  base ident raw_ident raw_ident_infos_of0 pattern_ident
                  split_types0 t idc evm)))
         (@snd
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _
                     (raw_ident_infos_of0
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                              base ident raw_ident raw_ident_infos_of0
                              pattern_ident split_types0 t idc evm))))))
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _
                        (raw_ident_infos_of0
                           (@PrimitiveSigma.Primitive.projT1 _ _
                              (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                 base ident raw_ident raw_ident_infos_of0
                                 pattern_ident split_types0 t idc evm)))))))
            (@PrimitiveSigma.Primitive.projT2 _ _
               (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                  base ident raw_ident raw_ident_infos_of0 pattern_ident
                  split_types0 t idc evm))))
      (@IdentifiersLibrary.Compilers.pattern.type.subst_default base t evm).
Admitted.
Definition projT1_add_types_from_raw_sig_eq0 :
    forall (t : type.type (base.type.type base)) (idc : ident t),
    @eq (type.type (pattern.base.type.type base))
      (@PrimitiveSigma.Primitive.projT1 _ _
         (add_types_from_raw_sig0
            (@PrimitiveSigma.Primitive.projT1 _ _
               (split_raw_ident_gen0 t idc))
            (@PrimitiveSigma.Primitive.projT1 _ _
               (@proj1_sig
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                     base ident
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _
                        (raw_ident_infos_of0
                           (@PrimitiveSigma.Primitive.projT1 _ _
                              (split_raw_ident_gen0 t idc)))))
                  (fun
                     args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                              base ident
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _
                                 (raw_ident_infos_of0
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       (split_raw_ident_gen0 t idc)))) =>
                   @sig
                     (@eq (type.type (base.type.type base))
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _
                              (raw_ident_infos_of0
                                 (@PrimitiveSigma.Primitive.projT1 _ _
                                    (split_raw_ident_gen0 t idc))))
                           (@PrimitiveSigma.Primitive.projT1 _ _ args)
                           (@fst
                              (@fold_right Type Type
                                 (fun A B : Type => prod A B) unit
                                 (@map
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                    Type
                                    (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                       base)
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t idc)))))))
                              (@fold_right Type Type
                                 (fun A B : Type => prod A B) unit
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                    _ _
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       args)))
                              (@PrimitiveSigma.Primitive.projT2 _ _ args))) t)
                     (fun
                        pf : @eq (type.type (base.type.type base))
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _
                                     (raw_ident_infos_of0
                                        (@PrimitiveSigma.Primitive.projT1 _ _
                                           (split_raw_ident_gen0 t idc))))
                                  (@PrimitiveSigma.Primitive.projT1 _ _ args)
                                  (@fst
                                     (@fold_right Type Type
                                        (fun A B : Type => prod A B) unit
                                        (@map
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                           Type
                                           (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                              base)
                                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                              _ _
                                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                     (@fold_right Type Type
                                        (fun A B : Type => prod A B) unit
                                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                           _ _
                                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                              _ _
                                              (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                           (@PrimitiveSigma.Primitive.projT1
                                              _ _ args)))
                                     (@PrimitiveSigma.Primitive.projT2 _ _
                                        args))) t =>
                      @eq (ident t) idc
                        (@eq_rect (type.type (base.type.type base))
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                              _ _
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _
                                 (raw_ident_infos_of0
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       (split_raw_ident_gen0 t idc))))
                              (@PrimitiveSigma.Primitive.projT1 _ _ args)
                              (@fst
                                 (@fold_right Type Type
                                    (fun A B : Type => prod A B) unit
                                    (@map
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                       Type
                                       (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                          base)
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                          _ _
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                 (@fold_right Type Type
                                    (fun A B : Type => prod A B) unit
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t idc))))
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          args)))
                                 (@PrimitiveSigma.Primitive.projT2 _ _ args)))
                           ident
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                              base ident
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _
                                 (raw_ident_infos_of0
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       (split_raw_ident_gen0 t idc)))) args)
                           t pf)))
                  (@PrimitiveSigma.Primitive.projT2 _ _
                     (split_raw_ident_gen0 t idc))))
            (@IdentifiersLibrary.Compilers.lift_type_of_list_map
               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types _
                  _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _
                     (raw_ident_infos_of0
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (split_raw_ident_gen0 t idc)))))
               (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                  base)
               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                  base)
               (@IdentifiersLibrary.Compilers.pattern.ident.relax_kind_of_type
                  base)
               (@fst
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _
                              (raw_ident_infos_of0
                                 (@PrimitiveSigma.Primitive.projT1 _ _
                                    (split_raw_ident_gen0 t idc)))))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _
                           (raw_ident_infos_of0
                              (@PrimitiveSigma.Primitive.projT1 _ _
                                 (split_raw_ident_gen0 t idc))))
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (@proj1_sig
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                 base ident
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                    _ _
                                    (raw_ident_infos_of0
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          (split_raw_ident_gen0 t idc)))))
                              (fun
                                 args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                          base ident
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                               =>
                               @sig
                                 (@eq (type.type (base.type.type base))
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t idc))))
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          args)
                                       (@fst
                                          (@fold_right Type Type
                                             (fun A B : Type => prod A B)
                                             unit
                                             (@map
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                Type
                                                (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                          (@fold_right Type Type
                                             (fun A B : Type => prod A B)
                                             unit
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                _ _
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                          (@PrimitiveSigma.Primitive.projT2 _
                                             _ args))) t)
                                 (fun
                                    pf : @eq
                                           (type.type (base.type.type base))
                                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                              _ _
                                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                              (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)
                                              (@fst
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                                 (@PrimitiveSigma.Primitive.projT2
                                                 _ _ args))) t =>
                                  @eq (ident t) idc
                                    (@eq_rect
                                       (type.type (base.type.type base))
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                          _ _
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ args)
                                          (@fst
                                             (@fold_right Type Type
                                                (fun A B : Type => prod A B)
                                                unit
                                                (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                             (@fold_right Type Type
                                                (fun A B : Type => prod A B)
                                                unit
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                             (@PrimitiveSigma.Primitive.projT2
                                                _ _ args))) ident
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                          base ident
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                          args) t pf)))
                              (@PrimitiveSigma.Primitive.projT2 _ _
                                 (split_raw_ident_gen0 t idc))))))
                  (@PrimitiveSigma.Primitive.projT2 _ _
                     (@proj1_sig
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                           base ident
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _
                              (raw_ident_infos_of0
                                 (@PrimitiveSigma.Primitive.projT1 _ _
                                    (split_raw_ident_gen0 t idc)))))
                        (fun
                           args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                    base ident
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                         =>
                         @sig
                           (@eq (type.type (base.type.type base))
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                 _ _
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                    _ _
                                    (raw_ident_infos_of0
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          (split_raw_ident_gen0 t idc))))
                                 (@PrimitiveSigma.Primitive.projT1 _ _ args)
                                 (@fst
                                    (@fold_right Type Type
                                       (fun A B : Type => prod A B) unit
                                       (@map
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                          Type
                                          (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                             base)
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                             _ _
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                _ _
                                                (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                    (@fold_right Type Type
                                       (fun A B : Type => prod A B) unit
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                          _ _
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ args)))
                                    (@PrimitiveSigma.Primitive.projT2 _ _
                                       args))) t)
                           (fun
                              pf : @eq (type.type (base.type.type base))
                                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                        _ _
                                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                           _ _
                                           (raw_ident_infos_of0
                                              (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                        (@PrimitiveSigma.Primitive.projT1 _ _
                                           args)
                                        (@fst
                                           (@fold_right Type Type
                                              (fun A B : Type => prod A B)
                                              unit
                                              (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                           (@fold_right Type Type
                                              (fun A B : Type => prod A B)
                                              unit
                                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                           (@PrimitiveSigma.Primitive.projT2
                                              _ _ args))) t =>
                            @eq (ident t) idc
                              (@eq_rect (type.type (base.type.type base))
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                    _ _
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       args)
                                    (@fst
                                       (@fold_right Type Type
                                          (fun A B : Type => prod A B) unit
                                          (@map
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                             Type
                                             (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                base)
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                _ _
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                       (@fold_right Type Type
                                          (fun A B : Type => prod A B) unit
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                             _ _
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                _ _
                                                (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _ args)))
                                       (@PrimitiveSigma.Primitive.projT2 _ _
                                          args))) ident
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                    base ident
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                                    args) t pf)))
                        (@PrimitiveSigma.Primitive.projT2 _ _
                           (split_raw_ident_gen0 t idc))))))))
      (@IdentifiersLibrary.Compilers.pattern.type.relax base t).
Admitted.*)
Definition base_interp0 : forall _ : base, Type .
exact (    fun ty : base =>
    match ty return Type with
    | base_Z => Z
    | base_nat0 => nat
    | base_bool0 => bool
    end).
Defined.
Definition all_base_and_interp0 : list (prod base Type) .
Proof.
exact (
    @cons (prod base Type) (@pair base Type base_Z Z)
      (@cons (prod base Type) (@pair base Type base_nat0 nat)
         (@cons (prod base Type) (@pair base Type base_bool0 bool)
            (@nil (prod base Type)))) ).
Defined.
Definition ident_interp0 :
    forall (t : type.type (base.type.type base)) (_ : ident t),
    @type.interp (base.type.type base) (@base.interp base base_interp0) t .
Admitted.
Definition base_beq0 : forall (_ : base) (_ : base), bool .
Admitted.
Definition reflect_base_beq0 :
    forall x y : base, Bool.reflect (@eq base x y) (base_beq0 x y) .
Admitted.
Definition baseHasNat0 : base.type.BaseTypeHasNatT base .
Admitted.
Definition baseHasNatCorrect0 :
    @base.BaseHasNatCorrectT base base_interp0 baseHasNat0 .
Admitted.
Definition base_interp_beq0 :
    forall (t1 t2 : base) (_ : base_interp0 t1) (_ : base_interp0 t2), bool .
exact (    fun t1 t2 : base =>
    match
      t1 as b
      return (forall (_ : base_interp0 b) (_ : base_interp0 t2), bool)
    with
    | base_Z =>
        match
          t2 as b
          return
            (forall (_ : base_interp0 base_Z) (_ : base_interp0 b), bool)
        with
        | base_Z => Z.eqb
        | base_nat0 => fun (_ : Z) (_ : nat) => false
        | base_bool0 => fun (_ : Z) (_ : bool) => false
        end
    | base_nat0 =>
        match
          t2 as b
          return
            (forall (_ : base_interp0 base_nat0) (_ : base_interp0 b), bool)
        with
        | base_Z => fun (_ : nat) (_ : Z) => false
        | base_nat0 => Nat.eqb
        | base_bool0 => fun (_ : nat) (_ : bool) => false
        end
    | base_bool0 =>
        match
          t2 as b
          return
            (forall (_ : base_interp0 base_bool0) (_ : base_interp0 b), bool)
        with
        | base_Z => fun (_ : bool) (_ : Z) => false
        | base_nat0 => fun (_ : bool) (_ : nat) => false
        | base_bool0 => Bool.eqb
        end
    end).
Defined.
Definition reflect_base_interp_beq0 :
    forall (t : base) (x y : base_interp0 t),
    Bool.reflect (@eq (base_interp0 t) x y) (base_interp_beq0 t t x y) .
Admitted.
Definition try_make_base_transport_cps0 : type.try_make_transport_cpsT base .
Admitted.
Definition try_make_base_transport_cps_correct0 :
    @type.try_make_transport_cps_correctT base base_beq0
      try_make_base_transport_cps0 reflect_base_beq0 .
Admitted.
Definition all_ident_and_interp0 :
    IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.t .
Proof.
exact (
    @IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
      (ident
         (@type.base (base.type.type base)
            (@base.type.type_base base base_bool0))) bool ident_false0 false
      (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
         (forall t t0 : base.type.type base,
          ident
            (@type.arrow (base.type.type base)
               (@type.arrow (base.type.type base)
                  (@type.base (base.type.type base) t)
                  (@type.base (base.type.type base) (@base.type.list base t0)))
               (@type.arrow (base.type.type base)
                  (@type.base (base.type.type base) (@base.type.list base t))
                  (@type.base (base.type.type base) (@base.type.list base t0)))))
         (forall (A B : Type) (_ : forall _ : A, list B) (_ : list A), list B)
         ident_flat_map flat_map
         (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
            (forall t : base.type.type base,
             ident
               (@type.arrow (base.type.type base)
                  (@type.base (base.type.type base) (@base.type.list base t))
                  (@type.arrow (base.type.type base)
                     (@type.base (base.type.type base)
                        (@base.type.list base t))
                     (@type.base (base.type.type base)
                        (@base.type.list base t)))))
            (forall (A : Type) (_ : list A) (_ : list A), list A) ident_app
            app
            (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
               (forall t t0 : base.type.type base,
                ident
                  (@type.arrow (base.type.type base)
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base) t)
                        (@type.base (base.type.type base) t0))
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base)
                           (@base.type.list base t))
                        (@type.base (base.type.type base)
                           (@base.type.list base t0)))))
               (forall (A B : Type) (_ : forall _ : A, B) (_ : list A),
                list B) ident_map map
               (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                  (forall t t0 : base.type.type base,
                   ident
                     (@type.arrow (base.type.type base)
                        (@type.base (base.type.type base)
                           (@base.type.prod base t t0))
                        (@type.base (base.type.type base) t0)))
                  (forall (A B : Type) (_ : prod A B), B) ident_snd
                  (@snd)
                  (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                     (forall t t0 : base.type.type base,
                      ident
                        (@type.arrow (base.type.type base)
                           (@type.base (base.type.type base)
                              (@base.type.prod base t t0))
                           (@type.base (base.type.type base) t)))
                     (forall (A B : Type) (_ : prod A B), A) ident_fst
                     (@fst)
                     (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                        (ident
                           (@type.base (base.type.type base)
                              (@base.type.type_base base base_Z))) Z ident_Z0
                        Z0
                        (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                           (ident
                              (@type.arrow (base.type.type base)
                                 (@type.base (base.type.type base)
                                    (@base.type.type_base base base_Z))
                                 (@type.arrow (base.type.type base)
                                    (@type.base (base.type.type base)
                                       (@base.type.type_base base base_Z))
                                    (@type.base (base.type.type base)
                                       (@base.type.type_base base base_Z)))))
                           (forall (_ : Z) (_ : Z), Z) ident_add Z.add
                           (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                              (forall (t : base)
                                 (_ : match t return Type with
                                      | base_Z => Z
                                      | base_nat0 => nat
                                      | base_bool0 => bool
                                      end),
                               ident
                                 (@type.base (base.type.type base)
                                    (@base.type.type_base base t)))
                              (forall (T : Type) (_ : T), T) ident_literal0
                              (@ident.literal)
                              (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                 (forall t : base.type.type base,
                                  ident
                                    (@type.base (base.type.type base)
                                       (@base.type.list base t)))
                                 (forall A : Type, list A) ident_nil0
                                 (@nil)
                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                    (forall t : base.type.type base,
                                     ident
                                       (@type.arrow
                                          (base.type.type base)
                                          (@type.base (base.type.type base) t)
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.list base t))
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.list base t)))))
                                    (forall (A : Type) (_ : A) (_ : list A),
                                     list A) ident_cons0
                                    (@cons)
                                    (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                       (forall t : base.type.type base,
                                        ident
                                          (@type.arrow
                                             (base.type.type base)
                                             (@type.base
                                                (base.type.type base) t)
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.option base t))))
                                       (forall (A : Type) (_ : A), option A)
                                       ident_Some0
                                       (@Some)
                                       (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                          (forall t : base.type.type base,
                                           ident
                                             (@type.base
                                                (base.type.type base)
                                                (@base.type.option base t)))
                                          (forall A : Type, option A)
                                          ident_None0
                                          (@None)
                                          (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                             (forall
                                                t t0 : base.type.type base,
                                              ident
                                                (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.prod base t t0)))))
                                             (forall
                                                (A B : Type)
                                                (_ : A)
                                                (_ : B),
                                              prod A B) ident_pair0
                                             (@pair)
                                             (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                (ident
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base)))
                                                unit ident_tt0 tt
                                                (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.prod base t t0))
                                                 (@type.base
                                                 (base.type.type base) t1))))
                                                 (forall
                                                 (A B P : Type)
                                                 (_ :
                                                 forall (_ : A) (_ : B), P)
                                                 (_ : prod A B), P)
                                                 ident_prod_rect_nodep0
                                                 (@Prod.prod_rect_nodep)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_bool0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ : forall _ : unit, P)
                                                 (_ : bool), P)
                                                 ident_bool_rect0
                                                 Bool.Thunked.bool_rect
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : A) (_ : list A),
                                                 P) (_ : list A), P)
                                                 ident_list_case0
                                                 (@Thunked.list_case)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.option base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : A, P)
                                                 (_ : forall _ : unit, P)
                                                 (_ : option A), P)
                                                 ident_option_rect0
                                                 (@Option.Thunked.option_rect)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : nat) (_ : P), P)
                                                 (_ : nat), P)
                                                 ident_nat_rect0
                                                 NatUtil.Thunked.nat_rect
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t)))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : nat) (_ : P), P)
                                                 (_ : nat), P)
                                                 ident_eager_nat_rect0
                                                 (@ident.eagerly
                                                 (forall
                                                 (P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall (_ : nat) (_ : P), P)
                                                 (_ : nat), P)
                                                 NatUtil.Thunked.nat_rect)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))))
                                                 (forall
                                                 (P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : nat)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : nat)
                                                 (_ : P), Q)
                                                 ident_nat_rect_arrow0
                                                 (@NatUtil.nat_rect_arrow_nodep)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.base
                                                 (base.type.type base) t0))))))
                                                 (forall
                                                 (P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : nat)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : nat)
                                                 (_ : P), Q)
                                                 ident_eager_nat_rect_arrow0
                                                 (@ident.eagerly
                                                 (forall
                                                 (P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : nat)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : nat)
                                                 (_ : P), Q)
                                                 (@NatUtil.nat_rect_arrow_nodep))
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : P), P)
                                                 (_ : list A), P)
                                                 ident_list_rect0
                                                 (@Thunked.list_rect)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0 : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.unit base))
                                                 (@type.base
                                                 (base.type.type base) t0))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t0))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.base
                                                 (base.type.type base) t0)))))
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : P), P)
                                                 (_ : list A), P)
                                                 ident_eager_list_rect0
                                                 (@ident.eagerly
                                                 (forall
                                                 (A P : Type)
                                                 (_ : forall _ : unit, P)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : P), P)
                                                 (_ : list A), P)
                                                 (@Thunked.list_rect))
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1)))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))))))
                                                 (forall
                                                 (A P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : list A)
                                                 (_ : P), Q)
                                                 ident_list_rect_arrow0
                                                 (@list_rect_arrow_nodep)
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1)))))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t0)
                                                 (@type.base
                                                 (base.type.type base) t1))))))
                                                 (forall
                                                 (A P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : list A)
                                                 (_ : P), Q)
                                                 ident_eager_list_rect_arrow0
                                                 (@ident.eagerly
                                                 (forall
                                                 (A P Q : Type)
                                                 (_ : forall _ : P, Q)
                                                 (_ :
                                                 forall
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : forall _ : P, Q)
                                                 (_ : P), Q)
                                                 (_ : list A)
                                                 (_ : P), Q)
                                                 (@list_rect_arrow_nodep))
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (A : Type)
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : nat), A)
                                                 ident_List_nth_default0
                                                 nth_default
                                                 (@IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.cons
                                                 (forall
                                                 t : base.type.type base,
                                                 ident
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base) t)
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.list base t))
                                                 (@type.arrow
                                                 (base.type.type base)
                                                 (@type.base
                                                 (base.type.type base)
                                                 (@base.type.type_base base
                                                 base_nat0))
                                                 (@type.base
                                                 (base.type.type base) t)))))
                                                 (forall
                                                 (A : Type)
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : nat), A)
                                                 ident_eager_List_nth_default0
                                                 (@ident.eagerly
                                                 (forall
                                                 (A : Type)
                                                 (_ : A)
                                                 (_ : list A)
                                                 (_ : nat), A) nth_default)
                                                 IdentifiersBasicLibrary.Compilers.Basic.GallinaAndReifiedIdentList.nil))))))))))))))))))))))))))))
    ).
Defined.
Definition buildEagerIdent0 : @ident.BuildEagerIdentT base ident baseHasNat0 .
Admitted.
Definition buildInterpEagerIdentCorrect0 :
    @ident.BuildInterpEagerIdentCorrectT base base_interp0 ident
      ident_interp0 baseHasNat0 buildEagerIdent0 baseHasNatCorrect0 .
Admitted.
Definition toRestrictedIdent0 :
    @ident.ToRestrictedIdentT base ident baseHasNat0 .
Admitted.
Definition toFromRestrictedIdent0 :
    @ident.ToFromRestrictedIdentT base ident baseHasNat0 buildEagerIdent0
      toRestrictedIdent0 .
Admitted.
Definition buildIdent0 : @ident.BuildIdentT base base_interp0 ident .
Admitted.
Definition buildInterpIdentCorrect0 :
    @ident.BuildInterpIdentCorrectT base base_interp0 ident buildIdent0
      ident_interp0 .
Admitted.
Definition ident_is_var_like0 :
    forall (t : type.type (base.type.type base)) (_ : ident t), bool .
Admitted.
Definition ident_interp_Proper0 :
    forall t : type.type (base.type.type base),
    @Morphisms.Proper
      (forall _ : ident t,
       @type.interp (base.type.type base) (@base.interp base base_interp0) t)
      (@Morphisms.respectful (ident t)
         (@type.interp (base.type.type base) (@base.interp base base_interp0)
            t) (@eq (ident t))
         (@type.related (base.type.type base)
            (@base.interp base base_interp0)
            (fun t0 : base.type.type base =>
             @eq (@base.interp base base_interp0 t0)) t))
      (ident_interp0 t) .
Admitted.
Definition invertIdent0 : @invert_expr.InvertIdentT base base_interp0 ident .
Admitted.
Definition buildInvertIdentCorrect0 :
    @invert_expr.BuildInvertIdentCorrectT base base_interp0 ident
      invertIdent0 buildIdent0 .
Admitted.
Definition base_default0 : @DefaultValue.type.base.DefaultT base base_interp0 .
Admitted.
Definition all_base2 : list base .
Admitted.
Definition all_idents2 :
    list (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T)) .
Admitted.
Definition ident_index1 :
    forall (t : type.type (base.type.type base)) (_ : ident t), nat .
Admitted.
Definition eta_ident_cps_gen2 :
    forall
      (T : forall (t : type.type (base.type.type base)) (_ : ident t), Type)
      (f : forall (t : type.type (base.type.type base)) (idc : ident t),
           T t idc),
    @sig
      (forall (t : type.type (base.type.type base)) (idc : ident t), T t idc)
      (fun
         f' : forall (t : type.type (base.type.type base)) (idc : ident t),
              T t idc =>
       forall (t : type.type (base.type.type base)) (idc : ident t),
       @eq (T t idc) (f' t idc) (f t idc)) .
Admitted.
Definition eta_ident_cps_gen_expand_literal1 :
    forall
      (T : forall (t : type.type (base.type.type base)) (_ : ident t), Type)
      (f : forall (t : type.type (base.type.type base)) (idc : ident t),
           T t idc),
    @sig
      (forall (t : type.type (base.type.type base)) (idc : ident t), T t idc)
      (fun
         f' : forall (t : type.type (base.type.type base)) (idc : ident t),
              T t idc =>
       forall (t : type.type (base.type.type base)) (idc : ident t),
       @eq (T t idc) (f' t idc) (f t idc)) .
Admitted.
Definition eta_ident_cps0 :
    forall (T : forall _ : type.type (base.type.type base), Type)
      (t : type.type (base.type.type base)) (_ : ident t)
      (_ : forall (t0 : type.type (base.type.type base)) (_ : ident t0), T t0),
    T t .
Admitted.
Definition simple_idents0 :
    list
      (@PrimitiveSigma.Primitive.sigT (type.type (base.type.type base)) ident) .
Admitted.
Definition all_raw_idents0 : list raw_ident .
Admitted.
Definition ident_index2 : forall _ : raw_ident, nat .
Admitted.
Definition raw_ident_index_idempotent0 :
    forall idc : raw_ident,
    @eq (option raw_ident)
      (@nth_error raw_ident all_raw_idents0 (ident_index2 idc))
      (@Some raw_ident idc) .
Admitted.
Definition eta_ident_cps_gen3 :
    forall (T : forall _ : raw_ident, Type)
      (f : forall idc : raw_ident, T idc),
    @sig (forall idc : raw_ident, T idc)
      (fun f' : forall idc : raw_ident, T idc =>
       forall idc : raw_ident, @eq (T idc) (f' idc) (f idc)) .
Proof.
exact (
    fun (T : forall _ : raw_ident, Type) (f : forall idc : raw_ident, T idc)
    =>
    @exist (forall idc : raw_ident, T idc)
      (fun f' : forall idc : raw_ident, T idc =>
       forall idc : raw_ident, @eq (T idc) (f' idc) (f idc))
      (fun idc : raw_ident =>
       match idc as r return (T r) with
       | raw_ident_false0 => f raw_ident_false0
       | raw_ident_flat_map => f raw_ident_flat_map
       | raw_ident_app => f raw_ident_app
       | raw_ident_map => f raw_ident_map
       | raw_ident_snd => f raw_ident_snd
       | raw_ident_fst => f raw_ident_fst
       | raw_ident_Z0 => f raw_ident_Z0
       | raw_ident_add => f raw_ident_add
       | raw_ident_literal0 => f raw_ident_literal0
       | raw_ident_nil0 => f raw_ident_nil0
       | raw_ident_cons0 => f raw_ident_cons0
       | raw_ident_Some0 => f raw_ident_Some0
       | raw_ident_None0 => f raw_ident_None0
       | raw_ident_pair0 => f raw_ident_pair0
       | raw_ident_tt0 => f raw_ident_tt0
       | raw_ident_prod_rect_nodep0 => f raw_ident_prod_rect_nodep0
       | raw_ident_bool_rect0 => f raw_ident_bool_rect0
       | raw_ident_list_case0 => f raw_ident_list_case0
       | raw_ident_option_rect0 => f raw_ident_option_rect0
       | raw_ident_nat_rect0 => f raw_ident_nat_rect0
       | raw_ident_eager_nat_rect0 => f raw_ident_eager_nat_rect0
       | raw_ident_nat_rect_arrow0 => f raw_ident_nat_rect_arrow0
       | raw_ident_eager_nat_rect_arrow0 => f raw_ident_eager_nat_rect_arrow0
       | raw_ident_list_rect0 => f raw_ident_list_rect0
       | raw_ident_eager_list_rect0 => f raw_ident_eager_list_rect0
       | raw_ident_list_rect_arrow0 => f raw_ident_list_rect_arrow0
       | raw_ident_eager_list_rect_arrow0 =>
           f raw_ident_eager_list_rect_arrow0
       | raw_ident_List_nth_default0 => f raw_ident_List_nth_default0
       | raw_ident_eager_List_nth_default0 =>
           f raw_ident_eager_List_nth_default0
       end)
      (fun idc : raw_ident =>
       match
         idc as r
         return
           (@eq (T r)
              match r as r0 return (T r0) with
              | raw_ident_false0 => f raw_ident_false0
              | raw_ident_flat_map => f raw_ident_flat_map
              | raw_ident_app => f raw_ident_app
              | raw_ident_map => f raw_ident_map
              | raw_ident_snd => f raw_ident_snd
              | raw_ident_fst => f raw_ident_fst
              | raw_ident_Z0 => f raw_ident_Z0
              | raw_ident_add => f raw_ident_add
              | raw_ident_literal0 => f raw_ident_literal0
              | raw_ident_nil0 => f raw_ident_nil0
              | raw_ident_cons0 => f raw_ident_cons0
              | raw_ident_Some0 => f raw_ident_Some0
              | raw_ident_None0 => f raw_ident_None0
              | raw_ident_pair0 => f raw_ident_pair0
              | raw_ident_tt0 => f raw_ident_tt0
              | raw_ident_prod_rect_nodep0 => f raw_ident_prod_rect_nodep0
              | raw_ident_bool_rect0 => f raw_ident_bool_rect0
              | raw_ident_list_case0 => f raw_ident_list_case0
              | raw_ident_option_rect0 => f raw_ident_option_rect0
              | raw_ident_nat_rect0 => f raw_ident_nat_rect0
              | raw_ident_eager_nat_rect0 => f raw_ident_eager_nat_rect0
              | raw_ident_nat_rect_arrow0 => f raw_ident_nat_rect_arrow0
              | raw_ident_eager_nat_rect_arrow0 =>
                  f raw_ident_eager_nat_rect_arrow0
              | raw_ident_list_rect0 => f raw_ident_list_rect0
              | raw_ident_eager_list_rect0 => f raw_ident_eager_list_rect0
              | raw_ident_list_rect_arrow0 => f raw_ident_list_rect_arrow0
              | raw_ident_eager_list_rect_arrow0 =>
                  f raw_ident_eager_list_rect_arrow0
              | raw_ident_List_nth_default0 => f raw_ident_List_nth_default0
              | raw_ident_eager_List_nth_default0 =>
                  f raw_ident_eager_List_nth_default0
              end (f r))
       with
       | raw_ident_false0 =>
           @eq_refl (T raw_ident_false0) (f raw_ident_false0)
       | raw_ident_flat_map =>
           @eq_refl (T raw_ident_flat_map) (f raw_ident_flat_map)
       | raw_ident_app => @eq_refl (T raw_ident_app) (f raw_ident_app)
       | raw_ident_map => @eq_refl (T raw_ident_map) (f raw_ident_map)
       | raw_ident_snd => @eq_refl (T raw_ident_snd) (f raw_ident_snd)
       | raw_ident_fst => @eq_refl (T raw_ident_fst) (f raw_ident_fst)
       | raw_ident_Z0 => @eq_refl (T raw_ident_Z0) (f raw_ident_Z0)
       | raw_ident_add => @eq_refl (T raw_ident_add) (f raw_ident_add)
       | raw_ident_literal0 =>
           @eq_refl (T raw_ident_literal0) (f raw_ident_literal0)
       | raw_ident_nil0 => @eq_refl (T raw_ident_nil0) (f raw_ident_nil0)
       | raw_ident_cons0 => @eq_refl (T raw_ident_cons0) (f raw_ident_cons0)
       | raw_ident_Some0 => @eq_refl (T raw_ident_Some0) (f raw_ident_Some0)
       | raw_ident_None0 => @eq_refl (T raw_ident_None0) (f raw_ident_None0)
       | raw_ident_pair0 => @eq_refl (T raw_ident_pair0) (f raw_ident_pair0)
       | raw_ident_tt0 => @eq_refl (T raw_ident_tt0) (f raw_ident_tt0)
       | raw_ident_prod_rect_nodep0 =>
           @eq_refl (T raw_ident_prod_rect_nodep0)
             (f raw_ident_prod_rect_nodep0)
       | raw_ident_bool_rect0 =>
           @eq_refl (T raw_ident_bool_rect0) (f raw_ident_bool_rect0)
       | raw_ident_list_case0 =>
           @eq_refl (T raw_ident_list_case0) (f raw_ident_list_case0)
       | raw_ident_option_rect0 =>
           @eq_refl (T raw_ident_option_rect0) (f raw_ident_option_rect0)
       | raw_ident_nat_rect0 =>
           @eq_refl (T raw_ident_nat_rect0) (f raw_ident_nat_rect0)
       | raw_ident_eager_nat_rect0 =>
           @eq_refl (T raw_ident_eager_nat_rect0)
             (f raw_ident_eager_nat_rect0)
       | raw_ident_nat_rect_arrow0 =>
           @eq_refl (T raw_ident_nat_rect_arrow0)
             (f raw_ident_nat_rect_arrow0)
       | raw_ident_eager_nat_rect_arrow0 =>
           @eq_refl (T raw_ident_eager_nat_rect_arrow0)
             (f raw_ident_eager_nat_rect_arrow0)
       | raw_ident_list_rect0 =>
           @eq_refl (T raw_ident_list_rect0) (f raw_ident_list_rect0)
       | raw_ident_eager_list_rect0 =>
           @eq_refl (T raw_ident_eager_list_rect0)
             (f raw_ident_eager_list_rect0)
       | raw_ident_list_rect_arrow0 =>
           @eq_refl (T raw_ident_list_rect_arrow0)
             (f raw_ident_list_rect_arrow0)
       | raw_ident_eager_list_rect_arrow0 =>
           @eq_refl (T raw_ident_eager_list_rect_arrow0)
             (f raw_ident_eager_list_rect_arrow0)
       | raw_ident_List_nth_default0 =>
           @eq_refl (T raw_ident_List_nth_default0)
             (f raw_ident_List_nth_default0)
       | raw_ident_eager_List_nth_default0 =>
           @eq_refl (T raw_ident_eager_List_nth_default0)
             (f raw_ident_eager_List_nth_default0)
       end) ).
Defined.
Definition raw_ident_infos_of0 :
    forall _ : raw_ident,
    @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_infos base ident .
exact (fun idc : raw_ident =>
    match
      idc
      return
        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_infos base
           ident)
    with
    | raw_ident_false0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@nil
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)
             (fun _ : unit => @nil Type)
             (fun _ _ : unit =>
              @type.base (base.type.type base)
                (@base.type.type_base base base_bool0))
             (fun _ _ _ : unit => ident_false0))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (fun _ _ : unit => true) Reflect.reflect_eq_unit
    | raw_ident_flat_map =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i))
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i)))))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit) i)))
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_flat_map
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_app =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@base.type.list base (@fst (base.type.type base) unit i)))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit i)))
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_app (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_map =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit) i)))
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_map
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_snd =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@base.type.prod base
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.base (base.type.type base)
                   (@fst (base.type.type base) unit
                      (@snd (base.type.type base)
                         (prod (base.type.type base) unit) i))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_snd
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_fst =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@base.type.prod base
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.base (base.type.type base)
                   (@fst (base.type.type base)
                      (prod (base.type.type base) unit) i)))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_fst
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_Z0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@nil
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)
             (fun _ : unit => @nil Type)
             (fun _ _ : unit =>
              @type.base (base.type.type base)
                (@base.type.type_base base base_Z))
             (fun _ _ _ : unit => ident_Z0))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (fun _ _ : unit => true) Reflect.reflect_eq_unit
    | raw_ident_add =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@nil
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)
             (fun _ : unit => @nil Type)
             (fun _ _ : unit =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@base.type.type_base base base_Z))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.type_base base base_Z))
                   (@type.base (base.type.type base)
                      (@base.type.type_base base base_Z))))
             (fun _ _ _ : unit => ident_add))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (fun _ _ : unit => true) Reflect.reflect_eq_unit
    | raw_ident_literal0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@cons Type base (@nil Type))
             (@nil
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)
             (fun d : prod base unit =>
              @cons Type
                match @fst base unit d return Type with
                | base_Z => Z
                | base_nat0 => nat
                | base_bool0 => bool
                end (@nil Type))
             (fun (d : prod base unit) (_ : unit) =>
              @type.base (base.type.type base)
                (@base.type.type_base base (@fst base unit d)))
             (fun (d : prod base unit) (_ : unit)
                (a : prod
                       match @fst base unit d return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end unit) =>
              ident_literal0 (@fst base unit d)
                (@fst
                   match @fst base unit d return Type with
                   | base_Z => Z
                   | base_nat0 => nat
                   | base_bool0 => bool
                   end unit a)))
          (fun x y : prod base unit =>
           match
             x as p
             return
               (forall x0 : prod base unit,
                sumbool (@eq (prod base unit) p x0)
                  (not (@eq (prod base unit) p x0)))
           with
           | pair a b =>
               fun x0 : prod base unit =>
               match
                 x0 as p
                 return
                   (sumbool (@eq (prod base unit) (@pair base unit a b) p)
                      (not (@eq (prod base unit) (@pair base unit a b) p)))
               with
               | pair a0 b0 =>
                   match
                     base_rec
                       (fun a1 : base =>
                        forall x1 : base,
                        sumbool (@eq base a1 x1) (not (@eq base a1 x1)))
                       (fun x1 : base =>
                        match
                          x1 as b1
                          return
                            (sumbool (@eq base base_Z b1)
                               (not (@eq base base_Z b1)))
                        with
                        | base_Z =>
                            @left (@eq base base_Z base_Z)
                              (not (@eq base base_Z base_Z))
                              (@eq_refl base base_Z)
                        | base_nat0 =>
                            @right (@eq base base_Z base_nat0)
                              (not (@eq base base_Z base_nat0))
                              (fun H2 : @eq base base_Z base_nat0 =>
                               False_ind False
                                 match
                                   H2 in (eq _ y0)
                                   return
                                     match y0 return Prop with
                                     | base_Z => True
                                     | base_nat0 => False
                                     | base_bool0 => False
                                     end
                                 with
                                 | eq_refl => I
                                 end)
                        | base_bool0 =>
                            @right (@eq base base_Z base_bool0)
                              (not (@eq base base_Z base_bool0))
                              (fun H2 : @eq base base_Z base_bool0 =>
                               False_ind False
                                 match
                                   H2 in (eq _ y0)
                                   return
                                     match y0 return Prop with
                                     | base_Z => True
                                     | base_nat0 => False
                                     | base_bool0 => False
                                     end
                                 with
                                 | eq_refl => I
                                 end)
                        end)
                       (fun x1 : base =>
                        match
                          x1 as b1
                          return
                            (sumbool (@eq base base_nat0 b1)
                               (not (@eq base base_nat0 b1)))
                        with
                        | base_Z =>
                            @right (@eq base base_nat0 base_Z)
                              (not (@eq base base_nat0 base_Z))
                              (fun H2 : @eq base base_nat0 base_Z =>
                               False_ind False
                                 match
                                   H2 in (eq _ y0)
                                   return
                                     match y0 return Prop with
                                     | base_Z => False
                                     | base_nat0 => True
                                     | base_bool0 => False
                                     end
                                 with
                                 | eq_refl => I
                                 end)
                        | base_nat0 =>
                            @left (@eq base base_nat0 base_nat0)
                              (not (@eq base base_nat0 base_nat0))
                              (@eq_refl base base_nat0)
                        | base_bool0 =>
                            @right (@eq base base_nat0 base_bool0)
                              (not (@eq base base_nat0 base_bool0))
                              (fun H2 : @eq base base_nat0 base_bool0 =>
                               False_ind False
                                 match
                                   H2 in (eq _ y0)
                                   return
                                     match y0 return Prop with
                                     | base_Z => False
                                     | base_nat0 => True
                                     | base_bool0 => False
                                     end
                                 with
                                 | eq_refl => I
                                 end)
                        end)
                       (fun x1 : base =>
                        match
                          x1 as b1
                          return
                            (sumbool (@eq base base_bool0 b1)
                               (not (@eq base base_bool0 b1)))
                        with
                        | base_Z =>
                            @right (@eq base base_bool0 base_Z)
                              (not (@eq base base_bool0 base_Z))
                              (fun H2 : @eq base base_bool0 base_Z =>
                               False_ind False
                                 match
                                   H2 in (eq _ y0)
                                   return
                                     match y0 return Prop with
                                     | base_Z => False
                                     | base_nat0 => False
                                     | base_bool0 => True
                                     end
                                 with
                                 | eq_refl => I
                                 end)
                        | base_nat0 =>
                            @right (@eq base base_bool0 base_nat0)
                              (not (@eq base base_bool0 base_nat0))
                              (fun H2 : @eq base base_bool0 base_nat0 =>
                               False_ind False
                                 match
                                   H2 in (eq _ y0)
                                   return
                                     match y0 return Prop with
                                     | base_Z => False
                                     | base_nat0 => False
                                     | base_bool0 => True
                                     end
                                 with
                                 | eq_refl => I
                                 end)
                        | base_bool0 =>
                            @left (@eq base base_bool0 base_bool0)
                              (not (@eq base base_bool0 base_bool0))
                              (@eq_refl base base_bool0)
                        end) a a0
                     return
                       (sumbool
                          (@eq (prod base unit) (@pair base unit a b)
                             (@pair base unit a0 b0))
                          (not
                             (@eq (prod base unit)
                                (@pair base unit a b)
                                (@pair base unit a0 b0))))
                   with
                   | left a1 =>
                       match
                         match
                           b as u
                           return
                             (forall x1 : unit,
                              sumbool (@eq unit u x1) (not (@eq unit u x1)))
                         with
                         | tt =>
                             fun x1 : unit =>
                             match
                               x1 as u
                               return
                                 (sumbool (@eq unit tt u)
                                    (not (@eq unit tt u)))
                             with
                             | tt =>
                                 @left (@eq unit tt tt)
                                   (not (@eq unit tt tt))
                                   (@eq_refl unit tt)
                             end
                         end b0
                         return
                           (sumbool
                              (@eq (prod base unit)
                                 (@pair base unit a b)
                                 (@pair base unit a0 b0))
                              (not
                                 (@eq (prod base unit)
                                    (@pair base unit a b)
                                    (@pair base unit a0 b0))))
                       with
                       | left a2 =>
                           @left
                             (@eq (prod base unit)
                                (@pair base unit a b)
                                (@pair base unit a0 b0))
                             (not
                                (@eq (prod base unit)
                                   (@pair base unit a b)
                                   (@pair base unit a0 b0)))
                             match
                               match
                                 a1 in (eq _ y0) return (@eq base y0 a)
                               with
                               | eq_refl => @eq_refl base a
                               end in (eq _ y0)
                               return
                                 (@eq (prod base unit)
                                    (@pair base unit y0 b)
                                    (@pair base unit a0 b0))
                             with
                             | eq_refl =>
                                 match
                                   match
                                     a2 in (eq _ y0) return (@eq unit y0 b)
                                   with
                                   | eq_refl => @eq_refl unit b
                                   end in (eq _ y0)
                                   return
                                     (@eq (prod base unit)
                                        (@pair base unit a0 y0)
                                        (@pair base unit a0 b0))
                                 with
                                 | eq_refl =>
                                     @eq_refl (prod base unit)
                                       (@pair base unit a0 b0)
                                 end
                             end
                       | right b1 =>
                           @right
                             (@eq (prod base unit)
                                (@pair base unit a b)
                                (@pair base unit a0 b0))
                             (not
                                (@eq (prod base unit)
                                   (@pair base unit a b)
                                   (@pair base unit a0 b0)))
                             match
                               match
                                 a1 in (eq _ y0) return (@eq base y0 a)
                               with
                               | eq_refl => @eq_refl base a
                               end in (eq _ y0)
                               return
                                 (not
                                    (@eq (prod base unit)
                                       (@pair base unit y0 b)
                                       (@pair base unit a0 b0)))
                             with
                             | eq_refl =>
                                 fun
                                   absurd : @eq (prod base unit)
                                              (@pair base unit a0 b)
                                              (@pair base unit a0 b0) =>
                                 b1
                                   (@f_equal (prod base unit) unit
                                      (fun e : prod base unit =>
                                       match e return unit with
                                       | pair _ u => u
                                       end) (@pair base unit a0 b)
                                      (@pair base unit a0 b0) absurd)
                             end
                       end
                   | right b1 =>
                       @right
                         (@eq (prod base unit) (@pair base unit a b)
                            (@pair base unit a0 b0))
                         (not
                            (@eq (prod base unit)
                               (@pair base unit a b)
                               (@pair base unit a0 b0)))
                         (fun
                            absurd : @eq (prod base unit)
                                       (@pair base unit a b)
                                       (@pair base unit a0 b0) =>
                          b1
                            (@f_equal (prod base unit) base
                               (fun e : prod base unit =>
                                match e return base with
                                | pair b2 _ => b2
                                end) (@pair base unit a b)
                               (@pair base unit a0 b0) absurd))
                   end
               end
           end y)
          (fun (x : prod base unit)
             (x0
              y : prod
                    match @fst base unit x return Type with
                    | base_Z => Z
                    | base_nat0 => nat
                    | base_bool0 => bool
                    end unit) =>
           Prod.prod_beq
             match @fst base unit x return Type with
             | base_Z => Z
             | base_nat0 => nat
             | base_bool0 => bool
             end unit
             (base_interp_beq0 (@fst base unit x) (@fst base unit x))
             (fun _ _ : unit => true) x0 y)
          (fun (x : prod base unit)
             (x0
              y : prod
                    match @fst base unit x return Type with
                    | base_Z => Z
                    | base_nat0 => nat
                    | base_bool0 => bool
                    end unit) =>
           @Reflect.reflect_eq_prod
             match @fst base unit x return Type with
             | base_Z => Z
             | base_nat0 => nat
             | base_bool0 => bool
             end unit
             (base_interp_beq0 (@fst base unit x) (@fst base unit x))
             (fun _ _ : unit => true)
             (reflect_base_interp_beq0 (@fst base unit x))
             Reflect.reflect_eq_unit x0 y) (fun _ _ : unit => true)
          Reflect.reflect_eq_unit
    | raw_ident_nil0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.base (base.type.type base)
                (@base.type.list base (@fst (base.type.type base) unit i)))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_nil0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_cons0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@fst (base.type.type base) unit i))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit i)))
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_cons0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_Some0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@fst (base.type.type base) unit i))
                (@type.base (base.type.type base)
                   (@base.type.option base
                      (@fst (base.type.type base) unit i))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_Some0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_None0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.base (base.type.type base)
                (@base.type.option base (@fst (base.type.type base) unit i)))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_None0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_pair0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@fst (base.type.type base)
                      (prod (base.type.type base) unit) i))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i)))
                   (@type.base (base.type.type base)
                      (@base.type.prod base
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit) i)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_pair0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_tt0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@nil
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)
             (fun _ : unit => @nil Type)
             (fun _ _ : unit =>
              @type.base (base.type.type base) (@base.type.unit base))
             (fun _ _ _ : unit => ident_tt0))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (fun _ _ : unit => true) Reflect.reflect_eq_unit
    | raw_ident_prod_rect_nodep0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@cons
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                      (@nil
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base)
                            (prod (base.type.type base) unit)) i))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit)
                            (@snd (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i)))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit)
                               (@snd (base.type.type base)
                                  (prod (base.type.type base)
                                     (prod (base.type.type base) unit)) i))))))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.prod base
                         (@fst (base.type.type base)
                            (prod (base.type.type base)
                               (prod (base.type.type base) unit)) i)
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit)
                            (@snd (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i))))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit)
                            (@snd (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit)))
                (_ : unit) =>
              ident_prod_rect_nodep0
                (@fst (base.type.type base)
                   (prod (base.type.type base)
                      (prod (base.type.type base) unit)) i)
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   (@snd (base.type.type base)
                      (prod (base.type.type base)
                         (prod (base.type.type base) unit)) i))
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit)
                      (@snd (base.type.type base)
                         (prod (base.type.type base)
                            (prod (base.type.type base) unit)) i)))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) (prod (base.type.type base) unit))
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true))))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) (prod (base.type.type base) unit))
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true)))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true))
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                (@Reflect.reflect_eq_prod (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true)
                   (fun x y : base.type.type base =>
                    @base.reflect_type_beq base base_beq0 reflect_base_beq0 x
                      y) Reflect.reflect_eq_unit)))
    | raw_ident_bool_rect0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base) (@base.type.unit base))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit i)))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.unit base))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit i)))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_bool0))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_bool_rect0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_list_case0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base) (@base.type.unit base))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit) i))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@base.type.list base
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i)))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit
                               (@snd (base.type.type base)
                                  (prod (base.type.type base) unit) i)))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.list base
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit) i)))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_list_case0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_option_rect0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.unit base))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.option base
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit) i)))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_option_rect0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_nat_rect0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base) (@base.type.unit base))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit i)))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit i))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit i))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_nat_rect0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_eager_nat_rect0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base) (@base.type.unit base))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit i)))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit i))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit i))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_eager_nat_rect0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_nat_rect_arrow0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.arrow (base.type.type base)
                         (@type.arrow (base.type.type base)
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i))
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i))))
                         (@type.arrow (base.type.type base)
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i))
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i))))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit) i))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit
                               (@snd (base.type.type base)
                                  (prod (base.type.type base) unit) i)))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_nat_rect_arrow0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_eager_nat_rect_arrow0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit) i))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.arrow (base.type.type base)
                         (@type.arrow (base.type.type base)
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i))
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i))))
                         (@type.arrow (base.type.type base)
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i))
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i))))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit) i))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit
                               (@snd (base.type.type base)
                                  (prod (base.type.type base) unit) i)))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_eager_nat_rect_arrow0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_list_rect0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base) (@base.type.unit base))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit) i))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@base.type.list base
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i)))
                         (@type.arrow (base.type.type base)
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i)))
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i))))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.list base
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit) i)))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_list_rect0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_eager_list_rect0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@nil
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type)))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit)) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base) (@base.type.unit base))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit) i))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base)
                            (prod (base.type.type base) unit) i))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@base.type.list base
                               (@fst (base.type.type base)
                                  (prod (base.type.type base) unit) i)))
                         (@type.arrow (base.type.type base)
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i)))
                            (@type.base (base.type.type base)
                               (@fst (base.type.type base) unit
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base) unit) i))))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.list base
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit) i)))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit
                            (@snd (base.type.type base)
                               (prod (base.type.type base) unit) i))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base) unit))
                (_ : unit) =>
              ident_eager_list_rect0
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   i)
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit) i))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) unit)
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base) unit
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (fun _ _ : unit => true)
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                Reflect.reflect_eq_unit))
    | raw_ident_list_rect_arrow0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@cons
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                      (@nil
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit)
                         (@snd (base.type.type base)
                            (prod (base.type.type base)
                               (prod (base.type.type base) unit)) i)))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit)
                            (@snd (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i)))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base)
                            (prod (base.type.type base)
                               (prod (base.type.type base) unit)) i))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@base.type.list base
                               (@fst (base.type.type base)
                                  (prod (base.type.type base)
                                     (prod (base.type.type base) unit)) i)))
                         (@type.arrow (base.type.type base)
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base)
                                     (prod (base.type.type base) unit)
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base)
                                           (prod (base.type.type base) unit))
                                        i)))
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base) unit
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base) unit)
                                        (@snd (base.type.type base)
                                           (prod (base.type.type base)
                                              (prod
                                                 (base.type.type base) unit))
                                           i)))))
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base)
                                     (prod (base.type.type base) unit)
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base)
                                           (prod (base.type.type base) unit))
                                        i)))
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base) unit
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base) unit)
                                        (@snd (base.type.type base)
                                           (prod (base.type.type base)
                                              (prod
                                                 (base.type.type base) unit))
                                           i))))))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.list base
                            (@fst (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i)))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit)
                               (@snd (base.type.type base)
                                  (prod (base.type.type base)
                                     (prod (base.type.type base) unit)) i)))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit
                               (@snd (base.type.type base)
                                  (prod (base.type.type base) unit)
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base)
                                        (prod (base.type.type base) unit)) i))))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit)))
                (_ : unit) =>
              ident_list_rect_arrow0
                (@fst (base.type.type base)
                   (prod (base.type.type base)
                      (prod (base.type.type base) unit)) i)
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   (@snd (base.type.type base)
                      (prod (base.type.type base)
                         (prod (base.type.type base) unit)) i))
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit)
                      (@snd (base.type.type base)
                         (prod (base.type.type base)
                            (prod (base.type.type base) unit)) i)))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) (prod (base.type.type base) unit))
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true))))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) (prod (base.type.type base) unit))
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true)))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true))
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                (@Reflect.reflect_eq_prod (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true)
                   (fun x y : base.type.type base =>
                    @base.reflect_type_beq base base_beq0 reflect_base_beq0 x
                      y) Reflect.reflect_eq_unit)))
    | raw_ident_eager_list_rect_arrow0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@cons
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                   (@cons
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                      (@nil
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))))
             (fun _ : unit => @nil Type)
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) =>
              @type.arrow (base.type.type base)
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base)
                         (prod (base.type.type base) unit)
                         (@snd (base.type.type base)
                            (prod (base.type.type base)
                               (prod (base.type.type base) unit)) i)))
                   (@type.base (base.type.type base)
                      (@fst (base.type.type base) unit
                         (@snd (base.type.type base)
                            (prod (base.type.type base) unit)
                            (@snd (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i)))))
                (@type.arrow (base.type.type base)
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base)
                            (prod (base.type.type base)
                               (prod (base.type.type base) unit)) i))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@base.type.list base
                               (@fst (base.type.type base)
                                  (prod (base.type.type base)
                                     (prod (base.type.type base) unit)) i)))
                         (@type.arrow (base.type.type base)
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base)
                                     (prod (base.type.type base) unit)
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base)
                                           (prod (base.type.type base) unit))
                                        i)))
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base) unit
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base) unit)
                                        (@snd (base.type.type base)
                                           (prod (base.type.type base)
                                              (prod
                                                 (base.type.type base) unit))
                                           i)))))
                            (@type.arrow (base.type.type base)
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base)
                                     (prod (base.type.type base) unit)
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base)
                                           (prod (base.type.type base) unit))
                                        i)))
                               (@type.base (base.type.type base)
                                  (@fst (base.type.type base) unit
                                     (@snd (base.type.type base)
                                        (prod (base.type.type base) unit)
                                        (@snd (base.type.type base)
                                           (prod (base.type.type base)
                                              (prod
                                                 (base.type.type base) unit))
                                           i))))))))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.list base
                            (@fst (base.type.type base)
                               (prod (base.type.type base)
                                  (prod (base.type.type base) unit)) i)))
                      (@type.arrow (base.type.type base)
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base)
                               (prod (base.type.type base) unit)
                               (@snd (base.type.type base)
                                  (prod (base.type.type base)
                                     (prod (base.type.type base) unit)) i)))
                         (@type.base (base.type.type base)
                            (@fst (base.type.type base) unit
                               (@snd (base.type.type base)
                                  (prod (base.type.type base) unit)
                                  (@snd (base.type.type base)
                                     (prod (base.type.type base)
                                        (prod (base.type.type base) unit)) i))))))))
             (fun (_ : unit)
                (i : prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit)))
                (_ : unit) =>
              ident_eager_list_rect_arrow0
                (@fst (base.type.type base)
                   (prod (base.type.type base)
                      (prod (base.type.type base) unit)) i)
                (@fst (base.type.type base) (prod (base.type.type base) unit)
                   (@snd (base.type.type base)
                      (prod (base.type.type base)
                         (prod (base.type.type base) unit)) i))
                (@fst (base.type.type base) unit
                   (@snd (base.type.type base)
                      (prod (base.type.type base) unit)
                      (@snd (base.type.type base)
                         (prod (base.type.type base)
                            (prod (base.type.type base) unit)) i)))))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base)
             (prod (base.type.type base) (prod (base.type.type base) unit))
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true))))
          (@Reflect.reflect_eq_prod (base.type.type base)
             (prod (base.type.type base) (prod (base.type.type base) unit))
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (Prod.prod_beq (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true)))
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             (@Reflect.reflect_eq_prod (base.type.type base)
                (prod (base.type.type base) unit)
                (fun x y : base.type.type base =>
                 base.type.type_beq base base_beq0 x y)
                (Prod.prod_beq (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true))
                (fun x y : base.type.type base =>
                 @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
                (@Reflect.reflect_eq_prod (base.type.type base) unit
                   (fun x y : base.type.type base =>
                    base.type.type_beq base base_beq0 x y)
                   (fun _ _ : unit => true)
                   (fun x y : base.type.type base =>
                    @base.reflect_type_beq base base_beq0 reflect_base_beq0 x
                      y) Reflect.reflect_eq_unit)))
    | raw_ident_List_nth_default0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@fst (base.type.type base) unit i))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit i)))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              => ident_List_nth_default0 (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    | raw_ident_eager_List_nth_default0 =>
        @IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_ident_infos
          base ident
          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.Build_preident_infos
             base ident (@nil Type)
             (@cons
                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType
                (@nil
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type))
             (fun _ : unit => @nil Type)
             (fun (_ : unit) (i : prod (base.type.type base) unit) =>
              @type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@fst (base.type.type base) unit i))
                (@type.arrow (base.type.type base)
                   (@type.base (base.type.type base)
                      (@base.type.list base
                         (@fst (base.type.type base) unit i)))
                   (@type.arrow (base.type.type base)
                      (@type.base (base.type.type base)
                         (@base.type.type_base base base_nat0))
                      (@type.base (base.type.type base)
                         (@fst (base.type.type base) unit i)))))
             (fun (_ : unit) (i : prod (base.type.type base) unit) (_ : unit)
              =>
              ident_eager_List_nth_default0
                (@fst (base.type.type base) unit i)))
          (fun x y : unit =>
           match
             x as u
             return
               (forall x0 : unit,
                sumbool (@eq unit u x0) (not (@eq unit u x0)))
           with
           | tt =>
               fun x0 : unit =>
               match
                 x0 as u
                 return (sumbool (@eq unit tt u) (not (@eq unit tt u)))
               with
               | tt =>
                   @left (@eq unit tt tt) (not (@eq unit tt tt))
                     (@eq_refl unit tt)
               end
           end y) (fun _ _ _ : unit => true)
          (fun _ : unit => Reflect.reflect_eq_unit)
          (Prod.prod_beq (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true))
          (@Reflect.reflect_eq_prod (base.type.type base) unit
             (fun x y : base.type.type base =>
              base.type.type_beq base base_beq0 x y)
             (fun _ _ : unit => true)
             (fun x y : base.type.type base =>
              @base.reflect_type_beq base base_beq0 reflect_base_beq0 x y)
             Reflect.reflect_eq_unit)
    end ).
Defined.
Definition split_raw_ident_gen0 :
    forall (t : type.type (base.type.type base)) (idc : ident t),
    @PrimitiveSigma.Primitive.sigT raw_ident
      (fun ridc : raw_ident =>
       @sig
         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args base
            ident
            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
               (raw_ident_infos_of0 ridc)))
         (fun
            args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                     base ident
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc)) =>
          @sig
            (@eq (type.type (base.type.type base))
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _ _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _ (raw_ident_infos_of0 ridc))
                  (@PrimitiveSigma.Primitive.projT1 _ _ args)
                  (@fst
                     (@fold_right Type Type (fun A B : Type => prod A B) unit
                        (@map
                           IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                           Type
                           (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                              base)
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                              _ _
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _ (raw_ident_infos_of0 ridc)))))
                     (@fold_right Type Type (fun A B : Type => prod A B) unit
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc))
                           (@PrimitiveSigma.Primitive.projT1 _ _ args)))
                     (@PrimitiveSigma.Primitive.projT2 _ _ args))) t)
            (fun
               pf : @eq (type.type (base.type.type base))
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 ridc))
                         (@PrimitiveSigma.Primitive.projT1 _ _ args)
                         (@fst
                            (@fold_right Type Type
                               (fun A B : Type => prod A B) unit
                               (@map
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                  Type
                                  (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                     base)
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                     _ _
                                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                        _ _ (raw_ident_infos_of0 ridc)))))
                            (@fold_right Type Type
                               (fun A B : Type => prod A B) unit
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _ (raw_ident_infos_of0 ridc))
                                  (@PrimitiveSigma.Primitive.projT1 _ _ args)))
                            (@PrimitiveSigma.Primitive.projT2 _ _ args))) t
             =>
             @eq (ident t) idc
               (@eq_rect (type.type (base.type.type base))
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _
                     _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc))
                     (@PrimitiveSigma.Primitive.projT1 _ _ args)
                     (@fst
                        (@fold_right Type Type (fun A B : Type => prod A B)
                           unit
                           (@map
                              IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                              Type
                              (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                 base)
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                 _ _
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                    _ _ (raw_ident_infos_of0 ridc)))))
                        (@fold_right Type Type (fun A B : Type => prod A B)
                           unit
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                              _ _
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _ (raw_ident_infos_of0 ridc))
                              (@PrimitiveSigma.Primitive.projT1 _ _ args)))
                        (@PrimitiveSigma.Primitive.projT2 _ _ args))) ident
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                     base ident
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc)) args) t pf)))) .
Admitted.
Tactic Notation "admit" := abstract case proof_admitted.
Ltac mk name ty body :=
  let __ := match goal with
            | _ => simple notypeclasses refine (let name : ty := _ in
                                                _);
                   [ (*first [*) transparent_abstract exact body using name(*
                           | transparent_abstract case proof_admitted using name ]*)
                   | ]
            end in
  lazymatch goal with
  | [ H := ?name |- _ ]
    => let __ := match goal with _ => clear H end in
       name
  end.
  Goal ProofsCommon.Compilers.RewriteRules.GoalType.VerifiedRewriter_with_ind_args
       scraped_data InductiveHList.nil base ident raw_ident pattern_ident   false   false   true rules_proofs.

    Unset Ltac Backtrace.
    Set Printing All.
    Set Printing Depth 100000000.

  let raw_invert_bind_args0 := mk raw_invert_bind_args0 (
    forall (t : type.type (base.type.type base)) (_ : ident t)
      (pidc : raw_ident),
    option
      match pidc return Type with
      | raw_ident_false0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_false0
      | raw_ident_flat_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_flat_map
      | raw_ident_app =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_app
      | raw_ident_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_map
      | raw_ident_snd =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_snd
      | raw_ident_fst =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_fst
      | raw_ident_Z0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Z0
      | raw_ident_add =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_add
      | raw_ident_literal0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_literal0
      | raw_ident_nil0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nil0
      | raw_ident_cons0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_cons0
      | raw_ident_Some0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Some0
      | raw_ident_None0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_None0
      | raw_ident_pair0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_pair0
      | raw_ident_tt0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_tt0
      | raw_ident_prod_rect_nodep0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_prod_rect_nodep0
      | raw_ident_bool_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_bool_rect0
      | raw_ident_list_case0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_case0
      | raw_ident_option_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_option_rect0
      | raw_ident_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect0
      | raw_ident_eager_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_nat_rect0
      | raw_ident_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect_arrow0
      | raw_ident_eager_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_nat_rect_arrow0
      | raw_ident_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect0
      | raw_ident_eager_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_list_rect0
      | raw_ident_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect_arrow0
      | raw_ident_eager_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_list_rect_arrow0
      | raw_ident_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_List_nth_default0
      | raw_ident_eager_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_List_nth_default0
      end ) (
    fun (t : type.type (base.type.type base)) (idc : ident t)
      (pidc : raw_ident) =>
    match
      idc in (ident t0)
      return
        (option
           match pidc return Type with
           | raw_ident_false0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_false0
           | raw_ident_flat_map =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_flat_map
           | raw_ident_app =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_app
           | raw_ident_map =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_map
           | raw_ident_snd =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_snd
           | raw_ident_fst =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_fst
           | raw_ident_Z0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
           | raw_ident_add =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_add
           | raw_ident_literal0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_literal0
           | raw_ident_nil0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
           | raw_ident_cons0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
           | raw_ident_Some0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
           | raw_ident_None0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_None0
           | raw_ident_pair0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
           | raw_ident_tt0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
           | raw_ident_prod_rect_nodep0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_prod_rect_nodep0
           | raw_ident_bool_rect0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_bool_rect0
           | raw_ident_list_case0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_list_case0
           | raw_ident_option_rect0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_option_rect0
           | raw_ident_nat_rect0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect0
           | raw_ident_eager_nat_rect0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_eager_nat_rect0
           | raw_ident_nat_rect_arrow0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_nat_rect_arrow0
           | raw_ident_eager_nat_rect_arrow0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_eager_nat_rect_arrow0
           | raw_ident_list_rect0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_list_rect0
           | raw_ident_eager_list_rect0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_eager_list_rect0
           | raw_ident_list_rect_arrow0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_list_rect_arrow0
           | raw_ident_eager_list_rect_arrow0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_eager_list_rect_arrow0
           | raw_ident_List_nth_default0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_List_nth_default0
           | raw_ident_eager_List_nth_default0 =>
               @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                 base ident raw_ident raw_ident_infos_of0
                 raw_ident_eager_List_nth_default0
           end)
    with
    | ident_false0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod unit unit) tt
                 (@pair unit unit tt tt))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_flat_map t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_app t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_map t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_snd t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_fst t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_Z0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod unit unit) tt
                 (@pair unit unit tt tt))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_add =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod unit unit) tt
                 (@pair unit unit tt tt))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_literal0 t0 y =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
              (@PrimitiveSigma.Primitive.existT (prod base unit)
                 (fun t1 : prod base unit =>
                  prod unit
                    (prod
                       match @fst base unit t1 return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end unit)) (@pair base unit t0 tt)
                 (@pair unit
                    (prod
                       match
                         @fst base unit (@pair base unit t0 tt) return Type
                       with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end unit) tt
                    (@pair
                       match
                         @fst base unit (@pair base unit t0 tt) return Type
                       with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end unit y tt)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_nil0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_cons0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_Some0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_None0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_pair0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_tt0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod unit unit) tt
                 (@pair unit unit tt tt))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_prod_rect_nodep0 t0 t1 t2 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit)) t0
                       (@pair (base.type.type base)
                          (prod (base.type.type base) unit) t1
                          (@pair (base.type.type base) unit t2 tt))) tt))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_bool_rect0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_list_case0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_option_rect0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_nat_rect0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_eager_nat_rect0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_nat_rect_arrow0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_eager_nat_rect_arrow0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_list_rect0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_eager_list_rect0 t0 t1 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base) unit)) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base) unit) t0
                       (@pair (base.type.type base) unit t1 tt)) tt))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_list_rect_arrow0 t0 t1 t2 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit)) t0
                       (@pair (base.type.type base)
                          (prod (base.type.type base) unit) t1
                          (@pair (base.type.type base) unit t2 tt))) tt))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_eager_list_rect_arrow0 t0 t1 t2 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit =>
                  prod
                    (prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) unit) tt
                 (@pair
                    (prod (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit))) unit
                    (@pair (base.type.type base)
                       (prod (base.type.type base)
                          (prod (base.type.type base) unit)) t0
                       (@pair (base.type.type base)
                          (prod (base.type.type base) unit) t1
                          (@pair (base.type.type base) unit t2 tt))) tt))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_List_nth_default0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        | raw_ident_eager_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
        end
    | ident_eager_List_nth_default0 t0 =>
        match
          pidc as r
          return
            (option
               match r return Type with
               | raw_ident_false0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_false0
               | raw_ident_flat_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_flat_map
               | raw_ident_app =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_app
               | raw_ident_map =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_map
               | raw_ident_snd =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_snd
               | raw_ident_fst =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_fst
               | raw_ident_Z0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Z0
               | raw_ident_add =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_add
               | raw_ident_literal0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_literal0
               | raw_ident_nil0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_nil0
               | raw_ident_cons0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_cons0
               | raw_ident_Some0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_Some0
               | raw_ident_None0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_None0
               | raw_ident_pair0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_pair0
               | raw_ident_tt0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0 raw_ident_tt0
               | raw_ident_prod_rect_nodep0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_prod_rect_nodep0
               | raw_ident_bool_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_bool_rect0
               | raw_ident_list_case0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_case0
               | raw_ident_option_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_option_rect0
               | raw_ident_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect0
               | raw_ident_eager_nat_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect0
               | raw_ident_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_nat_rect_arrow0
               | raw_ident_eager_nat_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_nat_rect_arrow0
               | raw_ident_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect0
               | raw_ident_eager_list_rect0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect0
               | raw_ident_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_list_rect_arrow0
               | raw_ident_eager_list_rect_arrow0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_list_rect_arrow0
               | raw_ident_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_List_nth_default0
               | raw_ident_eager_List_nth_default0 =>
                   @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types
                     base ident raw_ident raw_ident_infos_of0
                     raw_ident_eager_List_nth_default0
               end)
        with
        | raw_ident_false0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_false0)))
        | raw_ident_flat_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_flat_map)))
        | raw_ident_app =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_app)))
        | raw_ident_map =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_map)))
        | raw_ident_snd =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_snd)))
        | raw_ident_fst =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_fst)))
        | raw_ident_Z0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Z0)))
        | raw_ident_add =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_add)))
        | raw_ident_literal0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_literal0)))
        | raw_ident_nil0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nil0)))
        | raw_ident_cons0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_cons0)))
        | raw_ident_Some0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_Some0)))
        | raw_ident_None0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_None0)))
        | raw_ident_pair0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_pair0)))
        | raw_ident_tt0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_tt0)))
        | raw_ident_prod_rect_nodep0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))
        | raw_ident_bool_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_bool_rect0)))
        | raw_ident_list_case0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_case0)))
        | raw_ident_option_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_option_rect0)))
        | raw_ident_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect0)))
        | raw_ident_eager_nat_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))
        | raw_ident_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))
        | raw_ident_eager_nat_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0)))
        | raw_ident_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect0)))
        | raw_ident_eager_list_rect0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect0)))
        | raw_ident_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))
        | raw_ident_eager_list_rect_arrow0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_list_rect_arrow0)))
        | raw_ident_List_nth_default0 =>
            @None
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_List_nth_default0)))
        | raw_ident_eager_List_nth_default0 =>
            @Some
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                 base ident
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 raw_ident_eager_List_nth_default0)))
              (@PrimitiveSigma.Primitive.existT unit
                 (fun _ : unit => prod (prod (base.type.type base) unit) unit)
                 tt
                 (@pair (prod (base.type.type base) unit) unit
                    (@pair (base.type.type base) unit t0 tt) tt))
        end
    end ) in
  let invert_bind_args_unknown0 := mk invert_bind_args_unknown0 (
    forall (t : type.type (base.type.type base)) (_ : ident t)
      (pidc : raw_ident),
    option
      match pidc return Type with
      | raw_ident_false0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_false0
      | raw_ident_flat_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_flat_map
      | raw_ident_app =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_app
      | raw_ident_map =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_map
      | raw_ident_snd =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_snd
      | raw_ident_fst =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_fst
      | raw_ident_Z0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Z0
      | raw_ident_add =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_add
      | raw_ident_literal0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_literal0
      | raw_ident_nil0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nil0
      | raw_ident_cons0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_cons0
      | raw_ident_Some0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_Some0
      | raw_ident_None0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_None0
      | raw_ident_pair0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_pair0
      | raw_ident_tt0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_tt0
      | raw_ident_prod_rect_nodep0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_prod_rect_nodep0
      | raw_ident_bool_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_bool_rect0
      | raw_ident_list_case0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_case0
      | raw_ident_option_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_option_rect0
      | raw_ident_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect0
      | raw_ident_eager_nat_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_nat_rect0
      | raw_ident_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_nat_rect_arrow0
      | raw_ident_eager_nat_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_nat_rect_arrow0
      | raw_ident_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect0
      | raw_ident_eager_list_rect0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_eager_list_rect0
      | raw_ident_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_list_rect_arrow0
      | raw_ident_eager_list_rect_arrow0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_list_rect_arrow0
      | raw_ident_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0 raw_ident_List_nth_default0
      | raw_ident_eager_List_nth_default0 =>
          @IdentifiersLibrary.Compilers.pattern.Raw.ident.prefull_types base
            ident raw_ident raw_ident_infos_of0
            raw_ident_eager_List_nth_default0
      end ) ( raw_invert_bind_args0 ) in idtac.
  let all_pattern_idents0 := mk all_pattern_idents0 (
    list (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T)) ) (
    @cons (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T))
      (@PrimitiveSigma.Primitive.existT Type (fun T : Type => T)
         (pattern_ident
            (@type.base (pattern.base.type.type base)
               (@pattern.base.type.type_base base base_bool0)))
         pattern_ident_false0)
      (@cons (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T))
         (@PrimitiveSigma.Primitive.existT Type (fun T : Type => T)
            (forall t t0 : pattern.base.type.type base,
             pattern_ident
               (@type.arrow (pattern.base.type.type base)
                  (@type.arrow (pattern.base.type.type base)
                     (@type.base (pattern.base.type.type base) t)
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.list base t0)))
                  (@type.arrow (pattern.base.type.type base)
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.list base t))
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.list base t0)))))
            pattern_ident_flat_map)
         (@cons (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T))
            (@PrimitiveSigma.Primitive.existT Type
               (fun T : Type => T)
               (forall t : pattern.base.type.type base,
                pattern_ident
                  (@type.arrow (pattern.base.type.type base)
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.list base t))
                     (@type.arrow (pattern.base.type.type base)
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.list base t))
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.list base t)))))
               pattern_ident_app)
            (@cons (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T))
               (@PrimitiveSigma.Primitive.existT Type
                  (fun T : Type => T)
                  (forall t t0 : pattern.base.type.type base,
                   pattern_ident
                     (@type.arrow (pattern.base.type.type base)
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base) t)
                           (@type.base (pattern.base.type.type base) t0))
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.list base t))
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.list base t0)))))
                  pattern_ident_map)
               (@cons
                  (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T))
                  (@PrimitiveSigma.Primitive.existT Type
                     (fun T : Type => T)
                     (forall t t0 : pattern.base.type.type base,
                      pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.prod base t t0))
                           (@type.base (pattern.base.type.type base) t0)))
                     pattern_ident_snd)
                  (@cons
                     (@PrimitiveSigma.Primitive.sigT Type (fun T : Type => T))
                     (@PrimitiveSigma.Primitive.existT Type
                        (fun T : Type => T)
                        (forall t t0 : pattern.base.type.type base,
                         pattern_ident
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.prod base t t0))
                              (@type.base (pattern.base.type.type base) t)))
                        pattern_ident_fst)
                     (@cons
                        (@PrimitiveSigma.Primitive.sigT Type
                           (fun T : Type => T))
                        (@PrimitiveSigma.Primitive.existT Type
                           (fun T : Type => T)
                           (pattern_ident
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.type_base base base_Z)))
                           pattern_ident_Z0)
                        (@cons
                           (@PrimitiveSigma.Primitive.sigT Type
                              (fun T : Type => T))
                           (@PrimitiveSigma.Primitive.existT Type
                              (fun T : Type => T)
                              (pattern_ident
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.type_base base
                                          base_Z))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@pattern.base.type.type_base base
                                             base_Z))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@pattern.base.type.type_base base
                                             base_Z))))) pattern_ident_add)
                           (@cons
                              (@PrimitiveSigma.Primitive.sigT Type
                                 (fun T : Type => T))
                              (@PrimitiveSigma.Primitive.existT Type
                                 (fun T : Type => T)
                                 (forall t : base,
                                  pattern_ident
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.type_base base t)))
                                 pattern_ident_literal0)
                              (@cons
                                 (@PrimitiveSigma.Primitive.sigT Type
                                    (fun T : Type => T))
                                 (@PrimitiveSigma.Primitive.existT Type
                                    (fun T : Type => T)
                                    (forall t : pattern.base.type.type base,
                                     pattern_ident
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@pattern.base.type.list base t)))
                                    pattern_ident_nil0)
                                 (@cons
                                    (@PrimitiveSigma.Primitive.sigT Type
                                       (fun T : Type => T))
                                    (@PrimitiveSigma.Primitive.existT Type
                                       (fun T : Type => T)
                                       (forall
                                          t : pattern.base.type.type base,
                                        pattern_ident
                                          (@type.arrow
                                             (pattern.base.type.type base)
                                             (@type.base
                                                (pattern.base.type.type base)
                                                t)
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t)))))
                                       pattern_ident_cons0)
                                    (@cons
                                       (@PrimitiveSigma.Primitive.sigT Type
                                          (fun T : Type => T))
                                       (@PrimitiveSigma.Primitive.existT Type
                                          (fun T : Type => T)
                                          (forall
                                             t : pattern.base.type.type base,
                                           pattern_ident
                                             (@type.arrow
                                                (pattern.base.type.type base)
                                                (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.option
                                                 base t))))
                                          pattern_ident_Some0)
                                       (@cons
                                          (@PrimitiveSigma.Primitive.sigT
                                             Type
                                             (fun T : Type => T))
                                          (@PrimitiveSigma.Primitive.existT
                                             Type
                                             (fun T : Type => T)
                                             (forall
                                                t :
                                                 pattern.base.type.type base,
                                              pattern_ident
                                                (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.option
                                                 base t)))
                                             pattern_ident_None0)
                                          (@cons
                                             (@PrimitiveSigma.Primitive.sigT
                                                Type
                                                (fun T : Type => T))
                                             (@PrimitiveSigma.Primitive.existT
                                                Type
                                                (fun T : Type => T)
                                                (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.prod
                                                 base t t0)))))
                                                pattern_ident_pair0)
                                             (@cons
                                                (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (pattern_ident
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))) pattern_ident_tt0)
                                                (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1)))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.prod
                                                 base t t0))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))))
                                                 pattern_ident_prod_rect_nodep0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_bool0))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))))
                                                 pattern_ident_bool_rect0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)))))
                                                 pattern_ident_list_case0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.option
                                                 base t))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)))))
                                                 pattern_ident_option_rect0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))))
                                                 pattern_ident_nat_rect0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))))
                                                 pattern_ident_eager_nat_rect0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))))))
                                                 pattern_ident_nat_rect_arrow0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))))))
                                                 pattern_ident_eager_nat_rect_arrow0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)))))
                                                 pattern_ident_list_rect0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t
                                                 t0 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.unit
                                                 base))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0))))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)))))
                                                 pattern_ident_eager_list_rect0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1)))))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))))))
                                                 pattern_ident_list_rect_arrow0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t t0
                                                 t1 :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1)))))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t0)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t1))))))
                                                 pattern_ident_eager_list_rect_arrow0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))))
                                                 pattern_ident_List_nth_default0)
                                                 (@cons
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T))
                                                 (@PrimitiveSigma.Primitive.existT
                                                 Type
                                                 (fun T : Type => T)
                                                 (forall
                                                 t :
                                                 pattern.base.type.type base,
                                                 pattern_ident
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.list
                                                 base t))
                                                 (@type.arrow
                                                 (pattern.base.type.type base)
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 (@pattern.base.type.type_base
                                                 base base_nat0))
                                                 (@type.base
                                                 (pattern.base.type.type base)
                                                 t)))))
                                                 pattern_ident_eager_List_nth_default0)
                                                 (@nil
                                                 (@PrimitiveSigma.Primitive.sigT
                                                 Type
                                                 (fun T : Type => T)))))))))))))))))))))))))))))))
    ) in
  let eta_ident_cps_gen4 := mk eta_ident_cps_gen4 (
    forall
      (T : forall (t : type.type (pattern.base.type.type base))
             (_ : pattern_ident t), Type)
      (f : forall (t : type.type (pattern.base.type.type base))
             (idc : pattern_ident t), T t idc),
    @sig
      (forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), T t idc)
      (fun
         f' : forall (t : type.type (pattern.base.type.type base))
                (idc : pattern_ident t), T t idc =>
       forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), @eq (T t idc) (f' t idc) (f t idc)) ) (
    fun
      (T : forall (t : type.type (pattern.base.type.type base))
             (_ : pattern_ident t), Type)
      (f : forall (t : type.type (pattern.base.type.type base))
             (idc : pattern_ident t), T t idc) =>
    @exist
      (forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), T t idc)
      (fun
         f' : forall (t : type.type (pattern.base.type.type base))
                (idc : pattern_ident t), T t idc =>
       forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), @eq (T t idc) (f' t idc) (f t idc))
      (fun (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t) =>
       match idc as p in (pattern_ident t0) return (T t0 p) with
       | pattern_ident_false0 =>
           f
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.type_base base base_bool0))
             pattern_ident_false0
       | pattern_ident_flat_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t3)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t2))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t3))))
              (pattern_ident_flat_map t2 t3)) t0 t1
       | pattern_ident_app t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))))
              (pattern_ident_app t1)) t0
       | pattern_ident_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t2))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t3))))
              (pattern_ident_map t2 t3)) t0 t1
       | pattern_ident_snd t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.prod base t2 t3))
                 (@type.base (pattern.base.type.type base) t3))
              (pattern_ident_snd t2 t3)) t0 t1
       | pattern_ident_fst t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.prod base t2 t3))
                 (@type.base (pattern.base.type.type base) t2))
              (pattern_ident_fst t2 t3)) t0 t1
       | pattern_ident_Z0 =>
           f
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.type_base base base_Z)) pattern_ident_Z0
       | pattern_ident_add =>
           f
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))))
             pattern_ident_add
       | pattern_ident_literal0 t0 =>
           (fun t1 : base =>
            f
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.type_base base t1))
              (pattern_ident_literal0 t1)) t0
       | pattern_ident_nil0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.list base t1))
              (pattern_ident_nil0 t1)) t0
       | pattern_ident_cons0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))))
              (pattern_ident_cons0 t1)) t0
       | pattern_ident_Some0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.option base t1)))
              (pattern_ident_Some0 t1)) t0
       | pattern_ident_None0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.option base t1))
              (pattern_ident_None0 t1)) t0
       | pattern_ident_pair0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t2)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t3)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))))
              (pattern_ident_pair0 t2 t3)) t0 t1
       | pattern_ident_tt0 =>
           f
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.unit base)) pattern_ident_tt0
       | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t3)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t3 t4))
                    (@type.base (pattern.base.type.type base) t5)))
              (pattern_ident_prod_rect_nodep0 t3 t4 t5)) t0 t1 t2
       | pattern_ident_bool_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_bool0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_bool_rect0 t1)) t0
       | pattern_ident_list_case0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_list_case0 t2 t3)) t0 t1
       | pattern_ident_option_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.option base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_option_rect0 t2 t3)) t0 t1
       | pattern_ident_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t1)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_nat_rect0 t1)) t0
       | pattern_ident_eager_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t1)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_eager_nat_rect0 t1)) t0
       | pattern_ident_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3)))))
              (pattern_ident_nat_rect_arrow0 t2 t3)) t0 t1
       | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3)))))
              (pattern_ident_eager_nat_rect_arrow0 t2 t3)) t0 t1
       | pattern_ident_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t3)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_list_rect0 t2 t3)) t0 t1
       | pattern_ident_eager_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t3)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_eager_list_rect0 t2 t3)) t0 t1
       | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t4)
                    (@type.base (pattern.base.type.type base) t5))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5)))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))))
              (pattern_ident_list_rect_arrow0 t3 t4 t5)) t0 t1 t2
       | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t4)
                    (@type.base (pattern.base.type.type base) t5))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5)))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))))
              (pattern_ident_eager_list_rect_arrow0 t3 t4 t5)) t0 t1 t2
       | pattern_ident_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_List_nth_default0 t1)) t0
       | pattern_ident_eager_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_eager_List_nth_default0 t1)) t0
       end)
      (fun (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t) =>
       match
         idc as p in (pattern_ident t0)
         return
           (@eq (T t0 p)
              match p as p0 in (pattern_ident t1) return (T t1 p0) with
              | pattern_ident_false0 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_bool0))
                    pattern_ident_false0
              | pattern_ident_flat_map t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))))
                    (pattern_ident_flat_map t1 t2)
              | pattern_ident_app t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))))
                    (pattern_ident_app t1)
              | pattern_ident_map t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))))
                    (pattern_ident_map t1 t2)
              | pattern_ident_snd t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t1 t2))
                       (@type.base (pattern.base.type.type base) t2))
                    (pattern_ident_snd t1 t2)
              | pattern_ident_fst t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t1 t2))
                       (@type.base (pattern.base.type.type base) t1))
                    (pattern_ident_fst t1 t2)
              | pattern_ident_Z0 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_Z))
                    pattern_ident_Z0
              | pattern_ident_add =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_Z))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_Z))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_Z))))
                    pattern_ident_add
              | pattern_ident_literal0 t1 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base t1))
                    (pattern_ident_literal0 t1)
              | pattern_ident_nil0 t1 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (pattern_ident_nil0 t1)
              | pattern_ident_cons0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))))
                    (pattern_ident_cons0 t1)
              | pattern_ident_Some0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.option base t1)))
                    (pattern_ident_Some0 t1)
              | pattern_ident_None0 t1 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base t1))
                    (pattern_ident_None0 t1)
              | pattern_ident_pair0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.prod base t1 t2))))
                    (pattern_ident_pair0 t1 t2)
              | pattern_ident_tt0 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base)) pattern_ident_tt0
              | pattern_ident_prod_rect_nodep0 t1 t2 t3 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.prod base t1 t2))
                          (@type.base (pattern.base.type.type base) t3)))
                    (pattern_ident_prod_rect_nodep0 t1 t2 t3)
              | pattern_ident_bool_rect0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.unit base))
                             (@type.base (pattern.base.type.type base) t1))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_bool0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_bool_rect0 t1)
              | pattern_ident_list_case0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.base (pattern.base.type.type base) t2)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_list_case0 t1 t2)
              | pattern_ident_option_rect0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.unit base))
                             (@type.base (pattern.base.type.type base) t2))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.option base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_option_rect0 t1 t2)
              | pattern_ident_nat_rect0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t1)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_nat_rect0 t1)
              | pattern_ident_eager_nat_rect0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t1)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_eager_nat_rect0 t1)
              | pattern_ident_nat_rect_arrow0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t2)))))
                    (pattern_ident_nat_rect_arrow0 t1 t2)
              | pattern_ident_eager_nat_rect_arrow0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t2)))))
                    (pattern_ident_eager_nat_rect_arrow0 t1 t2)
              | pattern_ident_list_rect0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t2)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_list_rect0 t1 t2)
              | pattern_ident_eager_list_rect0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t2)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_eager_list_rect0 t1 t2)
              | pattern_ident_list_rect_arrow0 t1 t2 t3 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3))
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3)))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3)))))
                    (pattern_ident_list_rect_arrow0 t1 t2 t3)
              | pattern_ident_eager_list_rect_arrow0 t1 t2 t3 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3))
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3)))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3)))))
                    (pattern_ident_eager_list_rect_arrow0 t1 t2 t3)
              | pattern_ident_List_nth_default0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_List_nth_default0 t1)
              | pattern_ident_eager_List_nth_default0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_eager_List_nth_default0 t1)
              end (f t0 p))
       with
       | pattern_ident_false0 =>
           @eq_refl
             (T
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_bool0))
                pattern_ident_false0)
             (f
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_bool0))
                pattern_ident_false0)
       | pattern_ident_flat_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_flat_map t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_flat_map t2 t3))) t0 t1
       | pattern_ident_app t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_app t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_app t1))) t0
       | pattern_ident_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_map t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_map t2 t3))) t0 t1
       | pattern_ident_snd t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t3))
                 (pattern_ident_snd t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t3))
                 (pattern_ident_snd t2 t3))) t0 t1
       | pattern_ident_fst t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t2))
                 (pattern_ident_fst t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t2))
                 (pattern_ident_fst t2 t3))) t0 t1
       | pattern_ident_Z0 =>
           @eq_refl
             (T
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                pattern_ident_Z0)
             (f
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                pattern_ident_Z0)
       | pattern_ident_add =>
           @eq_refl
             (T
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))))
                pattern_ident_add)
             (f
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))))
                pattern_ident_add)
       | pattern_ident_literal0 t0 =>
           (fun t1 : base =>
            @eq_refl
              (T
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.type_base base t1))
                 (pattern_ident_literal0 t1))
              (f
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.type_base base t1))
                 (pattern_ident_literal0 t1))) t0
       | pattern_ident_nil0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base t1))
                 (pattern_ident_nil0 t1))
              (f
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base t1))
                 (pattern_ident_nil0 t1))) t0
       | pattern_ident_cons0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_cons0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_cons0 t1))) t0
       | pattern_ident_Some0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base t1)))
                 (pattern_ident_Some0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base t1)))
                 (pattern_ident_Some0 t1))) t0
       | pattern_ident_None0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.option base t1))
                 (pattern_ident_None0 t1))
              (f
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.option base t1))
                 (pattern_ident_None0 t1))) t0
       | pattern_ident_pair0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t2 t3))))
                 (pattern_ident_pair0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t2 t3))))
                 (pattern_ident_pair0 t2 t3))) t0 t1
       | pattern_ident_tt0 =>
           @eq_refl
             (T
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base)) pattern_ident_tt0)
             (f
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base)) pattern_ident_tt0)
       | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t3 t4))
                       (@type.base (pattern.base.type.type base) t5)))
                 (pattern_ident_prod_rect_nodep0 t3 t4 t5))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t3 t4))
                       (@type.base (pattern.base.type.type base) t5)))
                 (pattern_ident_prod_rect_nodep0 t3 t4 t5))) t0 t1 t2
       | pattern_ident_bool_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_bool0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_bool_rect0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_bool0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_bool_rect0 t1))) t0
       | pattern_ident_list_case0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.base (pattern.base.type.type base) t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_case0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.base (pattern.base.type.type base) t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_case0 t2 t3))) t0 t1
       | pattern_ident_option_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.option base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_option_rect0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.option base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_option_rect0 t2 t3))) t0 t1
       | pattern_ident_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_nat_rect0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_nat_rect0 t1))) t0
       | pattern_ident_eager_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_nat_rect0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_nat_rect0 t1))) t0
       | pattern_ident_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_nat_rect_arrow0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_nat_rect_arrow0 t2 t3))) t0 t1
       | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_eager_nat_rect_arrow0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_eager_nat_rect_arrow0 t2 t3))) t0 t1
       | pattern_ident_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_rect0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_rect0 t2 t3))) t0 t1
       | pattern_ident_eager_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_eager_list_rect0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_eager_list_rect0 t2 t3))) t0 t1
       | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_list_rect_arrow0 t3 t4 t5))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_list_rect_arrow0 t3 t4 t5))) t0 t1 t2
       | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_eager_list_rect_arrow0 t3 t4 t5))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_eager_list_rect_arrow0 t3 t4 t5))) t0 t1 t2
       | pattern_ident_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_List_nth_default0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_List_nth_default0 t1))) t0
       | pattern_ident_eager_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_List_nth_default0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_List_nth_default0 t1))) t0
       end) ) in
  let eta_ident_cps_gen_expand_literal2 := mk eta_ident_cps_gen_expand_literal2 (
    forall
      (T : forall (t : type.type (pattern.base.type.type base))
             (_ : pattern_ident t), Type)
      (f : forall (t : type.type (pattern.base.type.type base))
             (idc : pattern_ident t), T t idc),
    @sig
      (forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), T t idc)
      (fun
         f' : forall (t : type.type (pattern.base.type.type base))
                (idc : pattern_ident t), T t idc =>
       forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), @eq (T t idc) (f' t idc) (f t idc)) ) (
    fun
      (T : forall (t : type.type (pattern.base.type.type base))
             (_ : pattern_ident t), Type)
      (f : forall (t : type.type (pattern.base.type.type base))
             (idc : pattern_ident t), T t idc) =>
    @exist
      (forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), T t idc)
      (fun
         f' : forall (t : type.type (pattern.base.type.type base))
                (idc : pattern_ident t), T t idc =>
       forall (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t), @eq (T t idc) (f' t idc) (f t idc))
      (fun (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t) =>
       match idc as p in (pattern_ident t0) return (T t0 p) with
       | pattern_ident_false0 =>
           f
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.type_base base base_bool0))
             pattern_ident_false0
       | pattern_ident_flat_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t3)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t2))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t3))))
              (pattern_ident_flat_map t2 t3)) t0 t1
       | pattern_ident_app t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))))
              (pattern_ident_app t1)) t0
       | pattern_ident_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t2))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t3))))
              (pattern_ident_map t2 t3)) t0 t1
       | pattern_ident_snd t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.prod base t2 t3))
                 (@type.base (pattern.base.type.type base) t3))
              (pattern_ident_snd t2 t3)) t0 t1
       | pattern_ident_fst t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.prod base t2 t3))
                 (@type.base (pattern.base.type.type base) t2))
              (pattern_ident_fst t2 t3)) t0 t1
       | pattern_ident_Z0 =>
           f
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.type_base base base_Z)) pattern_ident_Z0
       | pattern_ident_add =>
           f
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))))
             pattern_ident_add
       | pattern_ident_literal0 t0 =>
           (fun t1 : base =>
            match
              t1 as b
              return
                (T
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base b))
                   (pattern_ident_literal0 b))
            with
            | base_Z =>
                f
                  (@type.base (pattern.base.type.type base)
                     (@pattern.base.type.type_base base base_Z))
                  (pattern_ident_literal0 base_Z)
            | base_nat0 =>
                f
                  (@type.base (pattern.base.type.type base)
                     (@pattern.base.type.type_base base base_nat0))
                  (pattern_ident_literal0 base_nat0)
            | base_bool0 =>
                f
                  (@type.base (pattern.base.type.type base)
                     (@pattern.base.type.type_base base base_bool0))
                  (pattern_ident_literal0 base_bool0)
            end) t0
       | pattern_ident_nil0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.list base t1))
              (pattern_ident_nil0 t1)) t0
       | pattern_ident_cons0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))))
              (pattern_ident_cons0 t1)) t0
       | pattern_ident_Some0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.option base t1)))
              (pattern_ident_Some0 t1)) t0
       | pattern_ident_None0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.option base t1))
              (pattern_ident_None0 t1)) t0
       | pattern_ident_pair0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t2)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t3)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))))
              (pattern_ident_pair0 t2 t3)) t0 t1
       | pattern_ident_tt0 =>
           f
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.unit base)) pattern_ident_tt0
       | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t3)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t3 t4))
                    (@type.base (pattern.base.type.type base) t5)))
              (pattern_ident_prod_rect_nodep0 t3 t4 t5)) t0 t1 t2
       | pattern_ident_bool_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_bool0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_bool_rect0 t1)) t0
       | pattern_ident_list_case0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_list_case0 t2 t3)) t0 t1
       | pattern_ident_option_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.option base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_option_rect0 t2 t3)) t0 t1
       | pattern_ident_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t1)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_nat_rect0 t1)) t0
       | pattern_ident_eager_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t1))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t1)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_eager_nat_rect0 t1)) t0
       | pattern_ident_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3)))))
              (pattern_ident_nat_rect_arrow0 t2 t3)) t0 t1
       | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3)))))
              (pattern_ident_eager_nat_rect_arrow0 t2 t3)) t0 t1
       | pattern_ident_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t3)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_list_rect0 t2 t3)) t0 t1
       | pattern_ident_eager_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base) t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t3)
                             (@type.base (pattern.base.type.type base) t3))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base) t3))))
              (pattern_ident_eager_list_rect0 t2 t3)) t0 t1
       | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t4)
                    (@type.base (pattern.base.type.type base) t5))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5)))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))))
              (pattern_ident_list_rect_arrow0 t3 t4 t5)) t0 t1 t2
       | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t4)
                    (@type.base (pattern.base.type.type base) t5))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t4)
                                (@type.base (pattern.base.type.type base) t5)))))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))))
              (pattern_ident_eager_list_rect_arrow0 t3 t4 t5)) t0 t1 t2
       | pattern_ident_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_List_nth_default0 t1)) t0
       | pattern_ident_eager_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            f
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base) t1)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_nat0))
                       (@type.base (pattern.base.type.type base) t1))))
              (pattern_ident_eager_List_nth_default0 t1)) t0
       end)
      (fun (t : type.type (pattern.base.type.type base))
         (idc : pattern_ident t) =>
       match
         idc as p in (pattern_ident t0)
         return
           (@eq (T t0 p)
              match p as p0 in (pattern_ident t1) return (T t1 p0) with
              | pattern_ident_false0 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_bool0))
                    pattern_ident_false0
              | pattern_ident_flat_map t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))))
                    (pattern_ident_flat_map t1 t2)
              | pattern_ident_app t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))))
                    (pattern_ident_app t1)
              | pattern_ident_map t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))))
                    (pattern_ident_map t1 t2)
              | pattern_ident_snd t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t1 t2))
                       (@type.base (pattern.base.type.type base) t2))
                    (pattern_ident_snd t1 t2)
              | pattern_ident_fst t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t1 t2))
                       (@type.base (pattern.base.type.type base) t1))
                    (pattern_ident_fst t1 t2)
              | pattern_ident_Z0 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_Z))
                    pattern_ident_Z0
              | pattern_ident_add =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.type_base base base_Z))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_Z))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_Z))))
                    pattern_ident_add
              | pattern_ident_literal0 t1 =>
                  match
                    t1 as b
                    return
                      (T
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base b))
                         (pattern_ident_literal0 b))
                  with
                  | base_Z =>
                      f
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.type_base base base_Z))
                        (pattern_ident_literal0 base_Z)
                  | base_nat0 =>
                      f
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.type_base base base_nat0))
                        (pattern_ident_literal0 base_nat0)
                  | base_bool0 =>
                      f
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.type_base base base_bool0))
                        (pattern_ident_literal0 base_bool0)
                  end
              | pattern_ident_nil0 t1 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (pattern_ident_nil0 t1)
              | pattern_ident_cons0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))))
                    (pattern_ident_cons0 t1)
              | pattern_ident_Some0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.option base t1)))
                    (pattern_ident_Some0 t1)
              | pattern_ident_None0 t1 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base t1))
                    (pattern_ident_None0 t1)
              | pattern_ident_pair0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.prod base t1 t2))))
                    (pattern_ident_pair0 t1 t2)
              | pattern_ident_tt0 =>
                  f
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base)) pattern_ident_tt0
              | pattern_ident_prod_rect_nodep0 t1 t2 t3 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.prod base t1 t2))
                          (@type.base (pattern.base.type.type base) t3)))
                    (pattern_ident_prod_rect_nodep0 t1 t2 t3)
              | pattern_ident_bool_rect0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.unit base))
                             (@type.base (pattern.base.type.type base) t1))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_bool0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_bool_rect0 t1)
              | pattern_ident_list_case0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.base (pattern.base.type.type base) t2)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_list_case0 t1 t2)
              | pattern_ident_option_rect0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.unit base))
                             (@type.base (pattern.base.type.type base) t2))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.option base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_option_rect0 t1 t2)
              | pattern_ident_nat_rect0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t1)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_nat_rect0 t1)
              | pattern_ident_eager_nat_rect0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t1)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_eager_nat_rect0 t1)
              | pattern_ident_nat_rect_arrow0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t2)))))
                    (pattern_ident_nat_rect_arrow0 t1 t2)
              | pattern_ident_eager_nat_rect_arrow0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t1)
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t1)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t1)
                                (@type.base (pattern.base.type.type base) t2)))))
                    (pattern_ident_eager_nat_rect_arrow0 t1 t2)
              | pattern_ident_list_rect0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t2)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_list_rect0 t1 t2)
              | pattern_ident_eager_list_rect0 t1 t2 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t2))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t2)
                                   (@type.base (pattern.base.type.type base)
                                      t2))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.base (pattern.base.type.type base) t2))))
                    (pattern_ident_eager_list_rect0 t1 t2)
              | pattern_ident_list_rect_arrow0 t1 t2 t3 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3))
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3)))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3)))))
                    (pattern_ident_list_rect_arrow0 t1 t2 t3)
              | pattern_ident_eager_list_rect_arrow0 t1 t2 t3 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base)
                                   (@pattern.base.type.list base t1))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3))
                                   (@type.arrow (pattern.base.type.type base)
                                      (@type.base
                                         (pattern.base.type.type base) t2)
                                      (@type.base
                                         (pattern.base.type.type base) t3)))))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t1))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3)))))
                    (pattern_ident_eager_list_rect_arrow0 t1 t2 t3)
              | pattern_ident_List_nth_default0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_List_nth_default0 t1)
              | pattern_ident_eager_List_nth_default0 t1 =>
                  f
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t1)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t1))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.type_base base base_nat0))
                             (@type.base (pattern.base.type.type base) t1))))
                    (pattern_ident_eager_List_nth_default0 t1)
              end (f t0 p))
       with
       | pattern_ident_false0 =>
           @eq_refl
             (T
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_bool0))
                pattern_ident_false0)
             (f
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_bool0))
                pattern_ident_false0)
       | pattern_ident_flat_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_flat_map t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_flat_map t2 t3))) t0 t1
       | pattern_ident_app t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_app t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_app t1))) t0
       | pattern_ident_map t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_map t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t2))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t3))))
                 (pattern_ident_map t2 t3))) t0 t1
       | pattern_ident_snd t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t3))
                 (pattern_ident_snd t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t3))
                 (pattern_ident_snd t2 t3))) t0 t1
       | pattern_ident_fst t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t2))
                 (pattern_ident_fst t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.prod base t2 t3))
                    (@type.base (pattern.base.type.type base) t2))
                 (pattern_ident_fst t2 t3))) t0 t1
       | pattern_ident_Z0 =>
           @eq_refl
             (T
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                pattern_ident_Z0)
             (f
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                pattern_ident_Z0)
       | pattern_ident_add =>
           @eq_refl
             (T
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))))
                pattern_ident_add)
             (f
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))))
                pattern_ident_add)
       | pattern_ident_literal0 t0 =>
           (fun t1 : base =>
            match
              t1 as b
              return
                (@eq
                   (T
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base b))
                      (pattern_ident_literal0 b))
                   match
                     b as b0
                     return
                       (T
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base b0))
                          (pattern_ident_literal0 b0))
                   with
                   | base_Z =>
                       f
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_Z))
                         (pattern_ident_literal0 base_Z)
                   | base_nat0 =>
                       f
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (pattern_ident_literal0 base_nat0)
                   | base_bool0 =>
                       f
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_bool0))
                         (pattern_ident_literal0 base_bool0)
                   end
                   (f
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base b))
                      (pattern_ident_literal0 b)))
            with
            | base_Z =>
                @eq_refl
                  (T
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.type_base base base_Z))
                     (pattern_ident_literal0 base_Z))
                  (f
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.type_base base base_Z))
                     (pattern_ident_literal0 base_Z))
            | base_nat0 =>
                @eq_refl
                  (T
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.type_base base base_nat0))
                     (pattern_ident_literal0 base_nat0))
                  (f
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.type_base base base_nat0))
                     (pattern_ident_literal0 base_nat0))
            | base_bool0 =>
                @eq_refl
                  (T
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.type_base base base_bool0))
                     (pattern_ident_literal0 base_bool0))
                  (f
                     (@type.base (pattern.base.type.type base)
                        (@pattern.base.type.type_base base base_bool0))
                     (pattern_ident_literal0 base_bool0))
            end) t0
       | pattern_ident_nil0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base t1))
                 (pattern_ident_nil0 t1))
              (f
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base t1))
                 (pattern_ident_nil0 t1))) t0
       | pattern_ident_cons0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_cons0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))))
                 (pattern_ident_cons0 t1))) t0
       | pattern_ident_Some0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base t1)))
                 (pattern_ident_Some0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base t1)))
                 (pattern_ident_Some0 t1))) t0
       | pattern_ident_None0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.option base t1))
                 (pattern_ident_None0 t1))
              (f
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.option base t1))
                 (pattern_ident_None0 t1))) t0
       | pattern_ident_pair0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t2 t3))))
                 (pattern_ident_pair0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t2)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t2 t3))))
                 (pattern_ident_pair0 t2 t3))) t0 t1
       | pattern_ident_tt0 =>
           @eq_refl
             (T
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base)) pattern_ident_tt0)
             (f
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base)) pattern_ident_tt0)
       | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t3 t4))
                       (@type.base (pattern.base.type.type base) t5)))
                 (pattern_ident_prod_rect_nodep0 t3 t4 t5))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t3)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t4)
                          (@type.base (pattern.base.type.type base) t5)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.prod base t3 t4))
                       (@type.base (pattern.base.type.type base) t5)))
                 (pattern_ident_prod_rect_nodep0 t3 t4 t5))) t0 t1 t2
       | pattern_ident_bool_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_bool0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_bool_rect0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_bool0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_bool_rect0 t1))) t0
       | pattern_ident_list_case0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.base (pattern.base.type.type base) t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_case0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.base (pattern.base.type.type base) t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_case0 t2 t3))) t0 t1
       | pattern_ident_option_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.option base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_option_rect0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.unit base))
                          (@type.base (pattern.base.type.type base) t3))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.option base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_option_rect0 t2 t3))) t0 t1
       | pattern_ident_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_nat_rect0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_nat_rect0 t1))) t0
       | pattern_ident_eager_nat_rect0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_nat_rect0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t1))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t1)
                             (@type.base (pattern.base.type.type base) t1)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_nat_rect0 t1))) t0
       | pattern_ident_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_nat_rect_arrow0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_nat_rect_arrow0 t2 t3))) t0 t1
       | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_eager_nat_rect_arrow0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t2)
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t2)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t2)
                             (@type.base (pattern.base.type.type base) t3)))))
                 (pattern_ident_eager_nat_rect_arrow0 t2 t3))) t0 t1
       | pattern_ident_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_rect0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_list_rect0 t2 t3))) t0 t1
       | pattern_ident_eager_list_rect0 t0 t1 =>
           (fun t2 t3 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_eager_list_rect0 t2 t3))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.unit base))
                       (@type.base (pattern.base.type.type base) t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t2)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t2))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.base (pattern.base.type.type base) t3)
                                (@type.base (pattern.base.type.type base) t3))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t2))
                          (@type.base (pattern.base.type.type base) t3))))
                 (pattern_ident_eager_list_rect0 t2 t3))) t0 t1
       | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_list_rect_arrow0 t3 t4 t5))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_list_rect_arrow0 t3 t4 t5))) t0 t1 t2
       | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
           (fun t3 t4 t5 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_eager_list_rect_arrow0 t3 t4 t5))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base) t4)
                       (@type.base (pattern.base.type.type base) t5))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base) t3)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@pattern.base.type.list base t3))
                             (@type.arrow (pattern.base.type.type base)
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5))
                                (@type.arrow (pattern.base.type.type base)
                                   (@type.base (pattern.base.type.type base)
                                      t4)
                                   (@type.base (pattern.base.type.type base)
                                      t5)))))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.list base t3))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base) t4)
                             (@type.base (pattern.base.type.type base) t5)))))
                 (pattern_ident_eager_list_rect_arrow0 t3 t4 t5))) t0 t1 t2
       | pattern_ident_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_List_nth_default0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_List_nth_default0 t1))) t0
       | pattern_ident_eager_List_nth_default0 t0 =>
           (fun t1 : pattern.base.type.type base =>
            @eq_refl
              (T
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_List_nth_default0 t1))
              (f
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base) t1)
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base t1))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@pattern.base.type.type_base base base_nat0))
                          (@type.base (pattern.base.type.type base) t1))))
                 (pattern_ident_eager_List_nth_default0 t1))) t0
       end) ) in
  let split_types0 := mk split_types0 (
    forall (t : type.type (pattern.base.type.type base))
      (_ : pattern_ident t),
    @PrimitiveSigma.Primitive.sigT raw_ident
      (fun ridc : raw_ident =>
       prod
         (@fold_right Type Type (fun A B : Type => prod A B) unit
            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
                  (raw_ident_infos_of0 ridc))))
         (@fold_right Type Type (fun A B : Type => prod A B) unit
            (@map IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
               Type
               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                  base)
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types _
                  _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _ (raw_ident_infos_of0 ridc)))))) ) (
    fun (t : type.type (pattern.base.type.type base)) (idc : pattern_ident t)
    =>
    match
      idc in (pattern_ident t0)
      return
        (@PrimitiveSigma.Primitive.sigT raw_ident
           (fun ridc : raw_ident =>
            prod
              (@fold_right Type Type (fun A B : Type => prod A B) unit
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                    _
                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                       _ _ (raw_ident_infos_of0 ridc))))
              (@fold_right Type Type (fun A B : Type => prod A B) unit
                 (@map
                    IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                    Type
                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                       base)
                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                       _ _
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                          _ _ (raw_ident_infos_of0 ridc)))))))
    with
    | pattern_ident_false0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_false0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@nil Type)) tt tt)
    | pattern_ident_flat_map t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_flat_map
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_app t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_app
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_map t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_map
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_snd t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_snd
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_fst t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_fst
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_Z0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_Z0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@nil Type)) tt tt)
    | pattern_ident_add =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_add
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@nil Type)) tt tt)
    | pattern_ident_literal0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_literal0
          (@pair
             (prod base
                (@fold_right Type Type (fun A B : Type => prod A B) unit
                   (@nil Type)))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@nil Type))
             (@pair base
                (@fold_right Type Type (fun A B : Type => prod A B) unit
                   (@nil Type)) t0 tt) tt)
    | pattern_ident_nil0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_nil0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_cons0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_cons0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_Some0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_Some0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_None0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_None0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_pair0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_pair0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_tt0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc)))))) raw_ident_tt0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@nil Type)) tt tt)
    | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_prod_rect_nodep0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base)
                      (@cons Type (pattern.base.type.type base) (@nil Type)))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base)
                   (prod (pattern.base.type.type base) unit)) t0
                (@pair (pattern.base.type.type base)
                   (prod (pattern.base.type.type base) unit) t1
                   (@pair (pattern.base.type.type base) unit t2 tt))))
    | pattern_ident_bool_rect0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_bool_rect0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_list_case0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_list_case0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_option_rect0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_option_rect0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_nat_rect0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_nat_rect0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_eager_nat_rect0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_eager_nat_rect0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_nat_rect_arrow0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_nat_rect_arrow0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_eager_nat_rect_arrow0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_list_rect0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_list_rect0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_eager_list_rect0 t0 t1 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_eager_list_rect0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base) (@nil Type))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base) unit) t0
                (@pair (pattern.base.type.type base) unit t1 tt)))
    | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_list_rect_arrow0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base)
                      (@cons Type (pattern.base.type.type base) (@nil Type)))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base)
                   (prod (pattern.base.type.type base) unit)) t0
                (@pair (pattern.base.type.type base)
                   (prod (pattern.base.type.type base) unit) t1
                   (@pair (pattern.base.type.type base) unit t2 tt))))
    | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_eager_list_rect_arrow0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base)
                   (@cons Type (pattern.base.type.type base)
                      (@cons Type (pattern.base.type.type base) (@nil Type)))))
             tt
             (@pair (pattern.base.type.type base)
                (prod (pattern.base.type.type base)
                   (prod (pattern.base.type.type base) unit)) t0
                (@pair (pattern.base.type.type base)
                   (prod (pattern.base.type.type base) unit) t1
                   (@pair (pattern.base.type.type base) unit t2 tt))))
    | pattern_ident_List_nth_default0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_List_nth_default0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    | pattern_ident_eager_List_nth_default0 t0 =>
        @PrimitiveSigma.Primitive.existT raw_ident
          (fun ridc : raw_ident =>
           prod
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _
                   _
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                      _ _ (raw_ident_infos_of0 ridc))))
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@map
                   IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                   Type
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base)
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 ridc))))))
          raw_ident_eager_List_nth_default0
          (@pair unit
             (@fold_right Type Type (fun A B : Type => prod A B) unit
                (@cons Type (pattern.base.type.type base) (@nil Type))) tt
             (@pair (pattern.base.type.type base) unit t0 tt))
    end ) in idtac.
  let add_types_from_raw_sig0 := mk add_types_from_raw_sig0 (
    forall (ridc : raw_ident)
      (dt : @fold_right Type Type (fun A B : Type => prod A B) unit
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 ridc))))
      (idt : @fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc))))),
    @PrimitiveSigma.Primitive.sigT (type.type (pattern.base.type.type base))
      (fun t : type.type (pattern.base.type.type base) =>
       @sig (pattern_ident t)
         (fun idc : pattern_ident t =>
          @eq
            (@PrimitiveSigma.Primitive.sigT raw_ident
               (fun ridc0 : raw_ident =>
                prod
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _ (raw_ident_infos_of0 ridc0))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc0)))))))
            (split_types0 t idc)
            (@PrimitiveSigma.Primitive.existT raw_ident
               (fun ridc0 : raw_ident =>
                prod
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _ (raw_ident_infos_of0 ridc0))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc0)))))) ridc
               (@pair
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _ (raw_ident_infos_of0 ridc))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 ridc))))) dt idt)))) ) (
    fun (ridc : raw_ident)
      (dt : @fold_right Type Type (fun A B : Type => prod A B) unit
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                    _ (raw_ident_infos_of0 ridc))))
      (idt : @fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _ (raw_ident_infos_of0 ridc))))) =>
    match
      ridc as r
      return
        (forall
           (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                       _ _
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                          _ _ (raw_ident_infos_of0 r))))
           (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _ (raw_ident_infos_of0 r))))),
         @PrimitiveSigma.Primitive.sigT
           (type.type (pattern.base.type.type base))
           (fun t : type.type (pattern.base.type.type base) =>
            @sig (pattern_ident t)
              (fun idc : pattern_ident t =>
               @eq
                 (@PrimitiveSigma.Primitive.sigT raw_ident
                    (fun ridc0 : raw_ident =>
                     prod
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                             _ _
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                _ _ (raw_ident_infos_of0 ridc0))))
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@map
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                             Type
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base)
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 ridc0)))))))
                 (split_types0 t idc)
                 (@PrimitiveSigma.Primitive.existT raw_ident
                    (fun ridc0 : raw_ident =>
                     prod
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                             _ _
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                _ _ (raw_ident_infos_of0 ridc0))))
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@map
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                             Type
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base)
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 ridc0)))))) r
                    (@pair
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                             _ _
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                _ _ (raw_ident_infos_of0 r))))
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@map
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                             Type
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base)
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 r))))) dt0 idt0)))))
    with
    | raw_ident_false0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_false0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_false0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_false0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_false0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_false0)))))
                      dt0 idt0))))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.type_base base base_bool0))
          (@exist
             (pattern_ident
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_bool0)))
             (fun
                idc : pattern_ident
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.type_base base base_bool0)) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_bool0)) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_false0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_false0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_false0)))))
                      dt0 idt0))) pattern_ident_false0
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_false0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_false0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_false0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@nil Type)) tt tt)
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_false0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_false0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_false0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_false0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type)) tt tt)
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_false0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_false0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_false0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_false0))))
                         tt
                   end
                   match
                     idt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@map
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                Type
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base)
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                   _ _
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _
                                      (raw_ident_infos_of0 raw_ident_false0)))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@map
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                               Type
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base)
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _
                                     (raw_ident_infos_of0 raw_ident_false0)))))
                         tt
                   end)))
    | raw_ident_flat_map =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_flat_map)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_flat_map
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_flat_map)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)))))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_flat_map
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_flat_map)))))
                      dt0 idt0)))
             (pattern_ident_flat_map
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_flat_map))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_flat_map)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_flat_map)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_flat_map)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_flat_map))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_flat_map)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0 raw_ident_flat_map))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_flat_map))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_app =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_app))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_app))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_app
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_app))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_app)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.list base
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit idt0)))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0)))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.list base
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit idt0)))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_app
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_app))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_app)))))
                      dt0 idt0)))
             (pattern_ident_app
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_app))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_app))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_app)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_app))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_app)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_app))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_app)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_app))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_app)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_app))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_app))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_map =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_map))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_map))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_map
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_map))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_map)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_map
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_map))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_map)))))
                      dt0 idt0)))
             (pattern_ident_map
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_map))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_map))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_map)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_map))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_map)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_map))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_map)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_map))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_map)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_map))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_map))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_snd =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_snd))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_snd))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_snd
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_snd))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_snd)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.prod base
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.prod base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.prod base
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit
                                 (@snd
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0)))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.prod base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_snd
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_snd))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_snd)))))
                      dt0 idt0)))
             (pattern_ident_snd
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_snd))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_snd))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_snd)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_snd))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_snd)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_snd))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_snd)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_snd))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_snd)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_snd))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_snd))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_fst =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_fst))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_fst))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_fst
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_fst))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_fst)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.prod base
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.prod base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.prod base
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 (prod
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit) idt0))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.prod base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_fst
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_fst))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_fst)))))
                      dt0 idt0)))
             (pattern_ident_fst
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_fst))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_fst))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_fst)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_fst))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_fst)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_fst))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_fst)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_fst))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_fst)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_fst))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_fst))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_Z0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_Z0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_Z0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_Z0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Z0)))))
                      dt0 idt0))))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.type_base base base_Z))
          (@exist
             (pattern_ident
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z)))
             (fun
                idc : pattern_ident
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.type_base base base_Z)) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z)) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_Z0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Z0)))))
                      dt0 idt0))) pattern_ident_Z0
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Z0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_Z0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@nil Type)) tt tt)
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Z0))))) dt0
                   idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Z0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type)) tt tt)
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Z0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Z0))))
                         tt
                   end
                   match
                     idt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@map
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                Type
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base)
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                   _ _
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _ (raw_ident_infos_of0 raw_ident_Z0)))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@map
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                               Type
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base)
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _ (raw_ident_infos_of0 raw_ident_Z0)))))
                         tt
                   end)))
    | raw_ident_add =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_add))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_add))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_add
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_add))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_add)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.type_base base base_Z))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_Z))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z)))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.type_base base base_Z))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.type_base base base_Z))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.type_base base base_Z))))
              =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.type_base base base_Z))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_Z))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_Z)))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_add
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_add))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_add)))))
                      dt0 idt0))) pattern_ident_add
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_add))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_add))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_add)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@nil Type)) tt tt)
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_add))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_add)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_add))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_add)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type)) tt tt)
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_add))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_add)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_add))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_add))))
                         tt
                   end
                   match
                     idt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@map
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                Type
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base)
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                   _ _
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _ (raw_ident_infos_of0 raw_ident_add)))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@map
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                               Type
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base)
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _ (raw_ident_infos_of0 raw_ident_add)))))
                         tt
                   end)))
    | raw_ident_literal0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_literal0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_literal0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_literal0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_literal0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_literal0)))))
                      dt0 idt0))))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.type_base base (@fst base unit dt0)))
          (@exist
             (pattern_ident
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base (@fst base unit dt0))))
             (fun
                idc : pattern_ident
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.type_base base
                              (@fst base unit dt0))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base (@fst base unit dt0)))
                   idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_literal0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_literal0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_literal0)))))
                      dt0 idt0)))
             (pattern_ident_literal0 (@fst base unit dt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_literal0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_literal0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_literal0)
                (@pair
                   (prod base
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type)))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@nil Type))
                   (@pair base
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type)) (@fst base unit dt0) tt) tt)
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_literal0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_literal0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_literal0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_literal0)))))
                   (@pair
                      (prod base
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit (@nil Type)))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type))
                      (@pair base
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit (@nil Type)) (@fst base unit dt0) tt) tt)
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_literal0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_literal0)))))
                      dt0 idt0)
                   (@Prod.path_prod base unit
                      (@pair base
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit (@nil Type)) (@fst base unit dt0) tt) dt0
                      (@eq_refl base (@fst base unit dt0))
                      match
                        @snd base unit dt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end)
                   match
                     idt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@map
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                Type
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base)
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                   _ _
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _
                                      (raw_ident_infos_of0 raw_ident_literal0)))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@map
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                               Type
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base)
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _
                                     (raw_ident_infos_of0 raw_ident_literal0)))))
                         tt
                   end)))
    | raw_ident_nil0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_nil0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_nil0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nil0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_nil0)))))
                      dt0 idt0))))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.list base
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0)))
          (@exist
             (pattern_ident
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0))))
             (fun
                idc : pattern_ident
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.list base
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit idt0))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nil0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_nil0)))))
                      dt0 idt0)))
             (pattern_ident_nil0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nil0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nil0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nil0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nil0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_nil0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_nil0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_cons0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_cons0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_cons0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_cons0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_cons0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit idt0))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_cons0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_cons0)))))
                      dt0 idt0)))
             (pattern_ident_cons0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_cons0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_cons0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_cons0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_cons0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_cons0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_cons0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_Some0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_Some0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_Some0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_Some0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Some0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.option base
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit idt0))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0))
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.option base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0)))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit idt0))
                           (@type.base (pattern.base.type.type base)
                              (@pattern.base.type.option base
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit idt0)))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.option base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_Some0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Some0)))))
                      dt0 idt0)))
             (pattern_ident_Some0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Some0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_Some0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Some0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Some0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Some0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_Some0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_None0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_None0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_None0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_None0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_None0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_None0)))))
                      dt0 idt0))))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.option base
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0)))
          (@exist
             (pattern_ident
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.option base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0))))
             (fun
                idc : pattern_ident
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.option base
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit idt0))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.option base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_None0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_None0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_None0)))))
                      dt0 idt0)))
             (pattern_ident_None0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_None0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_None0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_None0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_None0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_None0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_None0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_None0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_None0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_None0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_None0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_None0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_pair0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_pair0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_pair0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_pair0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_pair0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.prod base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.prod base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 (prod
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit) idt0))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.prod base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.prod base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_pair0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_pair0)))))
                      dt0 idt0)))
             (pattern_ident_pair0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_pair0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_pair0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_pair0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_pair0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_pair0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_pair0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_tt0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_tt0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_tt0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_tt0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                      dt0 idt0))))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.unit base))
          (@exist
             (pattern_ident
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base)))
             (fun
                idc : pattern_ident
                        (@type.base (pattern.base.type.type base)
                           (@pattern.base.type.unit base)) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.unit base)) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_tt0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                      dt0 idt0))) pattern_ident_tt0
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_tt0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_tt0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@nil Type)) tt tt)
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit (@nil Type)) tt tt)
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 raw_ident_tt0))))
                         tt
                   end
                   match
                     idt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@map
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                Type
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base)
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                   _ _
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@map
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                               Type
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base)
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _ (raw_ident_infos_of0 raw_ident_tt0)))))
                         tt
                   end)))
    | raw_ident_prod_rect_nodep0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_prod_rect_nodep0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0 raw_ident_prod_rect_nodep0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_prod_rect_nodep0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_prod_rect_nodep0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_prod_rect_nodep0))))) dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)) idt0))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))))))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.prod base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0))))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0))))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.prod base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit)) idt0))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit)
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0)))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.prod base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)) idt0)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit)
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0))))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit)
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.prod base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0))))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_prod_rect_nodep0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_prod_rect_nodep0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_prod_rect_nodep0))))) dt0 idt0)))
             (pattern_ident_prod_rect_nodep0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit)
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)) idt0))
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0))))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_prod_rect_nodep0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_prod_rect_nodep0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_prod_rect_nodep0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type))))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit))
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0))) tt))))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_prod_rect_nodep0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_prod_rect_nodep0))))) dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_prod_rect_nodep0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_prod_rect_nodep0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@cons Type (pattern.base.type.type base)
                                  (@nil Type))))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit))
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_prod_rect_nodep0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_prod_rect_nodep0))))) dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_prod_rect_nodep0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_prod_rect_nodep0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit))
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit))
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@Prod.path_prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@eq_refl
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))))
                            match
                              @snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                unit
                                (@snd
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   (prod
                                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                         base
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                      unit)
                                   (@snd
                                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                         base
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                      (prod
                                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                            base
                                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                         (prod
                                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                               base
                                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                            unit)) idt0)) as u
                              return (@eq unit tt u)
                            with
                            | tt => @eq_refl unit tt
                            end))))))
    | raw_ident_bool_rect0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_bool_rect0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_bool_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_bool_rect0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit idt0)))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.unit base))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_bool0))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.unit base))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0)))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_bool0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.unit base))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit idt0)))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.unit base))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0)))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_bool0))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.unit base))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0)))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_bool0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_bool_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_bool_rect0)))))
                      dt0 idt0)))
             (pattern_ident_bool_rect0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_bool_rect0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_bool_rect0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_bool_rect0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_bool_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_bool_rect0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0 raw_ident_bool_rect0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_bool_rect0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_list_case0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_list_case0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_case0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_case0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.unit base))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.unit base))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.list base
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0)))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0)))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.list base
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.list base
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0)))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0)))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_case0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_case0)))))
                      dt0 idt0)))
             (pattern_ident_list_case0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_case0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_case0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_case0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_case0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_case0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_case0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0 raw_ident_list_case0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_case0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_option_rect0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_option_rect0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_option_rect0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_option_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_option_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_option_rect0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.unit base))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.option base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.option base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.unit base))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.option base
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.unit base))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.option base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_option_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_option_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_option_rect0)))))
                      dt0 idt0)))
             (pattern_ident_option_rect0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_option_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_option_rect0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_option_rect0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_option_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_option_rect0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_option_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_option_rect0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_option_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_option_rect0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_option_rect0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_option_rect0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_nat_rect0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_nat_rect0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nat_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_nat_rect0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit idt0)))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.unit base))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0)))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.unit base))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit idt0)))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit idt0))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit idt0))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit idt0))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nat_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_nat_rect0)))))
                      dt0 idt0)))
             (pattern_ident_nat_rect0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nat_rect0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nat_rect0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nat_rect0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_nat_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_nat_rect0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0 raw_ident_nat_rect0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_nat_rect0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_eager_nat_rect0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_nat_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect0))))) dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit idt0)))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.unit base))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0)))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.unit base))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit idt0)))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit idt0))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit idt0))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit idt0))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_nat_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect0))))) dt0 idt0)))
             (pattern_ident_eager_nat_rect0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_nat_rect0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_eager_nat_rect0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_eager_nat_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect0))))) dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_eager_nat_rect0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_nat_rect_arrow0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nat_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_nat_rect_arrow0))))) dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0))))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0))))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0))))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0))))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0))))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nat_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_nat_rect_arrow0))))) dt0 idt0)))
             (pattern_ident_nat_rect_arrow0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_nat_rect_arrow0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_nat_rect_arrow0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0 raw_ident_nat_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_nat_rect_arrow0))))) dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_nat_rect_arrow0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_nat_rect_arrow0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_eager_nat_rect_arrow0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _
                         (raw_ident_infos_of0 raw_ident_eager_nat_rect_arrow0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0
                                raw_ident_eager_nat_rect_arrow0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_nat_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_nat_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect_arrow0))))) dt0
                      idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit) idt0))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0))))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0))))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0))))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0))))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0))))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_nat_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_nat_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect_arrow0))))) dt0
                      idt0)))
             (pattern_ident_eager_nat_rect_arrow0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_nat_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_nat_rect_arrow0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_nat_rect_arrow0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_nat_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_nat_rect_arrow0))))) dt0
                   idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_nat_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_nat_rect_arrow0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_nat_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect_arrow0))))) dt0
                      idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_eager_nat_rect_arrow0)))) tt
                          u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_nat_rect_arrow0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_list_rect0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _ (raw_ident_infos_of0 raw_ident_list_rect0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_rect0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.unit base))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0)))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.unit base))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.list base
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0)))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0)))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0))))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.list base
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.list base
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0)))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0)))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0))))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_rect0)))))
                      dt0 idt0)))
             (pattern_ident_list_rect0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_rect0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_rect0)))))
                   dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_rect0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 raw_ident_list_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_rect0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0 raw_ident_list_rect0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0 raw_ident_list_rect0))))
                         tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_eager_list_rect0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_eager_list_rect0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0 raw_ident_eager_list_rect0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_list_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect0))))) dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.unit base))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.unit base))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0)))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.unit base))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit) idt0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.list base
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit) idt0)))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0)))
                                       (@type.base
                                          (pattern.base.type.type base)
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit) idt0))))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.list base
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit) idt0)))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.unit base))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.list base
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit) idt0)))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0)))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit) idt0))))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit) idt0)))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_list_rect0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect0))))) dt0 idt0)))
             (pattern_ident_eager_list_rect0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit) idt0)))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_eager_list_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_list_rect0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type)))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base) unit)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit) idt0)
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit) idt0)) tt)))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_eager_list_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect0))))) dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_eager_list_rect0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type)))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect0))))) dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_eager_list_rect0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)) tt)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit) idt0)))
                         match
                           @snd
                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                base
                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                             unit
                             (@snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                (prod
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   unit) idt0) as u
                           return (@eq unit tt u)
                         with
                         | tt => @eq_refl unit tt
                         end)))))
    | raw_ident_list_rect_arrow0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _ (raw_ident_infos_of0 raw_ident_list_rect_arrow0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0 raw_ident_list_rect_arrow0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_list_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_list_rect_arrow0))))) dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0)))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))))))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit)
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)) idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit)
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0)))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)) idt0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.list base
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.arrow
                                          (pattern.base.type.type base)
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                 (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))
                                       (@type.arrow
                                          (pattern.base.type.type base)
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                 (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.list base
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0)))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.list base
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.arrow (pattern.base.type.type base)
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                              (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))
                                  (@type.arrow (pattern.base.type.type base)
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                              (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_list_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_list_rect_arrow0))))) dt0 idt0)))
             (pattern_ident_list_rect_arrow0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit)
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)) idt0))
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0))))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_list_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_list_rect_arrow0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_list_rect_arrow0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type))))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit))
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0))) tt))))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_list_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_list_rect_arrow0))))) dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_list_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_list_rect_arrow0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@cons Type (pattern.base.type.type base)
                                  (@nil Type))))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit))
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_list_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_list_rect_arrow0))))) dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_list_rect_arrow0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_list_rect_arrow0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit))
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit))
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@Prod.path_prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@eq_refl
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))))
                            match
                              @snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                unit
                                (@snd
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   (prod
                                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                         base
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                      unit)
                                   (@snd
                                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                         base
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                      (prod
                                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                            base
                                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                         (prod
                                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                               base
                                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                            unit)) idt0)) as u
                              return (@eq unit tt u)
                            with
                            | tt => @eq_refl unit tt
                            end))))))
    | raw_ident_eager_list_rect_arrow0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _
                         (raw_ident_infos_of0
                            raw_ident_eager_list_rect_arrow0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0
                                raw_ident_eager_list_rect_arrow0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_list_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect_arrow0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0)))
                (@type.base (pattern.base.type.type base)
                   (@fst
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)))))
             (@type.arrow (pattern.base.type.type base)
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))))))))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.list base
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))))))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0)))
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                  (@type.base (pattern.base.type.type base)
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    (prod
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit)
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)) idt0)))
                              (@type.base (pattern.base.type.type base)
                                 (@fst
                                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                       base
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                    unit
                                    (@snd
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit)
                                       (@snd
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0)))))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       (prod
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)) idt0))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@pattern.base.type.list base
                                          (@fst
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                    (@type.arrow
                                       (pattern.base.type.type base)
                                       (@type.arrow
                                          (pattern.base.type.type base)
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                 (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))
                                       (@type.arrow
                                          (pattern.base.type.type base)
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                          (@type.base
                                             (pattern.base.type.type base)
                                             (@fst
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit
                                                (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                                 (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.list base
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)) idt0)))
                                 (@type.arrow (pattern.base.type.type base)
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          (prod
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             unit)
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                    (@type.base (pattern.base.type.type base)
                                       (@fst
                                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                             base
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                          unit
                                          (@snd
                                             (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                base
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                             (prod
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                unit)
                                             (@snd
                                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@pattern.base.type.list base
                                     (@fst
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))
                               (@type.arrow (pattern.base.type.type base)
                                  (@type.arrow (pattern.base.type.type base)
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                              (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))
                                  (@type.arrow (pattern.base.type.type base)
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))
                                     (@type.base
                                        (pattern.base.type.type base)
                                        (@fst
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit
                                           (@snd
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)
                                              (@snd
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0))))))))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.list base
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0)))
                            (@type.arrow (pattern.base.type.type base)
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0)))
                               (@type.base (pattern.base.type.type base)
                                  (@fst
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)
                                        (@snd
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              (prod
                                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                                 unit)) idt0)))))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_list_rect_arrow0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect_arrow0)))))
                      dt0 idt0)))
             (pattern_ident_eager_list_rect_arrow0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)) idt0)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   (prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit)
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)) idt0))
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit
                   (@snd
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit)
                      (@snd
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0))))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_list_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect_arrow0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_list_rect_arrow0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base)
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@nil Type))))) tt
                   (@pair (pattern.base.type.type base)
                      (prod (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit))
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)) idt0)
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base) unit)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)) idt0))
                         (@pair (pattern.base.type.type base) unit
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     unit)
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           unit)) idt0))) tt))))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_list_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect_arrow0))))) dt0
                   idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_list_rect_arrow0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect_arrow0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@cons Type (pattern.base.type.type base)
                               (@cons Type (pattern.base.type.type base)
                                  (@nil Type))))) tt
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit))
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_list_rect_arrow0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect_arrow0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_eager_list_rect_arrow0)))) tt
                          u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_list_rect_arrow0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      (prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit))
                      (@pair (pattern.base.type.type base)
                         (prod (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit))
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0))
                      (@Prod.path_prod
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit)
                         (@pair (pattern.base.type.type base)
                            (prod (pattern.base.type.type base) unit)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt))
                         (@snd
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (prod
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)) idt0)
                         (@eq_refl
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0)))
                         (@Prod.path_prod
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit
                            (@pair (pattern.base.type.type base) unit
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))) tt)
                            (@snd
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (prod
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit)
                               (@snd
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  (prod
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)) idt0))
                            (@eq_refl
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit
                                  (@snd
                                     (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                        base
                                        IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                     (prod
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        unit)
                                     (@snd
                                        (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                           base
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                        (prod
                                           (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                              base
                                              IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                           (prod
                                              (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                                 base
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                              unit)) idt0))))
                            match
                              @snd
                                (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                   base
                                   IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                unit
                                (@snd
                                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                      base
                                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                   (prod
                                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                         base
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                      unit)
                                   (@snd
                                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                         base
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                      (prod
                                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                            base
                                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                         (prod
                                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                               base
                                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                            unit)) idt0)) as u
                              return (@eq unit tt u)
                            with
                            | tt => @eq_refl unit tt
                            end))))))
    | raw_ident_List_nth_default0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _
                         (raw_ident_infos_of0 raw_ident_List_nth_default0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0 raw_ident_List_nth_default0)))))
        =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_List_nth_default0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_List_nth_default0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_List_nth_default0))))) dt0
                      idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit idt0))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0)))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0)))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_List_nth_default0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_List_nth_default0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_List_nth_default0))))) dt0
                      idt0)))
             (pattern_ident_List_nth_default0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_List_nth_default0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_List_nth_default0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_List_nth_default0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_List_nth_default0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_List_nth_default0))))) dt0 idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0 raw_ident_List_nth_default0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_List_nth_default0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_List_nth_default0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_List_nth_default0))))) dt0
                      idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_List_nth_default0)))) tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_List_nth_default0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    | raw_ident_eager_List_nth_default0 =>
        fun
          (dt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                      _ _
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                         _ _
                         (raw_ident_infos_of0
                            raw_ident_eager_List_nth_default0))))
          (idt0 : @fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0
                                raw_ident_eager_List_nth_default0))))) =>
        @PrimitiveSigma.Primitive.existT
          (type.type (pattern.base.type.type base))
          (fun t : type.type (pattern.base.type.type base) =>
           @sig (pattern_ident t)
             (fun idc : pattern_ident t =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0 t idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_List_nth_default0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_List_nth_default0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_List_nth_default0)))))
                      dt0 idt0))))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.list base
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@pattern.base.type.type_base base base_nat0))
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0)))))
          (@exist
             (pattern_ident
                (@type.arrow (pattern.base.type.type base)
                   (@type.base (pattern.base.type.type base)
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0))
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@pattern.base.type.list base
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0)))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.type_base base base_nat0))
                         (@type.base (pattern.base.type.type base)
                            (@fst
                               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                  base
                                  IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                               unit idt0))))))
             (fun
                idc : pattern_ident
                        (@type.arrow (pattern.base.type.type base)
                           (@type.base (pattern.base.type.type base)
                              (@fst
                                 (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                    base
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                 unit idt0))
                           (@type.arrow (pattern.base.type.type base)
                              (@type.base (pattern.base.type.type base)
                                 (@pattern.base.type.list base
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0)))
                              (@type.arrow (pattern.base.type.type base)
                                 (@type.base (pattern.base.type.type base)
                                    (@pattern.base.type.type_base base
                                       base_nat0))
                                 (@type.base (pattern.base.type.type base)
                                    (@fst
                                       (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                          base
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                       unit idt0))))) =>
              @eq
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (split_types0
                   (@type.arrow (pattern.base.type.type base)
                      (@type.base (pattern.base.type.type base)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      (@type.arrow (pattern.base.type.type base)
                         (@type.base (pattern.base.type.type base)
                            (@pattern.base.type.list base
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0)))
                         (@type.arrow (pattern.base.type.type base)
                            (@type.base (pattern.base.type.type base)
                               (@pattern.base.type.type_base base base_nat0))
                            (@type.base (pattern.base.type.type base)
                               (@fst
                                  (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                                     base
                                     IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                                  unit idt0))))) idc)
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_List_nth_default0
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_List_nth_default0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_List_nth_default0)))))
                      dt0 idt0)))
             (pattern_ident_eager_List_nth_default0
                (@fst
                   (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                      base
                      IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                   unit idt0))
             (@f_equal
                (prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_List_nth_default0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_List_nth_default0))))))
                (@PrimitiveSigma.Primitive.sigT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0)))))))
                (@PrimitiveSigma.Primitive.existT raw_ident
                   (fun ridc0 : raw_ident =>
                    prod
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _ (raw_ident_infos_of0 ridc0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _ (raw_ident_infos_of0 ridc0))))))
                   raw_ident_eager_List_nth_default0)
                (@pair unit
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@cons Type (pattern.base.type.type base) (@nil Type)))
                   tt
                   (@pair (pattern.base.type.type base) unit
                      (@fst
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         unit idt0) tt))
                (@pair
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_List_nth_default0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_List_nth_default0))))) dt0
                   idt0)
                (@Prod.path_prod
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                         _ _
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                            _ _
                            (raw_ident_infos_of0
                               raw_ident_eager_List_nth_default0))))
                   (@fold_right Type Type (fun A B : Type => prod A B) unit
                      (@map
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                         Type
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base)
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_List_nth_default0)))))
                   (@pair unit
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@cons Type (pattern.base.type.type base)
                            (@nil Type))) tt
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt))
                   (@pair
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                            _ _
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                               _ _
                               (raw_ident_infos_of0
                                  raw_ident_eager_List_nth_default0))))
                      (@fold_right Type Type (fun A B : Type => prod A B)
                         unit
                         (@map
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                            Type
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base)
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_List_nth_default0)))))
                      dt0 idt0)
                   match
                     dt0 as u
                     return
                       (@eq
                          (@fold_right Type Type (fun A B : Type => prod A B)
                             unit
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      raw_ident_eager_List_nth_default0))))
                          tt u)
                   with
                   | tt =>
                       @eq_refl
                         (@fold_right Type Type (fun A B : Type => prod A B)
                            unit
                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                               _ _
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                  _ _
                                  (raw_ident_infos_of0
                                     raw_ident_eager_List_nth_default0)))) tt
                   end
                   (@Prod.path_prod
                      (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                         base
                         IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                      unit
                      (@pair (pattern.base.type.type base) unit
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0) tt) idt0
                      (@eq_refl
                         (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                            base
                            IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                         (@fst
                            (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                               base
                               IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                            unit idt0))
                      match
                        @snd
                          (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                             base
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.BaseType)
                          unit idt0 as u return (@eq unit tt u)
                      with
                      | tt => @eq_refl unit tt
                      end))))
    end dt idt ) in
  let to_type_split_types_subst_default_eq0 := mk to_type_split_types_subst_default_eq0 (
    forall (t : type.type (pattern.base.type.type base))
      (idc : pattern_ident t)
      (evm : FMapPositive.PositiveMap.t (base.type.type base)),
    @eq (type.type (base.type.type base))
      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _ _
         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
            (raw_ident_infos_of0
               (@PrimitiveSigma.Primitive.projT1 _ _
                  (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                     base ident raw_ident raw_ident_infos_of0 pattern_ident
                     split_types0 t idc evm))))
         (@fst
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _
                     (raw_ident_infos_of0
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                              base ident raw_ident raw_ident_infos_of0
                              pattern_ident split_types0 t idc evm))))))
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _
                        (raw_ident_infos_of0
                           (@PrimitiveSigma.Primitive.projT1 _ _
                              (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                 base ident raw_ident raw_ident_infos_of0
                                 pattern_ident split_types0 t idc evm)))))))
            (@PrimitiveSigma.Primitive.projT2 _ _
               (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                  base ident raw_ident raw_ident_infos_of0 pattern_ident
                  split_types0 t idc evm)))
         (@snd
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types _ _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _
                     (raw_ident_infos_of0
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                              base ident raw_ident raw_ident_infos_of0
                              pattern_ident split_types0 t idc evm))))))
            (@fold_right Type Type (fun A B : Type => prod A B) unit
               (@map
                  IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                  Type
                  (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                     base)
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                     _ _
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _
                        (raw_ident_infos_of0
                           (@PrimitiveSigma.Primitive.projT1 _ _
                              (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                 base ident raw_ident raw_ident_infos_of0
                                 pattern_ident split_types0 t idc evm)))))))
            (@PrimitiveSigma.Primitive.projT2 _ _
               (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                  base ident raw_ident raw_ident_infos_of0 pattern_ident
                  split_types0 t idc evm))))
      (@IdentifiersLibrary.Compilers.pattern.type.subst_default base t evm) ) (
    fun (t : type.type (pattern.base.type.type base))
      (idc : pattern_ident t)
      (evm : FMapPositive.PositiveMap.t (base.type.type base)) =>
    match
      idc as p in (pattern_ident t0)
      return
        (@eq (type.type (base.type.type base))
           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type _ _
              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _ _
                 (raw_ident_infos_of0
                    (@PrimitiveSigma.Primitive.projT1 _ _
                       (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                          base ident raw_ident raw_ident_infos_of0
                          pattern_ident split_types0 t0 p evm))))
              (@fst
                 (@fold_right Type Type (fun A B : Type => prod A B) unit
                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                       _ _
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                          _ _
                          (raw_ident_infos_of0
                             (@PrimitiveSigma.Primitive.projT1 _ _
                                (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                   base ident raw_ident raw_ident_infos_of0
                                   pattern_ident split_types0 t0 p evm))))))
                 (@fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0
                                (@PrimitiveSigma.Primitive.projT1 _ _
                                   (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                      base ident raw_ident
                                      raw_ident_infos_of0 pattern_ident
                                      split_types0 t0 p evm)))))))
                 (@PrimitiveSigma.Primitive.projT2 _ _
                    (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                       base ident raw_ident raw_ident_infos_of0 pattern_ident
                       split_types0 t0 p evm)))
              (@snd
                 (@fold_right Type Type (fun A B : Type => prod A B) unit
                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.dep_types
                       _ _
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                          _ _
                          (raw_ident_infos_of0
                             (@PrimitiveSigma.Primitive.projT1 _ _
                                (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                   base ident raw_ident raw_ident_infos_of0
                                   pattern_ident split_types0 t0 p evm))))))
                 (@fold_right Type Type (fun A B : Type => prod A B) unit
                    (@map
                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                       Type
                       (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                          base)
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                          _ _
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0
                                (@PrimitiveSigma.Primitive.projT1 _ _
                                   (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                                      base ident raw_ident
                                      raw_ident_infos_of0 pattern_ident
                                      split_types0 t0 p evm)))))))
                 (@PrimitiveSigma.Primitive.projT2 _ _
                    (@IdentifiersLibrary.Compilers.pattern.ident.split_types_subst_default
                       base ident raw_ident raw_ident_infos_of0 pattern_ident
                       split_types0 t0 p evm))))
           (@IdentifiersLibrary.Compilers.pattern.type.subst_default base t0
              evm))
    with
    | pattern_ident_false0 =>
        @eq_refl (type.type (base.type.type base))
          (@type.base (base.type.type base)
             (@base.type.type_base base base_bool0))
    | pattern_ident_flat_map t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm))
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm))))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t2 evm)))
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_app t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@base.type.list base
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t1 evm)))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    | pattern_ident_map t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t2 evm)))
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_snd t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@base.type.prod base
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t3 evm)))) t0 t1
    | pattern_ident_fst t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@base.type.prod base
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t2 evm)))) t0 t1
    | pattern_ident_Z0 =>
        @eq_refl (type.type (base.type.type base))
          (@type.base (base.type.type base)
             (@base.type.type_base base base_Z))
    | pattern_ident_add =>
        @eq_refl (type.type (base.type.type base))
          (@type.arrow (base.type.type base)
             (@type.base (base.type.type base)
                (@base.type.type_base base base_Z))
             (@type.arrow (base.type.type base)
                (@type.base (base.type.type base)
                   (@base.type.type_base base base_Z))
                (@type.base (base.type.type base)
                   (@base.type.type_base base base_Z))))
    | pattern_ident_literal0 t0 =>
        (fun t1 : base =>
         @eq_refl (type.type (base.type.type base))
           (@type.base (base.type.type base) (@base.type.type_base base t1)))
          t0
    | pattern_ident_nil0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.base (base.type.type base)
              (@base.type.list base
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t1 evm)))) t0
    | pattern_ident_cons0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t1 evm))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    | pattern_ident_Some0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t1 evm))
              (@type.base (base.type.type base)
                 (@base.type.option base
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t1 evm))))) t0
    | pattern_ident_None0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.base (base.type.type base)
              (@base.type.option base
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t1 evm)))) t0
    | pattern_ident_pair0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t2 evm))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm))
                 (@type.base (base.type.type base)
                    (@base.type.prod base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t2 evm)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_tt0 =>
        @eq_refl (type.type (base.type.type base))
          (@type.base (base.type.type base) (@base.type.unit base))
    | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
        (fun t3 t4 t5 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t4 evm))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t5 evm))))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.prod base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t4 evm)))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t5 evm))))) t0 t1 t2
    | pattern_ident_bool_rect0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base) (@base.type.unit base))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t1 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base) (@base.type.unit base))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_bool0))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    | pattern_ident_list_case0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base) (@base.type.unit base))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t2 evm))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm)))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t3 evm))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t2 evm)))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_option_rect0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base) (@base.type.unit base))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.option base
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t2 evm)))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_nat_rect0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base) (@base.type.unit base))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t1 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t1 evm))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t1 evm))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    | pattern_ident_eager_nat_rect0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base) (@base.type.unit base))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t1 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t1 evm))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t1 evm))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    | pattern_ident_nat_rect_arrow0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.arrow (base.type.type base)
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm))
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm))
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t2 evm))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t3 evm))))))) t0 t1
    | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t2 evm))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.arrow (base.type.type base)
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm))
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm))
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t2 evm))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t3 evm))))))) t0 t1
    | pattern_ident_list_rect0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base) (@base.type.unit base))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t2 evm))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm)))
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm))
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t2 evm)))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_eager_list_rect0 t0 t1 =>
        (fun t2 t3 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base) (@base.type.unit base))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t3 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t2 evm))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t2 evm)))
                       (@type.arrow (base.type.type base)
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm))
                          (@type.base (base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t2 evm)))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm)))))) t0 t1
    | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
        (fun t3 t4 t5 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t4 evm))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t5 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))
                       (@type.arrow (base.type.type base)
                          (@type.arrow (base.type.type base)
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t4 evm))
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t5 evm)))
                          (@type.arrow (base.type.type base)
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t4 evm))
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t5 evm))))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t3 evm)))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t4 evm))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t5 evm))))))) t0 t1 t2
    | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
        (fun t3 t4 t5 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t4 evm))
                 (@type.base (base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                       base t5 evm)))
              (@type.arrow (base.type.type base)
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t3 evm))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                base t3 evm)))
                       (@type.arrow (base.type.type base)
                          (@type.arrow (base.type.type base)
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t4 evm))
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t5 evm)))
                          (@type.arrow (base.type.type base)
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t4 evm))
                             (@type.base (base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                                   base t5 evm))))))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t3 evm)))
                    (@type.arrow (base.type.type base)
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t4 evm))
                       (@type.base (base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                             base t5 evm))))))) t0 t1 t2
    | pattern_ident_List_nth_default0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t1 evm))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    | pattern_ident_eager_List_nth_default0 t0 =>
        (fun t1 : pattern.base.type.type base =>
         @eq_refl (type.type (base.type.type base))
           (@type.arrow (base.type.type base)
              (@type.base (base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                    base t1 evm))
              (@type.arrow (base.type.type base)
                 (@type.base (base.type.type base)
                    (@base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))
                 (@type.arrow (base.type.type base)
                    (@type.base (base.type.type base)
                       (@base.type.type_base base base_nat0))
                    (@type.base (base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.subst_default
                          base t1 evm)))))) t0
    end ) in
  let projT1_add_types_from_raw_sig_eq0 := mk projT1_add_types_from_raw_sig_eq0 (
    forall (t : type.type (base.type.type base)) (idc : ident t),
    @eq (type.type (pattern.base.type.type base))
      (@PrimitiveSigma.Primitive.projT1 _ _
         (add_types_from_raw_sig0
            (@PrimitiveSigma.Primitive.projT1 _ _
               (split_raw_ident_gen0 t idc))
            (@PrimitiveSigma.Primitive.projT1 _ _
               (@proj1_sig
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                     base ident
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                        _ _
                        (raw_ident_infos_of0
                           (@PrimitiveSigma.Primitive.projT1 _ _
                              (split_raw_ident_gen0 t idc)))))
                  (fun
                     args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                              base ident
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _
                                 (raw_ident_infos_of0
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       (split_raw_ident_gen0 t idc)))) =>
                   @sig
                     (@eq (type.type (base.type.type base))
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _
                              (raw_ident_infos_of0
                                 (@PrimitiveSigma.Primitive.projT1 _ _
                                    (split_raw_ident_gen0 t idc))))
                           (@PrimitiveSigma.Primitive.projT1 _ _ args)
                           (@fst
                              (@fold_right Type Type
                                 (fun A B : Type => prod A B) unit
                                 (@map
                                    IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                    Type
                                    (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                       base)
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t idc)))))))
                              (@fold_right Type Type
                                 (fun A B : Type => prod A B) unit
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                    _ _
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       args)))
                              (@PrimitiveSigma.Primitive.projT2 _ _ args))) t)
                     (fun
                        pf : @eq (type.type (base.type.type base))
                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                  _ _
                                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                     _ _
                                     (raw_ident_infos_of0
                                        (@PrimitiveSigma.Primitive.projT1 _ _
                                           (split_raw_ident_gen0 t idc))))
                                  (@PrimitiveSigma.Primitive.projT1 _ _ args)
                                  (@fst
                                     (@fold_right Type Type
                                        (fun A B : Type => prod A B) unit
                                        (@map
                                           IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                           Type
                                           (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                              base)
                                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                              _ _
                                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                     (@fold_right Type Type
                                        (fun A B : Type => prod A B) unit
                                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                           _ _
                                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                              _ _
                                              (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                           (@PrimitiveSigma.Primitive.projT1
                                              _ _ args)))
                                     (@PrimitiveSigma.Primitive.projT2 _ _
                                        args))) t =>
                      @eq (ident t) idc
                        (@eq_rect (type.type (base.type.type base))
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                              _ _
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _
                                 (raw_ident_infos_of0
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       (split_raw_ident_gen0 t idc))))
                              (@PrimitiveSigma.Primitive.projT1 _ _ args)
                              (@fst
                                 (@fold_right Type Type
                                    (fun A B : Type => prod A B) unit
                                    (@map
                                       IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                       Type
                                       (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                          base)
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                          _ _
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                 (@fold_right Type Type
                                    (fun A B : Type => prod A B) unit
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t idc))))
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          args)))
                                 (@PrimitiveSigma.Primitive.projT2 _ _ args)))
                           ident
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                              base ident
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                 _ _
                                 (raw_ident_infos_of0
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       (split_raw_ident_gen0 t idc)))) args)
                           t pf)))
                  (@PrimitiveSigma.Primitive.projT2 _ _
                     (split_raw_ident_gen0 t idc))))
            (@IdentifiersLibrary.Compilers.lift_type_of_list_map
               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types _
                  _
                  (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos _
                     _
                     (raw_ident_infos_of0
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (split_raw_ident_gen0 t idc)))))
               (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                  base)
               (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                  base)
               (@IdentifiersLibrary.Compilers.pattern.ident.relax_kind_of_type
                  base)
               (@fst
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@map
                        IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                        Type
                        (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                           base)
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                           _ _
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _
                              (raw_ident_infos_of0
                                 (@PrimitiveSigma.Primitive.projT1 _ _
                                    (split_raw_ident_gen0 t idc)))))))
                  (@fold_right Type Type (fun A B : Type => prod A B) unit
                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                        _ _
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                           _ _
                           (raw_ident_infos_of0
                              (@PrimitiveSigma.Primitive.projT1 _ _
                                 (split_raw_ident_gen0 t idc))))
                        (@PrimitiveSigma.Primitive.projT1 _ _
                           (@proj1_sig
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                 base ident
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                    _ _
                                    (raw_ident_infos_of0
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          (split_raw_ident_gen0 t idc)))))
                              (fun
                                 args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                          base ident
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                               =>
                               @sig
                                 (@eq (type.type (base.type.type base))
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t idc))))
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          args)
                                       (@fst
                                          (@fold_right Type Type
                                             (fun A B : Type => prod A B)
                                             unit
                                             (@map
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                Type
                                                (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                          (@fold_right Type Type
                                             (fun A B : Type => prod A B)
                                             unit
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                _ _
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                          (@PrimitiveSigma.Primitive.projT2 _
                                             _ args))) t)
                                 (fun
                                    pf : @eq
                                           (type.type (base.type.type base))
                                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                              _ _
                                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                              (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)
                                              (@fst
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                                 (@PrimitiveSigma.Primitive.projT2
                                                 _ _ args))) t =>
                                  @eq (ident t) idc
                                    (@eq_rect
                                       (type.type (base.type.type base))
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                          _ _
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ args)
                                          (@fst
                                             (@fold_right Type Type
                                                (fun A B : Type => prod A B)
                                                unit
                                                (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                             (@fold_right Type Type
                                                (fun A B : Type => prod A B)
                                                unit
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                             (@PrimitiveSigma.Primitive.projT2
                                                _ _ args))) ident
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                          base ident
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                          args) t pf)))
                              (@PrimitiveSigma.Primitive.projT2 _ _
                                 (split_raw_ident_gen0 t idc))))))
                  (@PrimitiveSigma.Primitive.projT2 _ _
                     (@proj1_sig
                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                           base ident
                           (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                              _ _
                              (raw_ident_infos_of0
                                 (@PrimitiveSigma.Primitive.projT1 _ _
                                    (split_raw_ident_gen0 t idc)))))
                        (fun
                           args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                    base ident
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                         =>
                         @sig
                           (@eq (type.type (base.type.type base))
                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                 _ _
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                    _ _
                                    (raw_ident_infos_of0
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          (split_raw_ident_gen0 t idc))))
                                 (@PrimitiveSigma.Primitive.projT1 _ _ args)
                                 (@fst
                                    (@fold_right Type Type
                                       (fun A B : Type => prod A B) unit
                                       (@map
                                          IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                          Type
                                          (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                             base)
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                             _ _
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                _ _
                                                (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                    (@fold_right Type Type
                                       (fun A B : Type => prod A B) unit
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                          _ _
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                             _ _
                                             (raw_ident_infos_of0
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ args)))
                                    (@PrimitiveSigma.Primitive.projT2 _ _
                                       args))) t)
                           (fun
                              pf : @eq (type.type (base.type.type base))
                                     (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                        _ _
                                        (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                           _ _
                                           (raw_ident_infos_of0
                                              (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                        (@PrimitiveSigma.Primitive.projT1 _ _
                                           args)
                                        (@fst
                                           (@fold_right Type Type
                                              (fun A B : Type => prod A B)
                                              unit
                                              (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                           (@fold_right Type Type
                                              (fun A B : Type => prod A B)
                                              unit
                                              (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                           (@PrimitiveSigma.Primitive.projT2
                                              _ _ args))) t =>
                            @eq (ident t) idc
                              (@eq_rect (type.type (base.type.type base))
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                    _ _
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                                    (@PrimitiveSigma.Primitive.projT1 _ _
                                       args)
                                    (@fst
                                       (@fold_right Type Type
                                          (fun A B : Type => prod A B) unit
                                          (@map
                                             IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                             Type
                                             (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                base)
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                _ _
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc)))))))
                                       (@fold_right Type Type
                                          (fun A B : Type => prod A B) unit
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                             _ _
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                _ _
                                                (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t idc))))
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _ args)))
                                       (@PrimitiveSigma.Primitive.projT2 _ _
                                          args))) ident
                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                    base ident
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                       _ _
                                       (raw_ident_infos_of0
                                          (@PrimitiveSigma.Primitive.projT1 _
                                             _ (split_raw_ident_gen0 t idc))))
                                    args) t pf)))
                        (@PrimitiveSigma.Primitive.projT2 _ _
                           (split_raw_ident_gen0 t idc))))))))
      (@IdentifiersLibrary.Compilers.pattern.type.relax base t) ) (
    fun (t : type.type (base.type.type base)) (idc : ident t) =>
    match
      idc as i in (ident t0)
      return
        (@eq (type.type (pattern.base.type.type base))
           (@PrimitiveSigma.Primitive.projT1 _ _
              (add_types_from_raw_sig0
                 (@PrimitiveSigma.Primitive.projT1 _ _
                    (split_raw_ident_gen0 t0 i))
                 (@PrimitiveSigma.Primitive.projT1 _ _
                    (@proj1_sig
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                          base ident
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                             _ _
                             (raw_ident_infos_of0
                                (@PrimitiveSigma.Primitive.projT1 _ _
                                   (split_raw_ident_gen0 t0 i)))))
                       (fun
                          args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                   base ident
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _
                                      (raw_ident_infos_of0
                                         (@PrimitiveSigma.Primitive.projT1 _
                                            _ (split_raw_ident_gen0 t0 i))))
                        =>
                        @sig
                          (@eq (type.type (base.type.type base))
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      (@PrimitiveSigma.Primitive.projT1 _ _
                                         (split_raw_ident_gen0 t0 i))))
                                (@PrimitiveSigma.Primitive.projT1 _ _ args)
                                (@fst
                                   (@fold_right Type Type
                                      (fun A B : Type => prod A B) unit
                                      (@map
                                         IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                         Type
                                         (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                            base)
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                            _ _
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                               _ _
                                               (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                   (@fold_right Type Type
                                      (fun A B : Type => prod A B) unit
                                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                         _ _
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                            _ _
                                            (raw_ident_infos_of0
                                               (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                         (@PrimitiveSigma.Primitive.projT1 _
                                            _ args)))
                                   (@PrimitiveSigma.Primitive.projT2 _ _ args)))
                             t0)
                          (fun
                             pf : @eq (type.type (base.type.type base))
                                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                       _ _
                                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                          _ _
                                          (raw_ident_infos_of0
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _
                                                (split_raw_ident_gen0 t0 i))))
                                       (@PrimitiveSigma.Primitive.projT1 _ _
                                          args)
                                       (@fst
                                          (@fold_right Type Type
                                             (fun A B : Type => prod A B)
                                             unit
                                             (@map
                                                IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                Type
                                                (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                          (@fold_right Type Type
                                             (fun A B : Type => prod A B)
                                             unit
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                _ _
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                          (@PrimitiveSigma.Primitive.projT2 _
                                             _ args))) t0 =>
                           @eq (ident t0) i
                             (@eq_rect (type.type (base.type.type base))
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                   _ _
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _
                                      (raw_ident_infos_of0
                                         (@PrimitiveSigma.Primitive.projT1 _
                                            _ (split_raw_ident_gen0 t0 i))))
                                   (@PrimitiveSigma.Primitive.projT1 _ _ args)
                                   (@fst
                                      (@fold_right Type Type
                                         (fun A B : Type => prod A B) unit
                                         (@map
                                            IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                            Type
                                            (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                               base)
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                               _ _
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                      (@fold_right Type Type
                                         (fun A B : Type => prod A B) unit
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                            _ _
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                               _ _
                                               (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                            (@PrimitiveSigma.Primitive.projT1
                                               _ _ args)))
                                      (@PrimitiveSigma.Primitive.projT2 _ _
                                         args))) ident
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                   base ident
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                      _ _
                                      (raw_ident_infos_of0
                                         (@PrimitiveSigma.Primitive.projT1 _
                                            _ (split_raw_ident_gen0 t0 i))))
                                   args) t0 pf)))
                       (@PrimitiveSigma.Primitive.projT2 _ _
                          (split_raw_ident_gen0 t0 i))))
                 (@IdentifiersLibrary.Compilers.lift_type_of_list_map
                    IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                    (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                       _ _
                       (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                          _ _
                          (raw_ident_infos_of0
                             (@PrimitiveSigma.Primitive.projT1 _ _
                                (split_raw_ident_gen0 t0 i)))))
                    (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                       base)
                    (IdentifiersLibrary.Compilers.pattern.ident.Type_of_kind_of_type
                       base)
                    (@IdentifiersLibrary.Compilers.pattern.ident.relax_kind_of_type
                       base)
                    (@fst
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@map
                             IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                             Type
                             (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                base)
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                _ _
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      (@PrimitiveSigma.Primitive.projT1 _ _
                                         (split_raw_ident_gen0 t0 i)))))))
                       (@fold_right Type Type (fun A B : Type => prod A B)
                          unit
                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                             _ _
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                _ _
                                (raw_ident_infos_of0
                                   (@PrimitiveSigma.Primitive.projT1 _ _
                                      (split_raw_ident_gen0 t0 i))))
                             (@PrimitiveSigma.Primitive.projT1 _ _
                                (@proj1_sig
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                      base ident
                                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                         _ _
                                         (raw_ident_infos_of0
                                            (@PrimitiveSigma.Primitive.projT1
                                               _ _
                                               (split_raw_ident_gen0 t0 i)))))
                                   (fun
                                      args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                               base ident
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                    =>
                                    @sig
                                      (@eq (type.type (base.type.type base))
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                            _ _
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                               _ _
                                               (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                            (@PrimitiveSigma.Primitive.projT1
                                               _ _ args)
                                            (@fst
                                               (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                               (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                               (@PrimitiveSigma.Primitive.projT2
                                                 _ _ args))) t0)
                                      (fun
                                         pf : @eq
                                                (type.type
                                                 (base.type.type base))
                                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)
                                                 (@fst
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                                 (@PrimitiveSigma.Primitive.projT2
                                                 _ _ args))) t0 =>
                                       @eq (ident t0) i
                                         (@eq_rect
                                            (type.type (base.type.type base))
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                               _ _
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                               (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)
                                               (@fst
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                                 (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                                 (@PrimitiveSigma.Primitive.projT2
                                                 _ _ args))) ident
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                               base ident
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                               args) t0 pf)))
                                   (@PrimitiveSigma.Primitive.projT2 _ _
                                      (split_raw_ident_gen0 t0 i))))))
                       (@PrimitiveSigma.Primitive.projT2 _ _
                          (@proj1_sig
                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                base ident
                                (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                   _ _
                                   (raw_ident_infos_of0
                                      (@PrimitiveSigma.Primitive.projT1 _ _
                                         (split_raw_ident_gen0 t0 i)))))
                             (fun
                                args : @IdentifiersLibrary.Compilers.pattern.Raw.ident.ident_args
                                         base ident
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                            _ _
                                            (raw_ident_infos_of0
                                               (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                              =>
                              @sig
                                (@eq (type.type (base.type.type base))
                                   (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                      _ _
                                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                         _ _
                                         (raw_ident_infos_of0
                                            (@PrimitiveSigma.Primitive.projT1
                                               _ _
                                               (split_raw_ident_gen0 t0 i))))
                                      (@PrimitiveSigma.Primitive.projT1 _ _
                                         args)
                                      (@fst
                                         (@fold_right Type Type
                                            (fun A B : Type => prod A B) unit
                                            (@map
                                               IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                               Type
                                               (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                         (@fold_right Type Type
                                            (fun A B : Type => prod A B) unit
                                            (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                               _ _
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                               (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                         (@PrimitiveSigma.Primitive.projT2 _
                                            _ args))) t0)
                                (fun
                                   pf : @eq (type.type (base.type.type base))
                                          (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                             _ _
                                             (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                _ _
                                                (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                             (@PrimitiveSigma.Primitive.projT1
                                                _ _ args)
                                             (@fst
                                                (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                                (@fold_right Type Type
                                                 (fun A B : Type => prod A B)
                                                 unit
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                                (@PrimitiveSigma.Primitive.projT2
                                                 _ _ args))) t0 =>
                                 @eq (ident t0) i
                                   (@eq_rect
                                      (type.type (base.type.type base))
                                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.to_type
                                         _ _
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                            _ _
                                            (raw_ident_infos_of0
                                               (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                         (@PrimitiveSigma.Primitive.projT1 _
                                            _ args)
                                         (@fst
                                            (@fold_right Type Type
                                               (fun A B : Type => prod A B)
                                               unit
                                               (@map
                                                 IdentifiersLibrary.Compilers.pattern.Raw.ident.kind_of_type
                                                 Type
                                                 (IdentifiersLibrary.Compilers.pattern.Raw.ident.Type_of_kind_of_type
                                                 base)
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_types
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i)))))))
                                            (@fold_right Type Type
                                               (fun A B : Type => prod A B)
                                               unit
                                               (@IdentifiersLibrary.Compilers.pattern.Raw.ident.indep_args
                                                 _ _
                                                 (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                                 _ _
                                                 (raw_ident_infos_of0
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                                 (@PrimitiveSigma.Primitive.projT1
                                                 _ _ args)))
                                            (@PrimitiveSigma.Primitive.projT2
                                               _ _ args))) ident
                                      (@IdentifiersLibrary.Compilers.pattern.Raw.ident.assemble_ident
                                         base ident
                                         (@IdentifiersLibrary.Compilers.pattern.Raw.ident.preinfos
                                            _ _
                                            (raw_ident_infos_of0
                                               (@PrimitiveSigma.Primitive.projT1
                                                 _ _
                                                 (split_raw_ident_gen0 t0 i))))
                                         args) t0 pf)))
                             (@PrimitiveSigma.Primitive.projT2 _ _
                                (split_raw_ident_gen0 t0 i))))))))
           (@IdentifiersLibrary.Compilers.pattern.type.relax base t0))
    with
    | ident_false0 =>
        @eq_refl (type.type (pattern.base.type.type base))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.type_base base base_bool0))
    | ident_flat_map t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3))))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t2)))
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_app t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.list base
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    | ident_map t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t2)))
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_snd t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.prod base
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t3))))
          t0 t1
    | ident_fst t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.prod base
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))))
          t0 t1
    | ident_Z0 =>
        @eq_refl (type.type (pattern.base.type.type base))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.type_base base base_Z))
    | ident_add =>
        @eq_refl (type.type (pattern.base.type.type base))
          (@type.arrow (pattern.base.type.type base)
             (@type.base (pattern.base.type.type base)
                (@pattern.base.type.type_base base base_Z))
             (@type.arrow (pattern.base.type.type base)
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))
                (@type.base (pattern.base.type.type base)
                   (@pattern.base.type.type_base base base_Z))))
    | ident_literal0 t0 y =>
        (fun (t1 : base)
           (_ : match t1 return Type with
                | base_Z => Z
                | base_nat0 => nat
                | base_bool0 => bool
                end) =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.base (pattern.base.type.type base)
              (@pattern.base.type.type_base base t1))) t0 y
    | ident_nil0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.base (pattern.base.type.type base)
              (@pattern.base.type.list base
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t1))))
          t0
    | ident_cons0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t1))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    | ident_Some0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t1))
              (@type.base (pattern.base.type.type base)
                 (@pattern.base.type.option base
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)))))
          t0
    | ident_None0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.base (pattern.base.type.type base)
              (@pattern.base.type.option base
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t1))))
          t0
    | ident_pair0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3))
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.prod base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t2)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_tt0 =>
        @eq_refl (type.type (pattern.base.type.type base))
          (@type.base (pattern.base.type.type base)
             (@pattern.base.type.unit base))
    | ident_prod_rect_nodep0 t0 t1 t2 =>
        (fun t3 t4 t5 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t4))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t5))))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.prod base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t4)))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t5)))))
          t0 t1 t2
    | ident_bool_rect0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.unit base))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_bool0))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    | ident_list_case0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.unit base))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t2))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2)))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t3))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t2)))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_option_rect0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.unit base))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.option base
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t2)))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_nat_rect0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.unit base))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t1))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t1))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    | ident_eager_nat_rect0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.unit base))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t1))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t1))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    | ident_nat_rect_arrow0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2))
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2))
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t2))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t3))))))) t0 t1
    | ident_eager_nat_rect_arrow0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t2))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2))
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2))
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t2))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t3))))))) t0 t1
    | ident_list_rect0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.unit base))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t2))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3))
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t2)))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_eager_list_rect0 t0 t1 =>
        (fun t2 t3 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.unit base))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t3)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t2))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t2)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3))
                          (@type.base (pattern.base.type.type base)
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t2)))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3)))))) t0 t1
    | ident_list_rect_arrow0 t0 t1 t2 =>
        (fun t3 t4 t5 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t4))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t5)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t4))
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t5)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t4))
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t5))))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t4))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t5))))))) t0 t1 t2
    | ident_eager_list_rect_arrow0 t0 t1 t2 =>
        (fun t3 t4 t5 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t4))
                 (@type.base (pattern.base.type.type base)
                    (@IdentifiersLibrary.Compilers.pattern.base.relax base t5)))
              (@type.arrow (pattern.base.type.type base)
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t3))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@pattern.base.type.list base
                             (@IdentifiersLibrary.Compilers.pattern.base.relax
                                base t3)))
                       (@type.arrow (pattern.base.type.type base)
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t4))
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t5)))
                          (@type.arrow (pattern.base.type.type base)
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t4))
                             (@type.base (pattern.base.type.type base)
                                (@IdentifiersLibrary.Compilers.pattern.base.relax
                                   base t5))))))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.list base
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t3)))
                    (@type.arrow (pattern.base.type.type base)
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t4))
                       (@type.base (pattern.base.type.type base)
                          (@IdentifiersLibrary.Compilers.pattern.base.relax
                             base t5))))))) t0 t1 t2
    | ident_List_nth_default0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t1))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    | ident_eager_List_nth_default0 t0 =>
        (fun t1 : base.type.type base =>
         @eq_refl (type.type (pattern.base.type.type base))
           (@type.arrow (pattern.base.type.type base)
              (@type.base (pattern.base.type.type base)
                 (@IdentifiersLibrary.Compilers.pattern.base.relax base t1))
              (@type.arrow (pattern.base.type.type base)
                 (@type.base (pattern.base.type.type base)
                    (@pattern.base.type.list base
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))
                 (@type.arrow (pattern.base.type.type base)
                    (@type.base (pattern.base.type.type base)
                       (@pattern.base.type.type_base base base_nat0))
                    (@type.base (pattern.base.type.type base)
                       (@IdentifiersLibrary.Compilers.pattern.base.relax base
                          t1)))))) t0
    end ) in
  let arg_types_unfolded0 := mk arg_types_unfolded0 (
    forall (t : type.type (pattern.base.type.type base))
      (_ : pattern_ident t), list Type ) (
    fun (t : type.type (pattern.base.type.type base)) (idc : pattern_ident t)
    =>
    match idc in (pattern_ident t0) return (list Type) with
    | pattern_ident_false0 => @nil Type
    | pattern_ident_flat_map _ _ => @nil Type
    | pattern_ident_app _ => @nil Type
    | pattern_ident_map _ _ => @nil Type
    | pattern_ident_snd _ _ => @nil Type
    | pattern_ident_fst _ _ => @nil Type
    | pattern_ident_Z0 => @nil Type
    | pattern_ident_add => @nil Type
    | pattern_ident_literal0 t0 =>
        @cons Type
          match t0 return Type with
          | base_Z => Z
          | base_nat0 => nat
          | base_bool0 => bool
          end (@nil Type)
    | pattern_ident_nil0 _ => @nil Type
    | pattern_ident_cons0 _ => @nil Type
    | pattern_ident_Some0 _ => @nil Type
    | pattern_ident_None0 _ => @nil Type
    | pattern_ident_pair0 _ _ => @nil Type
    | pattern_ident_tt0 => @nil Type
    | pattern_ident_prod_rect_nodep0 _ _ _ => @nil Type
    | pattern_ident_bool_rect0 _ => @nil Type
    | pattern_ident_list_case0 _ _ => @nil Type
    | pattern_ident_option_rect0 _ _ => @nil Type
    | pattern_ident_nat_rect0 _ => @nil Type
    | pattern_ident_eager_nat_rect0 _ => @nil Type
    | pattern_ident_nat_rect_arrow0 _ _ => @nil Type
    | pattern_ident_eager_nat_rect_arrow0 _ _ => @nil Type
    | pattern_ident_list_rect0 _ _ => @nil Type
    | pattern_ident_eager_list_rect0 _ _ => @nil Type
    | pattern_ident_list_rect_arrow0 _ _ _ => @nil Type
    | pattern_ident_eager_list_rect_arrow0 _ _ _ => @nil Type
    | pattern_ident_List_nth_default0 _ => @nil Type
    | pattern_ident_eager_List_nth_default0 _ => @nil Type
    end ) in
  let type_of_list_arg_types_beq_unfolded0 := mk type_of_list_arg_types_beq_unfolded0 (
    forall (t : type.type (pattern.base.type.type base))
      (idc : pattern_ident t)
      (_ : @fold_right Type Type (fun A B : Type => prod A B) unit
             (arg_types_unfolded0 t idc))
      (_ : @fold_right Type Type (fun A B : Type => prod A B) unit
             (arg_types_unfolded0 t idc)), bool ) (
    fun (t : type.type (pattern.base.type.type base)) (idc : pattern_ident t)
    =>
    match
      idc as p in (pattern_ident t0)
      return
        (forall
           (_ : @fold_right Type Type (fun A B : Type => prod A B) unit
                  (arg_types_unfolded0 t0 p))
           (_ : @fold_right Type Type (fun A B : Type => prod A B) unit
                  (arg_types_unfolded0 t0 p)), bool)
    with
    | pattern_ident_false0 => fun _ _ : unit => true
    | pattern_ident_flat_map _ _ => fun _ _ : unit => true
    | pattern_ident_app _ => fun _ _ : unit => true
    | pattern_ident_map _ _ => fun _ _ : unit => true
    | pattern_ident_snd _ _ => fun _ _ : unit => true
    | pattern_ident_fst _ _ => fun _ _ : unit => true
    | pattern_ident_Z0 => fun _ _ : unit => true
    | pattern_ident_add => fun _ _ : unit => true
    | pattern_ident_literal0 t0 =>
        fun
          x0
           y : prod
                 match t0 return Type with
                 | base_Z => Z
                 | base_nat0 => nat
                 | base_bool0 => bool
                 end unit =>
        Prod.prod_beq
          match t0 return Type with
          | base_Z => Z
          | base_nat0 => nat
          | base_bool0 => bool
          end unit (base_interp_beq0 t0 t0) (fun _ _ : unit => true) x0 y
    | pattern_ident_nil0 _ => fun _ _ : unit => true
    | pattern_ident_cons0 _ => fun _ _ : unit => true
    | pattern_ident_Some0 _ => fun _ _ : unit => true
    | pattern_ident_None0 _ => fun _ _ : unit => true
    | pattern_ident_pair0 _ _ => fun _ _ : unit => true
    | pattern_ident_tt0 => fun _ _ : unit => true
    | pattern_ident_prod_rect_nodep0 _ _ _ => fun _ _ : unit => true
    | pattern_ident_bool_rect0 _ => fun _ _ : unit => true
    | pattern_ident_list_case0 _ _ => fun _ _ : unit => true
    | pattern_ident_option_rect0 _ _ => fun _ _ : unit => true
    | pattern_ident_nat_rect0 _ => fun _ _ : unit => true
    | pattern_ident_eager_nat_rect0 _ => fun _ _ : unit => true
    | pattern_ident_nat_rect_arrow0 _ _ => fun _ _ : unit => true
    | pattern_ident_eager_nat_rect_arrow0 _ _ => fun _ _ : unit => true
    | pattern_ident_list_rect0 _ _ => fun _ _ : unit => true
    | pattern_ident_eager_list_rect0 _ _ => fun _ _ : unit => true
    | pattern_ident_list_rect_arrow0 _ _ _ => fun _ _ : unit => true
    | pattern_ident_eager_list_rect_arrow0 _ _ _ => fun _ _ : unit => true
    | pattern_ident_List_nth_default0 _ => fun _ _ : unit => true
    | pattern_ident_eager_List_nth_default0 _ => fun _ _ : unit => true
    end ) in
  let to_typed_unfolded0 := mk to_typed_unfolded0 (
    forall (t : type.type (pattern.base.type.type base))
      (idc : pattern_ident t)
      (evm : FMapPositive.PositiveMap.tree (base.type.type base))
      (_ : @fold_right Type Type (fun A B : Type => prod A B) unit
             (arg_types_unfolded0 t idc)),
    ident
      (@IdentifiersLibrary.Compilers.pattern.type.subst_default base t evm) ) (
    fun (t : type.type (pattern.base.type.type base))
      (idc : pattern_ident t)
      (evm : FMapPositive.PositiveMap.tree (base.type.type base)) =>
    match
      idc as p in (pattern_ident t0)
      return
        (forall
           _ : @fold_right Type Type (fun A B : Type => prod A B) unit
                 (arg_types_unfolded0 t0 p),
         ident
           (@IdentifiersLibrary.Compilers.pattern.type.subst_default base t0
              evm))
    with
    | pattern_ident_false0 => fun _ : unit => ident_false0
    | pattern_ident_flat_map t0 t1 =>
        fun _ : unit =>
        ident_flat_map
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_app t0 =>
        fun _ : unit =>
        ident_app
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_map t0 t1 =>
        fun _ : unit =>
        ident_map
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_snd t0 t1 =>
        fun _ : unit =>
        ident_snd
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_fst t0 t1 =>
        fun _ : unit =>
        ident_fst
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_Z0 => fun _ : unit => ident_Z0
    | pattern_ident_add => fun _ : unit => ident_add
    | pattern_ident_literal0 t0 =>
        fun
          args : prod
                   match t0 return Type with
                   | base_Z => Z
                   | base_nat0 => nat
                   | base_bool0 => bool
                   end unit =>
        ident_literal0 t0
          (@fst
             match t0 return Type with
             | base_Z => Z
             | base_nat0 => nat
             | base_bool0 => bool
             end unit args)
    | pattern_ident_nil0 t0 =>
        fun _ : unit =>
        ident_nil0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_cons0 t0 =>
        fun _ : unit =>
        ident_cons0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_Some0 t0 =>
        fun _ : unit =>
        ident_Some0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_None0 t0 =>
        fun _ : unit =>
        ident_None0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_pair0 t0 t1 =>
        fun _ : unit =>
        ident_pair0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_tt0 => fun _ : unit => ident_tt0
    | pattern_ident_prod_rect_nodep0 t0 t1 t2 =>
        fun _ : unit =>
        ident_prod_rect_nodep0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t2
             evm)
    | pattern_ident_bool_rect0 t0 =>
        fun _ : unit =>
        ident_bool_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_list_case0 t0 t1 =>
        fun _ : unit =>
        ident_list_case0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_option_rect0 t0 t1 =>
        fun _ : unit =>
        ident_option_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_nat_rect0 t0 =>
        fun _ : unit =>
        ident_nat_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_eager_nat_rect0 t0 =>
        fun _ : unit =>
        ident_eager_nat_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_nat_rect_arrow0 t0 t1 =>
        fun _ : unit =>
        ident_nat_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_eager_nat_rect_arrow0 t0 t1 =>
        fun _ : unit =>
        ident_eager_nat_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_list_rect0 t0 t1 =>
        fun _ : unit =>
        ident_list_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_eager_list_rect0 t0 t1 =>
        fun _ : unit =>
        ident_eager_list_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
    | pattern_ident_list_rect_arrow0 t0 t1 t2 =>
        fun _ : unit =>
        ident_list_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t2
             evm)
    | pattern_ident_eager_list_rect_arrow0 t0 t1 t2 =>
        fun _ : unit =>
        ident_eager_list_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t1
             evm)
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t2
             evm)
    | pattern_ident_List_nth_default0 t0 =>
        fun _ : unit =>
        ident_List_nth_default0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    | pattern_ident_eager_List_nth_default0 t0 =>
        fun _ : unit =>
        ident_eager_List_nth_default0
          (@IdentifiersLibrary.Compilers.pattern.base.subst_default base t0
             evm)
    end ) in
  let of_typed_ident_unfolded0 := mk of_typed_ident_unfolded0 (
    forall (t : type.type (base.type.type base)) (_ : ident t),
    pattern_ident (@IdentifiersLibrary.Compilers.pattern.type.relax base t) ) (
    fun (t : type.type (base.type.type base)) (idc : ident t) =>
    match
      idc in (ident t0)
      return
        (pattern_ident
           (@IdentifiersLibrary.Compilers.pattern.type.relax base t0))
    with
    | ident_false0 => pattern_ident_false0
    | ident_flat_map t0 t1 =>
        pattern_ident_flat_map
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_app t0 =>
        pattern_ident_app
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_map t0 t1 =>
        pattern_ident_map
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_snd t0 t1 =>
        pattern_ident_snd
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_fst t0 t1 =>
        pattern_ident_fst
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_Z0 => pattern_ident_Z0
    | ident_add => pattern_ident_add
    | ident_literal0 t0 _ => pattern_ident_literal0 t0
    | ident_nil0 t0 =>
        pattern_ident_nil0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_cons0 t0 =>
        pattern_ident_cons0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_Some0 t0 =>
        pattern_ident_Some0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_None0 t0 =>
        pattern_ident_None0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_pair0 t0 t1 =>
        pattern_ident_pair0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_tt0 => pattern_ident_tt0
    | ident_prod_rect_nodep0 t0 t1 t2 =>
        pattern_ident_prod_rect_nodep0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t2)
    | ident_bool_rect0 t0 =>
        pattern_ident_bool_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_list_case0 t0 t1 =>
        pattern_ident_list_case0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_option_rect0 t0 t1 =>
        pattern_ident_option_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_nat_rect0 t0 =>
        pattern_ident_nat_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_eager_nat_rect0 t0 =>
        pattern_ident_eager_nat_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_nat_rect_arrow0 t0 t1 =>
        pattern_ident_nat_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_eager_nat_rect_arrow0 t0 t1 =>
        pattern_ident_eager_nat_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_list_rect0 t0 t1 =>
        pattern_ident_list_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_eager_list_rect0 t0 t1 =>
        pattern_ident_eager_list_rect0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
    | ident_list_rect_arrow0 t0 t1 t2 =>
        pattern_ident_list_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t2)
    | ident_eager_list_rect_arrow0 t0 t1 t2 =>
        pattern_ident_eager_list_rect_arrow0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t1)
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t2)
    | ident_List_nth_default0 t0 =>
        pattern_ident_List_nth_default0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    | ident_eager_List_nth_default0 t0 =>
        pattern_ident_eager_List_nth_default0
          (@IdentifiersLibrary.Compilers.pattern.base.relax base t0)
    end ) in
  let arg_types_of_typed_ident_unfolded0 := mk arg_types_of_typed_ident_unfolded0 (
    forall (t : type.type (base.type.type base)) (idc : ident t),
    @fold_right Type Type (fun A B : Type => prod A B) unit
      (arg_types_unfolded0
         (@IdentifiersLibrary.Compilers.pattern.type.relax base t)
         (of_typed_ident_unfolded0 t idc)) ) (
    fun (t : type.type (base.type.type base)) (idc : ident t) =>
    match
      idc as i in (ident t0)
      return
        (@fold_right Type Type (fun A B : Type => prod A B) unit
           (arg_types_unfolded0
              (@IdentifiersLibrary.Compilers.pattern.type.relax base t0)
              (of_typed_ident_unfolded0 t0 i)))
    with
    | ident_false0 => tt
    | ident_flat_map _ _ => tt
    | ident_app _ => tt
    | ident_map _ _ => tt
    | ident_snd _ _ => tt
    | ident_fst _ _ => tt
    | ident_Z0 => tt
    | ident_add => tt
    | ident_literal0 t0 y =>
        @pair
          match t0 return Type with
          | base_Z => Z
          | base_nat0 => nat
          | base_bool0 => bool
          end unit y tt
    | ident_nil0 _ => tt
    | ident_cons0 _ => tt
    | ident_Some0 _ => tt
    | ident_None0 _ => tt
    | ident_pair0 _ _ => tt
    | ident_tt0 => tt
    | ident_prod_rect_nodep0 _ _ _ => tt
    | ident_bool_rect0 _ => tt
    | ident_list_case0 _ _ => tt
    | ident_option_rect0 _ _ => tt
    | ident_nat_rect0 _ => tt
    | ident_eager_nat_rect0 _ => tt
    | ident_nat_rect_arrow0 _ _ => tt
    | ident_eager_nat_rect_arrow0 _ _ => tt
    | ident_list_rect0 _ _ => tt
    | ident_eager_list_rect0 _ _ => tt
    | ident_list_rect_arrow0 _ _ _ => tt
    | ident_eager_list_rect_arrow0 _ _ _ => tt
    | ident_List_nth_default0 _ => tt
    | ident_eager_List_nth_default0 _ => tt
    end ) in
  let unify0 := mk unify0 (
    forall (t : type.type (pattern.base.type.type base))
      (t' : type.type (base.type.type base)) (pidc : pattern_ident t)
      (_ : ident t'),
    option
      (@fold_right Type Type (fun A B : Type => prod A B) unit
         (@IdentifiersLibrary.Compilers.pattern.ident.arg_types base ident
            raw_ident raw_ident_infos_of0 pattern_ident eta_ident_cps_gen4
            split_types0 t pidc)) ) (
    fun (t : type.type (pattern.base.type.type base))
      (t' : type.type (base.type.type base)) (pidc : pattern_ident t)
      (idc : ident t') =>
    match
      pidc as c in (pattern_ident H)
      return
        (option
           ((fix Ffix (x : list Type) : Type :=
               match x return Type with
               | nil => unit
               | cons x0 x1 => prod x0 (Ffix x1)
               end)
              match c in (pattern_ident H0) return (list Type) with
              | pattern_ident_false0 => @nil Type
              | pattern_ident_flat_map _ _ => @nil Type
              | pattern_ident_app _ => @nil Type
              | pattern_ident_map _ _ => @nil Type
              | pattern_ident_snd _ _ => @nil Type
              | pattern_ident_fst _ _ => @nil Type
              | pattern_ident_Z0 => @nil Type
              | pattern_ident_add => @nil Type
              | pattern_ident_literal0 t0 =>
                  @cons Type
                    match t0 return Type with
                    | base_Z => Z
                    | base_nat0 => nat
                    | base_bool0 => bool
                    end (@nil Type)
              | pattern_ident_nil0 _ => @nil Type
              | pattern_ident_cons0 _ => @nil Type
              | pattern_ident_Some0 _ => @nil Type
              | pattern_ident_None0 _ => @nil Type
              | pattern_ident_pair0 _ _ => @nil Type
              | pattern_ident_tt0 => @nil Type
              | pattern_ident_prod_rect_nodep0 _ _ _ => @nil Type
              | pattern_ident_bool_rect0 _ => @nil Type
              | pattern_ident_list_case0 _ _ => @nil Type
              | pattern_ident_option_rect0 _ _ => @nil Type
              | pattern_ident_nat_rect0 _ => @nil Type
              | pattern_ident_eager_nat_rect0 _ => @nil Type
              | pattern_ident_nat_rect_arrow0 _ _ => @nil Type
              | pattern_ident_eager_nat_rect_arrow0 _ _ => @nil Type
              | pattern_ident_list_rect0 _ _ => @nil Type
              | pattern_ident_eager_list_rect0 _ _ => @nil Type
              | pattern_ident_list_rect_arrow0 _ _ _ => @nil Type
              | pattern_ident_eager_list_rect_arrow0 _ _ _ => @nil Type
              | pattern_ident_List_nth_default0 _ => @nil Type
              | pattern_ident_eager_List_nth_default0 _ => @nil Type
              end))
    with
    | pattern_ident_false0 =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @Some unit tt
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_flat_map _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @Some unit tt
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_app _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @Some unit tt
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_map _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @Some unit tt
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_snd _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @Some unit tt
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_fst _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @Some unit tt
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_Z0 =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @Some unit tt
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_add =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @Some unit tt
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_literal0 t0 =>
        match
          t0 as c
          return
            (option
               (prod
                  match c return Type with
                  | base_Z => Z
                  | base_nat0 => nat
                  | base_bool0 => bool
                  end unit))
        with
        | base_Z =>
            match idc in (ident H) return (option (prod Z unit)) with
            | ident_false0 => @None (prod Z unit)
            | ident_flat_map _ _ => @None (prod Z unit)
            | ident_app _ => @None (prod Z unit)
            | ident_map _ _ => @None (prod Z unit)
            | ident_snd _ _ => @None (prod Z unit)
            | ident_fst _ _ => @None (prod Z unit)
            | ident_Z0 => @None (prod Z unit)
            | ident_add => @None (prod Z unit)
            | ident_literal0 t1 x =>
                match
                  t1 as c
                  return
                    (forall
                       _ : match c return Type with
                           | base_Z => Z
                           | base_nat0 => nat
                           | base_bool0 => bool
                           end, option (prod Z unit))
                with
                | base_Z =>
                    fun
                      x0 : match base_Z return Type with
                           | base_Z => Z
                           | base_nat0 => nat
                           | base_bool0 => bool
                           end => @Some (prod Z unit) (@pair Z unit x0 tt)
                | base_nat0 =>
                    fun
                      _ : match base_nat0 return Type with
                          | base_Z => Z
                          | base_nat0 => nat
                          | base_bool0 => bool
                          end => @None (prod Z unit)
                | base_bool0 =>
                    fun
                      _ : match base_bool0 return Type with
                          | base_Z => Z
                          | base_nat0 => nat
                          | base_bool0 => bool
                          end => @None (prod Z unit)
                end x
            | ident_nil0 _ => @None (prod Z unit)
            | ident_cons0 _ => @None (prod Z unit)
            | ident_Some0 _ => @None (prod Z unit)
            | ident_None0 _ => @None (prod Z unit)
            | ident_pair0 _ _ => @None (prod Z unit)
            | ident_tt0 => @None (prod Z unit)
            | ident_prod_rect_nodep0 _ _ _ => @None (prod Z unit)
            | ident_bool_rect0 _ => @None (prod Z unit)
            | ident_list_case0 _ _ => @None (prod Z unit)
            | ident_option_rect0 _ _ => @None (prod Z unit)
            | ident_nat_rect0 _ => @None (prod Z unit)
            | ident_eager_nat_rect0 _ => @None (prod Z unit)
            | ident_nat_rect_arrow0 _ _ => @None (prod Z unit)
            | ident_eager_nat_rect_arrow0 _ _ => @None (prod Z unit)
            | ident_list_rect0 _ _ => @None (prod Z unit)
            | ident_eager_list_rect0 _ _ => @None (prod Z unit)
            | ident_list_rect_arrow0 _ _ _ => @None (prod Z unit)
            | ident_eager_list_rect_arrow0 _ _ _ => @None (prod Z unit)
            | ident_List_nth_default0 _ => @None (prod Z unit)
            | ident_eager_List_nth_default0 _ => @None (prod Z unit)
            end
        | base_nat0 =>
            match idc in (ident H) return (option (prod nat unit)) with
            | ident_false0 => @None (prod nat unit)
            | ident_flat_map _ _ => @None (prod nat unit)
            | ident_app _ => @None (prod nat unit)
            | ident_map _ _ => @None (prod nat unit)
            | ident_snd _ _ => @None (prod nat unit)
            | ident_fst _ _ => @None (prod nat unit)
            | ident_Z0 => @None (prod nat unit)
            | ident_add => @None (prod nat unit)
            | ident_literal0 t1 x =>
                match
                  t1 as c
                  return
                    (forall
                       _ : match c return Type with
                           | base_Z => Z
                           | base_nat0 => nat
                           | base_bool0 => bool
                           end, option (prod nat unit))
                with
                | base_Z =>
                    fun
                      _ : match base_Z return Type with
                          | base_Z => Z
                          | base_nat0 => nat
                          | base_bool0 => bool
                          end => @None (prod nat unit)
                | base_nat0 =>
                    fun
                      x0 : match base_nat0 return Type with
                           | base_Z => Z
                           | base_nat0 => nat
                           | base_bool0 => bool
                           end =>
                    @Some (prod nat unit) (@pair nat unit x0 tt)
                | base_bool0 =>
                    fun
                      _ : match base_bool0 return Type with
                          | base_Z => Z
                          | base_nat0 => nat
                          | base_bool0 => bool
                          end => @None (prod nat unit)
                end x
            | ident_nil0 _ => @None (prod nat unit)
            | ident_cons0 _ => @None (prod nat unit)
            | ident_Some0 _ => @None (prod nat unit)
            | ident_None0 _ => @None (prod nat unit)
            | ident_pair0 _ _ => @None (prod nat unit)
            | ident_tt0 => @None (prod nat unit)
            | ident_prod_rect_nodep0 _ _ _ => @None (prod nat unit)
            | ident_bool_rect0 _ => @None (prod nat unit)
            | ident_list_case0 _ _ => @None (prod nat unit)
            | ident_option_rect0 _ _ => @None (prod nat unit)
            | ident_nat_rect0 _ => @None (prod nat unit)
            | ident_eager_nat_rect0 _ => @None (prod nat unit)
            | ident_nat_rect_arrow0 _ _ => @None (prod nat unit)
            | ident_eager_nat_rect_arrow0 _ _ => @None (prod nat unit)
            | ident_list_rect0 _ _ => @None (prod nat unit)
            | ident_eager_list_rect0 _ _ => @None (prod nat unit)
            | ident_list_rect_arrow0 _ _ _ => @None (prod nat unit)
            | ident_eager_list_rect_arrow0 _ _ _ => @None (prod nat unit)
            | ident_List_nth_default0 _ => @None (prod nat unit)
            | ident_eager_List_nth_default0 _ => @None (prod nat unit)
            end
        | base_bool0 =>
            match idc in (ident H) return (option (prod bool unit)) with
            | ident_false0 => @None (prod bool unit)
            | ident_flat_map _ _ => @None (prod bool unit)
            | ident_app _ => @None (prod bool unit)
            | ident_map _ _ => @None (prod bool unit)
            | ident_snd _ _ => @None (prod bool unit)
            | ident_fst _ _ => @None (prod bool unit)
            | ident_Z0 => @None (prod bool unit)
            | ident_add => @None (prod bool unit)
            | ident_literal0 t1 x =>
                match
                  t1 as c
                  return
                    (forall
                       _ : match c return Type with
                           | base_Z => Z
                           | base_nat0 => nat
                           | base_bool0 => bool
                           end, option (prod bool unit))
                with
                | base_Z =>
                    fun
                      _ : match base_Z return Type with
                          | base_Z => Z
                          | base_nat0 => nat
                          | base_bool0 => bool
                          end => @None (prod bool unit)
                | base_nat0 =>
                    fun
                      _ : match base_nat0 return Type with
                          | base_Z => Z
                          | base_nat0 => nat
                          | base_bool0 => bool
                          end => @None (prod bool unit)
                | base_bool0 =>
                    fun
                      x0 : match base_bool0 return Type with
                           | base_Z => Z
                           | base_nat0 => nat
                           | base_bool0 => bool
                           end =>
                    @Some (prod bool unit) (@pair bool unit x0 tt)
                end x
            | ident_nil0 _ => @None (prod bool unit)
            | ident_cons0 _ => @None (prod bool unit)
            | ident_Some0 _ => @None (prod bool unit)
            | ident_None0 _ => @None (prod bool unit)
            | ident_pair0 _ _ => @None (prod bool unit)
            | ident_tt0 => @None (prod bool unit)
            | ident_prod_rect_nodep0 _ _ _ => @None (prod bool unit)
            | ident_bool_rect0 _ => @None (prod bool unit)
            | ident_list_case0 _ _ => @None (prod bool unit)
            | ident_option_rect0 _ _ => @None (prod bool unit)
            | ident_nat_rect0 _ => @None (prod bool unit)
            | ident_eager_nat_rect0 _ => @None (prod bool unit)
            | ident_nat_rect_arrow0 _ _ => @None (prod bool unit)
            | ident_eager_nat_rect_arrow0 _ _ => @None (prod bool unit)
            | ident_list_rect0 _ _ => @None (prod bool unit)
            | ident_eager_list_rect0 _ _ => @None (prod bool unit)
            | ident_list_rect_arrow0 _ _ _ => @None (prod bool unit)
            | ident_eager_list_rect_arrow0 _ _ _ => @None (prod bool unit)
            | ident_List_nth_default0 _ => @None (prod bool unit)
            | ident_eager_List_nth_default0 _ => @None (prod bool unit)
            end
        end
    | pattern_ident_nil0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @Some unit tt
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_cons0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @Some unit tt
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_Some0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @Some unit tt
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_None0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @Some unit tt
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_pair0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @Some unit tt
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_tt0 =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @Some unit tt
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_prod_rect_nodep0 _ _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @Some unit tt
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_bool_rect0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @Some unit tt
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_list_case0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @Some unit tt
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_option_rect0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @Some unit tt
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_nat_rect0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @Some unit tt
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_eager_nat_rect0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @Some unit tt
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_nat_rect_arrow0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @Some unit tt
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_eager_nat_rect_arrow0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @Some unit tt
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_list_rect0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @Some unit tt
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_eager_list_rect0 _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @Some unit tt
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_list_rect_arrow0 _ _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @Some unit tt
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_eager_list_rect_arrow0 _ _ _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @Some unit tt
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_List_nth_default0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @Some unit tt
        | ident_eager_List_nth_default0 _ => @None unit
        end
    | pattern_ident_eager_List_nth_default0 _ =>
        match idc in (ident H) return (option unit) with
        | ident_false0 => @None unit
        | ident_flat_map _ _ => @None unit
        | ident_app _ => @None unit
        | ident_map _ _ => @None unit
        | ident_snd _ _ => @None unit
        | ident_fst _ _ => @None unit
        | ident_Z0 => @None unit
        | ident_add => @None unit
        | ident_literal0 t0 x =>
            match
              t0 as c
              return
                (forall
                   _ : match c return Type with
                       | base_Z => Z
                       | base_nat0 => nat
                       | base_bool0 => bool
                       end, option unit)
            with
            | base_Z =>
                fun
                  _ : match base_Z return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_nat0 =>
                fun
                  _ : match base_nat0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            | base_bool0 =>
                fun
                  _ : match base_bool0 return Type with
                      | base_Z => Z
                      | base_nat0 => nat
                      | base_bool0 => bool
                      end => @None unit
            end x
        | ident_nil0 _ => @None unit
        | ident_cons0 _ => @None unit
        | ident_Some0 _ => @None unit
        | ident_None0 _ => @None unit
        | ident_pair0 _ _ => @None unit
        | ident_tt0 => @None unit
        | ident_prod_rect_nodep0 _ _ _ => @None unit
        | ident_bool_rect0 _ => @None unit
        | ident_list_case0 _ _ => @None unit
        | ident_option_rect0 _ _ => @None unit
        | ident_nat_rect0 _ => @None unit
        | ident_eager_nat_rect0 _ => @None unit
        | ident_nat_rect_arrow0 _ _ => @None unit
        | ident_eager_nat_rect_arrow0 _ _ => @None unit
        | ident_list_rect0 _ _ => @None unit
        | ident_eager_list_rect0 _ _ => @None unit
        | ident_list_rect_arrow0 _ _ _ => @None unit
        | ident_eager_list_rect_arrow0 _ _ _ => @None unit
        | ident_List_nth_default0 _ => @None unit
        | ident_eager_List_nth_default0 _ => @Some unit tt
        end
    end ) in
  let unify_unknown0 := mk unify_unknown0 (
    forall (t : type.type (pattern.base.type.type base))
      (t' : type.type (base.type.type base)) (pidc : pattern_ident t)
      (_ : ident t'),
    option
      (@fold_right Type Type (fun A B : Type => prod A B) unit
         (@IdentifiersLibrary.Compilers.pattern.ident.arg_types base ident
            raw_ident raw_ident_infos_of0 pattern_ident eta_ident_cps_gen4
            split_types0 t pidc)) ) ( unify0 ) in
  let pattern_package0 := mk pattern_package0 (
    @IdentifiersLibrary.Compilers.pattern.ident.GoalType.package base ident ) (
    IdentifiersLibrary.Compilers.pattern.ident.GoalType.Build_package base
      ident all_base2 all_idents2 ident_index1 eta_ident_cps_gen2
      eta_ident_cps_gen_expand_literal1 eta_ident_cps0 simple_idents0
      raw_ident all_raw_idents0 ident_index2 raw_ident_index_idempotent0
      eta_ident_cps_gen3 raw_ident_infos_of0 split_raw_ident_gen0
      raw_invert_bind_args0 invert_bind_args_unknown0 pattern_ident
      all_pattern_idents0 eta_ident_cps_gen4
      eta_ident_cps_gen_expand_literal2 split_types0 add_types_from_raw_sig0
      to_type_split_types_subst_default_eq0 projT1_add_types_from_raw_sig_eq0
      arg_types_unfolded0 to_typed_unfolded0
      type_of_list_arg_types_beq_unfolded0 of_typed_ident_unfolded0
      arg_types_of_typed_ident_unfolded0 unify0 unify_unknown0 in

let reify_package := constr:(
      (IdentifiersBasicLibrary.Compilers.Basic.GoalType.exprReifyInfo
        (IdentifiersBasicLibrary.Compilers.Basic.GoalType.Build_package
           (Classes.Build_ExprInfoT base ident base_interp0 ident_interp0)
           (Classes.Build_ExprExtraInfoT
              (Classes.Build_ExprInfoT base ident base_interp0 ident_interp0)
              base_beq0 base_interp_beq0 try_make_base_transport_cps0
              baseHasNat0 buildIdent0 toRestrictedIdent0 buildEagerIdent0
              invertIdent0 base_default0 reflect_base_beq0
              reflect_base_interp_beq0 try_make_base_transport_cps_correct0
              baseHasNatCorrect0 toFromRestrictedIdent0
              buildInvertIdentCorrect0 buildInterpIdentCorrect0
              buildInterpEagerIdentCorrect0 ident_interp_Proper0)
           (IdentifiersBasicLibrary.Compilers.Basic.GoalType.Build_ExprReifyInfoT
              (Classes.Build_ExprInfoT base ident base_interp0 ident_interp0)
              all_base_and_interp0 all_ident_and_interp0) ident_is_var_like0)) ) in
let exprInfo := constr:(
      (Classes.Build_ExprInfoT base ident base_interp0 ident_interp0) ) in
let exprExtraInfo := constr:(
      (Classes.Build_ExprExtraInfoT
        (Classes.Build_ExprInfoT base ident base_interp0 ident_interp0)
        base_beq0 base_interp_beq0 try_make_base_transport_cps0 baseHasNat0
        buildIdent0 toRestrictedIdent0 buildEagerIdent0 invertIdent0
        base_default0 reflect_base_beq0 reflect_base_interp_beq0
        try_make_base_transport_cps_correct0 baseHasNatCorrect0
        toFromRestrictedIdent0 buildInvertIdentCorrect0
        buildInterpIdentCorrect0 buildInterpEagerIdentCorrect0
        ident_interp_Proper0) ) in
let pkg := constr:(
      (IdentifiersLibrary.Compilers.pattern.ident.GoalType.Build_package base
        ident all_base2 all_idents2 ident_index1 eta_ident_cps_gen2
        eta_ident_cps_gen_expand_literal1 eta_ident_cps0 simple_idents0
        raw_ident all_raw_idents0 ident_index2 raw_ident_index_idempotent0
        eta_ident_cps_gen3 raw_ident_infos_of0 split_raw_ident_gen0
        raw_invert_bind_args0 invert_bind_args_unknown0 pattern_ident
        all_pattern_idents0 eta_ident_cps_gen4
        eta_ident_cps_gen_expand_literal2 split_types0
        add_types_from_raw_sig0 to_type_split_types_subst_default_eq0
        projT1_add_types_from_raw_sig_eq0 arg_types_unfolded0
        to_typed_unfolded0 type_of_list_arg_types_beq_unfolded0
        of_typed_ident_unfolded0 arg_types_of_typed_ident_unfolded0 unify0
        unify_unknown0) ) in
let ident_is_var_like := constr:(
      ident_is_var_like0 ) in
let include_interp := constr:( false ) in
let specs := constr:(
      (@cons (prod bool Prop)
        (@pair bool Prop false (forall n : Z, @eq Z (Z.add n Z0) n))
        (@cons (prod bool Prop)
           (@pair bool Prop false
              (forall (A B : Type) (a : A) (b : B),
               @eq A (@fst A B (@pair A B a b)) a))
           (@cons (prod bool Prop)
              (@pair bool Prop false
                 (forall (A B : Type) (a : A) (b : B),
                  @eq B (@snd A B (@pair A B a b)) b))
              (@cons (prod bool Prop)
                 (@pair bool Prop false
                    (forall (A B : Type) (f : forall _ : A, B) (ls : list A),
                     @eq (list B) (@map A B f ls)
                       (@ident.eagerly
                          (forall (A0 : Type) (P : forall _ : list A0, Type)
                             (_ : P (@nil A0))
                             (_ : forall (a : A0) (l : list A0) (_ : P l),
                                  P (@cons A0 a l))
                             (l : list A0), P l) list_rect A
                          (fun _ : list A => list B)
                          (@nil B)
                          (fun (x : A) (_ : list A) (map_f_xs : list B) =>
                           @cons B (f x) map_f_xs) ls)))
                 (@cons (prod bool Prop)
                    (@pair bool Prop false
                       (forall (A : Type) (xs ys : list A),
                        @eq (list A) (@app A xs ys)
                          (@ident.eagerly
                             (forall (A0 : Type)
                                (P : forall _ : list A0, Type)
                                (_ : P (@nil A0))
                                (_ : forall (a : A0) (l : list A0) (_ : P l),
                                     P (@cons A0 a l))
                                (l : list A0), P l) list_rect A
                             (fun _ : list A => list A) ys
                             (fun (x : A) (_ app_xs_ys : list A) =>
                              @cons A x app_xs_ys) xs)))
                    (@cons (prod bool Prop)
                       (@pair bool Prop false
                          (forall (A P Q : Type) (N : forall _ : P, Q)
                             (C : forall (_ : A) (_ : list A)
                                    (_ : forall _ : P, Q)
                                    (_ : P), Q) (ls : list A)
                             (v : P),
                           @eq Q (@list_rect_arrow_nodep A P Q N C ls v)
                             (@ident.eagerly
                                (forall (A0 P0 Q0 : Type)
                                   (_ : forall _ : P0, Q0)
                                   (_ : forall (_ : A0)
                                          (_ : list A0)
                                          (_ : forall _ : P0, Q0)
                                          (_ : P0), Q0)
                                   (_ : list A0) (_ : P0), Q0)
                                (@list_rect_arrow_nodep) A P Q N C ls v)))
                       (@cons (prod bool Prop)
                          (@pair bool Prop false
                             (forall (A P : Type)
                                (N : forall _ : unit, P)
                                (C : forall (_ : A) (_ : list A) (_ : P), P)
                                (ls : list A),
                              @eq P (@Thunked.list_rect A P N C ls)
                                (@ident.eagerly
                                   (forall (A0 P0 : Type)
                                      (_ : forall _ : unit, P0)
                                      (_ : forall
                                             (_ : A0)
                                             (_ : list A0)
                                             (_ : P0), P0)
                                      (_ : list A0), P0)
                                   (@Thunked.list_rect) A P N C ls)))
                          (@cons (prod bool Prop)
                             (@pair bool Prop false
                                (forall (A P : Type)
                                   (N : forall _ : unit, P)
                                   (C : forall (_ : A) (_ : list A), P),
                                 @eq P (@Thunked.list_case A P N C (@nil A))
                                   (N tt)))
                             (@cons (prod bool Prop)
                                (@pair bool Prop false
                                   (forall (A P : Type)
                                      (N : forall _ : unit, P)
                                      (C : forall (_ : A) (_ : list A), P)
                                      (x : A) (xs : list A),
                                    @eq P
                                      (@Thunked.list_case A P N C
                                         (@cons A x xs))
                                      (C x xs)))
                                (@cons (prod bool Prop)
                                   (@pair bool Prop false
                                      (forall (A : Type)
                                         (default : A)
                                         (ls : list A)
                                         (n : nat),
                                       @eq A
                                         (@nth_default A default ls
                                            (@ident.literal nat n))
                                         (@ident.eagerly
                                            (forall
                                               (A0 : Type)
                                               (_ : A0)
                                               (_ : list A0)
                                               (_ : nat), A0) nth_default A
                                            default ls
                                            (@ident.literal nat n))))
                                   (@cons (prod bool Prop)
                                      (@pair bool Prop true
                                         (forall (A B : Type)
                                            (f : forall _ : A, list B)
                                            (xs : list A),
                                          @eq (list B)
                                            (@flat_map A B f xs)
                                            (@list_rect A
                                               (fun _ : list A => list B)
                                               (@nil B)
                                               (fun
                                                 (x : A)
                                                 (_ : list A)
                                                 (flat_map_tl : list B) =>
                                                @app B (f x) flat_map_tl) xs)))
                                      (@nil (prod bool Prop))))))))))))) ) in
    let reify_base :=
    IdentifiersBasicGenerate.Compilers.Basic.Tactic.reify_base_via_reify_package
     reify_package
   in
   let reify_ident :=
    IdentifiersBasicGenerate.Compilers.Basic.Tactic.reify_ident_via_reify_package
     reify_package
   in
   let v := Reify.Compilers.RewriteRules.Make.Reify reify_base reify_ident exprInfo
                                                    exprExtraInfo pkg ident_is_var_like include_interp specs in
   idtac v.
